{"meta":{"title":"Next Dream...","subtitle":"","description":"ELLIAS's blog. This object has escaped into fantasy.","author":"ELLIAS","url":"https://brynhild.online","root":"/"},"pages":[{"title":"","date":"2020-09-03T11:57:55.704Z","updated":"2020-03-09T11:18:16.133Z","comments":true,"path":"archives/index.html","permalink":"https://brynhild.online/archives/index.html","excerpt":"","text":""},{"title":"404 Not Found","date":"2020-09-04T08:19:02.162Z","updated":"2019-06-05T11:45:47.777Z","comments":true,"path":"404.html","permalink":"https://brynhild.online/404.html","excerpt":"","text":"404 Not Found This object has escaped into fantasy Please contact the Administrator"},{"title":"","date":"2020-09-01T08:30:58.409Z","updated":"2020-03-08T12:26:06.703Z","comments":true,"path":"baidu_verify_oFoINJ957S.html","permalink":"https://brynhild.online/baidu_verify_oFoINJ957S.html","excerpt":"","text":"oFoINJ957S"},{"title":"","date":"2020-09-01T08:30:58.413Z","updated":"2019-06-01T11:31:37.462Z","comments":true,"path":"googleee23d67b90dfc2e5.html","permalink":"https://brynhild.online/googleee23d67b90dfc2e5.html","excerpt":"","text":"google-site-verification: googleee23d67b90dfc2e5.html"},{"title":"About Me","date":"2021-02-16T12:50:28.120Z","updated":"2021-02-16T12:50:28.120Z","comments":true,"path":"aboutme/index.html","permalink":"https://brynhild.online/aboutme/index.html","excerpt":"","text":"InfoBasic Contact骑行exOIerEducationGameEmail: eternalkiri@outlook.comFaceBook: Ellias K StuartTwitter: @novaELLIASWeChat: ElliasKQQ: 3218673140菜腿. 目前最爱的路线为大连滨海路及高新园区旅顺中路 前黄线一带.Garmin: ELLIAS Zwift: Ellias Stuart 行者: Kishin ELLIAS 座驾 于 2017 年加入 YMOI, 在 NOIp2018 中获得一等奖并退役.详见: ELLIAS的OI之路 YMOI圣地巡礼@2020-08-28信息与通信工程本科在读. 音游类 Deemo: 只追求FC的咸鱼, 最高FC等级11级.Cytus2: 只追求MM的咸鱼, TP日常崩溃, 最高MM等级14级.Arcaea: 较为久远, 无法追溯.Malody(KeyMode): 要准度没准度, 要难度没难度, 苟过 regular6 立即退坑, 最佳排名 rank97. 段位图 节奏大师 兰空VOEZ 等: 没啥好说的. Minecraft: Mojang 账号 ElliasK. 生存/建筑内饰向. ShadowFight 2&amp;3 我吹爆. Euro Track Simulator2 CitySkyline Besiege … Music网易云歌单KishinELLIAS Online Player (Refresh if not shown): GitHub stats"},{"title":"archives","date":"2020-03-09T11:24:37.000Z","updated":"2020-03-09T11:24:37.942Z","comments":true,"path":"archives/index-1.html","permalink":"https://brynhild.online/archives/index-1.html","excerpt":"","text":""},{"title":"categories","date":"2020-09-01T08:30:58.410Z","updated":"2019-06-05T11:25:35.240Z","comments":true,"path":"categories/index.html","permalink":"https://brynhild.online/categories/index.html","excerpt":"","text":""},{"title":"History of NextDream","date":"2017-10-12T16:00:00.000Z","updated":"2020-09-07T14:37:17.843Z","comments":true,"path":"bloghistory/index.html","permalink":"https://brynhild.online/bloghistory/index.html","excerpt":"","text":"注意: 下文提到的版本号为开发时的内部版本号 与 GitHub 仓库中的 Release 版本号无法一一对应. 2020-09-07 v3.1.0 结束基于 volantis 主题的更新. 2020-09-01 v3.0.0 alpha 使用 volantis 主题, 开始进行持续更新. 制作并使用新像素风格魔法师个设作为网站图标和看板娘. 警告: 这个图像受到版权保护. 2019-03-16 v2.2.0 完成基于 material-x 特性的功能更新, 由 v2.1.72 更新至 v2.2.0. 2019-01-05 v2.1.53 alpha 在进行功能更新时发生整体性崩溃, 开始重构. 2018-12-21 v2.1.0 引入 live2d 看板娘 z16. 使用自定义图标 favicon_KK. 2018-11-03 v2.0.0 改用 material-x 主题, 完成基本样式迁移. 2018-10-13 v1.2.0 庆祝博客一周年.新增 HiddenList 页面, 集成周边页面 地獄通信 2018-06-08 v1.1.0 结束了持续三个月的连续更新, 由 v1.0.13 alpha 更新至 v1.1.0. 重要的更新内容 启用 valine 评论系统.启用卜蒜子统计.启用字数统计.背景 导航栏 鼠标样式 footer等方面的美工优化使用 WordPress 托管全站全部静态图像 2018-03-05 v1.0.1 alpha 开始在 NexT 主题的基础上更新博客功能. 2017-12-05 v1.0.0 开始进行 OI 方面写作, 首次上传模板 最短路模板. 2017-11-13 v1.0.0 基于 Hexo 框架, 使用 NexT 主题, 新站点正式建成并命名为 Next Dream.托管于 GitHub, 使用二级域名 novaellias.github.io.同时发布第一篇文章 HEXO博客的基本搭建. 2017-10-13 v0.0.0 作为洛谷账号的附属品, Ellias的洛谷博客 正式上线."},{"title":"","date":"2020-09-04T09:21:51.129Z","updated":"2020-09-04T09:21:51.129Z","comments":true,"path":"gallerypage/index.html","permalink":"https://brynhild.online/gallerypage/index.html","excerpt":"","text":""},{"title":"Donate","date":"2020-09-07T07:21:37.618Z","updated":"2020-09-07T07:21:37.618Z","comments":true,"path":"donatepage/index.html","permalink":"https://brynhild.online/donatepage/index.html","excerpt":"","text":"DonateThank you!"},{"title":"Friends","date":"2020-09-03T04:10:29.842Z","updated":"2020-08-07T05:38:45.475Z","comments":true,"path":"friends/index.html","permalink":"https://brynhild.online/friends/index.html","excerpt":"","text":""},{"title":"HiddenList","date":"2018-10-12T16:00:00.000Z","updated":"2020-09-03T14:41:13.587Z","comments":true,"path":"hiddenlist/index-p.html","permalink":"https://brynhild.online/hiddenlist/index-p.html","excerpt":"Welcome to Hiddel List!!","text":"Welcome to Hiddel List!!"},{"title":"HiddenList","date":"2018-10-12T16:00:00.000Z","updated":"2020-09-07T07:16:47.935Z","comments":true,"path":"hiddenlist/index.html","permalink":"https://brynhild.online/hiddenlist/index.html","excerpt":"","text":"Music RoomArcaeaupd till 2.2.0 Toolselement元素周期表 calculator在线计算器 Entertainment2048 Pac Man Tetris 3D3D俄罗斯方块 Minesweeper pri初级扫雷(样式初级) Minesweeper adv仿 Windows 样式的扫雷 Sudoku数独 地獄通信地獄通信 full-time地狱通信(全时可以访问) 地獄通信 night地狱通信(夜间可以访问) 地獄通信地狱通信(只有0000-0001可以访问) にっこにっこにーNICO LOOPER循环播放 にっこにっこにー"},{"title":"tags","date":"2020-09-01T08:30:58.425Z","updated":"2019-06-05T11:26:48.096Z","comments":true,"path":"tags/index.html","permalink":"https://brynhild.online/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-09-02T13:52:59.361Z","updated":"2020-09-02T13:52:59.361Z","comments":true,"path":"webboard/index.html","permalink":"https://brynhild.online/webboard/index.html","excerpt":"","text":""},{"title":"","date":"2021-05-03T16:05:45.547Z","updated":"2021-05-03T16:05:45.547Z","comments":true,"path":"BeijingBikestores/location/index.html","permalink":"https://brynhild.online/BeijingBikestores/location/index.html","excerpt":"","text":"BeijingBikestores Location * { margin: 0; padding: 0; box-sizing: border-box; } html, body, div.pyg2plot-plot-container { height: 100%; overflow: hidden; } var plot_89bf9217efa3462896681896f5f9d0c8 = new G2Plot.Pie(\"89bf9217efa3462896681896f5f9d0c8\", { \"appendPadding\": 10, \"data\": [ { \"type\": \"\\u95e8\\u5934\\u6c9f\\u533a\", \"value\": 1 }, { \"type\": \"\\u5ef6\\u5e86\\u533a\", \"value\": 4 }, { \"type\": \"\\u6000\\u67d4\\u533a\", \"value\": 5 }, { \"type\": \"\\u5bc6\\u4e91\\u533a\", \"value\": 6 }, { \"type\": \"\\u4e1c\\u57ce\\u533a\", \"value\": 7 }, { \"type\": \"\\u5e73\\u8c37\\u533a\", \"value\": 7 }, { \"type\": \"\\u77f3\\u666f\\u5c71\\u533a\", \"value\": 10 }, { \"type\": \"\\u987a\\u4e49\\u533a\", \"value\": 14 }, { \"type\": \"\\u5927\\u5174\\u533a\", \"value\": 15 }, { \"type\": \"\\u897f\\u57ce\\u533a\", \"value\": 15 }, { \"type\": \"\\u4e30\\u53f0\\u533a\", \"value\": 20 }, { \"type\": \"\\u623f\\u5c71\\u533a\", \"value\": 24 }, { \"type\": \"\\u6d77\\u6dc0\\u533a\", \"value\": 27 }, { \"type\": \"\\u901a\\u5dde\\u533a\", \"value\": 28 }, { \"type\": \"\\u660c\\u5e73\\u533a\", \"value\": 30 }, { \"type\": \"\\u671d\\u9633\\u533a\", \"value\": 45 } ], \"angleField\": \"value\", \"colorField\": \"type\", \"radius\": 0.75, \"label\": { \"type\": \"spider\", \"labelHeight\": 28, \"content\": \"{name}\\n{percentage}\" }, \"interactions\": [ { \"type\": \"element-active\" } ] }); plot_89bf9217efa3462896681896f5f9d0c8.render();"},{"title":"","date":"2021-05-03T16:05:41.808Z","updated":"2021-05-03T16:05:41.808Z","comments":true,"path":"BeijingBikestores/brand/index.html","permalink":"https://brynhild.online/BeijingBikestores/brand/index.html","excerpt":"","text":"BeijingBikestores band * { margin: 0; padding: 0; box-sizing: border-box; } html, body, div.pyg2plot-plot-container { height: 100%; overflow: hidden; } var plot_2e0eabe8cfd74e458507ffa2e3e06fe3 = new G2Plot.Pie(\"2e0eabe8cfd74e458507ffa2e3e06fe3\", { \"appendPadding\": 10, \"data\": [ { \"type\": \"\\u5f69\\u8679\\u886b\", \"value\": 1 }, { \"type\": \"\\u95ea\\u7535\", \"value\": 7 }, { \"type\": \"\\u6c38\\u4e45\", \"value\": 8 }, { \"type\": \"\\u5d14\\u514b\", \"value\": 11 }, { \"type\": \"\\u98de\\u9e3d\", \"value\": 11 }, { \"type\": \"\\u5927\\u884c\", \"value\": 14 }, { \"type\": \"\\u7f8e\\u5229\\u8fbe\", \"value\": 35 }, { \"type\": \"\\u6377\\u5b89\\u7279\", \"value\": 61 }, { \"type\": \"\\u5176\\u4ed6\", \"value\": 110 } ], \"angleField\": \"value\", \"colorField\": \"type\", \"radius\": 0.75, \"label\": { \"type\": \"spider\", \"labelHeight\": 28, \"content\": \"{name}\\n{percentage}\" }, \"interactions\": [ { \"type\": \"element-active\" } ] }); plot_2e0eabe8cfd74e458507ffa2e3e06fe3.render();"},{"title":"","date":"2020-09-06T13:43:04.712Z","updated":"2020-09-06T13:37:44.456Z","comments":true,"path":"aboutme/css/solid.css","permalink":"https://brynhild.online/aboutme/css/solid.css","excerpt":"","text":"/*! * Font Awesome Free 5.3.1 by @fontawesome - https://fontawesome.com * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) */ @font-face { font-family: \"Font Awesome 5 Free\"; font-style: normal; font-weight: 900; src: url(../webfonts/fa-solid-900.eot); src: url(../webfonts/fa-solid-900.eot?#iefix) format(\"embedded-opentype\"), url(../webfonts/fa-solid-900.woff2) format(\"woff2\"), url(../webfonts/fa-solid-900.woff) format(\"woff\"), url(../webfonts/fa-solid-900.ttf) format(\"truetype\"), url(../webfonts/fa-solid-900.svg#fontawesome) format(\"svg\") } .fa, .fas { font-family: \"Font Awesome 5 Free\"; font-weight: 900 }"},{"title":"","date":"2020-09-06T13:49:00.705Z","updated":"2020-09-06T13:49:00.705Z","comments":true,"path":"aboutme/css/style.css","permalink":"https://brynhild.online/aboutme/css/style.css","excerpt":"","text":"*:focus { outline: none; } body { font-family: Helvetica, Arial; margin: 0; background-color: #ffeff5; } #dowebok { position: absolute; top: 50%; right: 0; left: 0; width: 430px; height: 100px; margin: -4px auto; } /* #bg-artwork { position: fixed; top: -30px; right: -30px; bottom: -30px; left: -30px; background-image: url(../images/1.jpg); background-repeat: no-repeat; background-size: cover; background-position: 50%; filter: blur(40px); -webkit-filter: blur(40px); z-index: 1; } #bg-layer { position: fixed; top: 0; right: 0; bottom: 0; left: 0; background-color: #fff; opacity: 0.51; z-index: 2; } */ #player { position: relative; height: 100%; z-index: 3; } #player-track { position: absolute; top: 0; right: 15px; left: 15px; padding: 13px 22px 10px 184px; background-color: #fff7f7; border-radius: 15px 15px 0 0; transition: 0.3s ease top; z-index: 1; } #player-track.active { top: -92px; } #album-name { color: #54576f; font-size: 17px; font-weight: bold; } #track-name { color: #acaebd; font-size: 13px; margin: 2px 0 13px 0; } #track-time { height: 12px; margin-bottom: 3px; overflow: hidden; } #current-time { float: left; } #track-length { float: right; } #current-time, #track-length { color: transparent; font-size: 11px; background-color: #ffe8ee; border-radius: 10px; transition: 0.3s ease all; } #track-time.active #current-time, #track-time.active #track-length { color: #f86d92; background-color: transparent; } #s-area, #seek-bar { position: relative; height: 4px; border-radius: 4px; } #s-area { background-color: #ffe8ee; cursor: pointer; } #ins-time { position: absolute; top: -29px; color: #fff; font-size: 12px; white-space: pre; padding: 5px 6px; border-radius: 4px; display: none; } #s-hover { position: absolute; top: 0; bottom: 0; left: 0; opacity: 0.2; z-index: 2; } #ins-time, #s-hover { background-color: #3b3d50; } #seek-bar { content: ''; position: absolute; top: 0; bottom: 0; left: 0; width: 0; background-color: #fd6d94; transition: 0.2s ease width; z-index: 1; } #player-content { position: relative; height: 100%; background-color: #fff; box-shadow: 0 30px 80px #656565; border-radius: 15px; z-index: 2; } #album-art { position: absolute; top: -40px; width: 115px; height: 115px; margin-left: 40px; -webkit-transform: rotateZ(0); transform: rotateZ(0); transition: 0.3s ease all; box-shadow: 0 0 0 10px #fff; border-radius: 50%; overflow: hidden; } #album-art.active { top: -60px; box-shadow: 0 0 0 4px #fff7f7, 0 30px 50px -15px #afb7c1; } #album-art:before { content: ''; position: absolute; top: 50%; right: 0; left: 0; width: 20px; height: 20px; margin: -10px auto 0 auto; background-color: #d6dee7; border-radius: 50%; box-shadow: inset 0 0 0 2px #fff; z-index: 2; } #album-art img { display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; z-index: -1; } #album-art img.active { opacity: 1; z-index: 1; } #album-art.active img.active { z-index: 1; -webkit-animation: rotateAlbumArt 3s linear 0s infinite forwards; animation: rotateAlbumArt 3s linear 0s infinite forwards; } @-webkit-keyframes rotateAlbumArt { 0% { -webkit-transform: rotateZ(0); transform: rotateZ(0); } 100% { -webkit-transform: rotateZ(360deg); transform: rotateZ(360deg); } } @keyframes rotateAlbumArt { 0% { -webkit-transform: rotateZ(0); transform: rotateZ(0); } 100% { -webkit-transform: rotateZ(360deg); transform: rotateZ(360deg); } } #buffer-box { position: absolute; top: 50%; right: 0; left: 0; height: 13px; color: #1f1f1f; font-size: 13px; font-family: Helvetica; text-align: center; font-weight: bold; line-height: 1; padding: 6px; margin: -12px auto 0 auto; background-color: rgba(255, 255, 255, 0.19); opacity: 0; z-index: 2; } #album-art img, #buffer-box { transition: 0.1s linear all; } #album-art.buffering img { opacity: 0.25; } #album-art.buffering img.active { opacity: 0.8; filter: blur(2px); -webkit-filter: blur(2px); } #album-art.buffering #buffer-box { opacity: 1; } #player-controls { width: 250px; height: 100%; margin: 0 5px 0 141px; float: right; overflow: hidden; } .control { width: 33.333%; float: left; padding: 12px 0; } .button { width: 26px; height: 26px; padding: 25px; background-color: #fff; border-radius: 6px; cursor: pointer; } .button i { display: block; color: #d6dee7; font-size: 26px; text-align: center; line-height: 1; } .button, .button i { transition: 0.2s ease all; } .button:hover { background-color: #d6d6de; } .button:hover i { color: #fff; } #follow-me-link { top: 10px; font-size: 13px; padding: 5px 7px; background-color: #f86d92; border-radius: 2px; } #share-link { top: 45px; width: 16px; height: 16px; padding: 10px; font-size: 16px; background-color: #7dca24; border-radius: 50%; } #follow-me-link, #share-link { position: fixed; right: 10px; color: #fff; text-align: center; text-decoration: none; z-index: 125; }"},{"title":"","date":"2020-09-06T13:47:44.523Z","updated":"2020-09-06T13:47:44.523Z","comments":true,"path":"aboutme/js/index.js","permalink":"https://brynhild.online/aboutme/js/index.js","excerpt":"","text":"$(function () { var playerTrack = $(\"#player-track\"), bgArtwork = $('#bg-artwork'), bgArtworkUrl, albumName = $('#album-name'), trackName = $('#track-name'), albumArt = $('#album-art'), sArea = $('#s-area'), seekBar = $('#seek-bar'), trackTime = $('#track-time'), insTime = $('#ins-time'), sHover = $('#s-hover'), playPauseButton = $(\"#play-pause-button\"), i = playPauseButton.find('i'), tProgress = $('#current-time'), tTime = $('#track-length'), seekT, seekLoc, seekBarPos, cM, ctMinutes, ctSeconds, curMinutes, curSeconds, durMinutes, durSeconds, playProgress, bTime, nTime = 0, buffInterval = null, tFlag = false, albums = ['Dawn', 'Me & You', 'Electro Boy', 'Home', 'Proxy (Original Mix)'], trackNames = ['Skylike - Dawn', 'Alex Skrindo - Me & You', 'Kaaze - Electro Boy', 'Jordan Schor - Home', 'Martin Garrix - Proxy'], albumArtworks = ['_1', '_2', '_3', '_4', '_5'], trackUrl = ['images/2.mp3', 'images/1.mp3', 'images/3.mp3', 'images/4.mp3', 'images/5.mp3'], playPreviousTrackButton = $('#play-previous'), playNextTrackButton = $('#play-next'), currIndex = -1; function playPause() { setTimeout(function () { if (audio.paused) { playerTrack.addClass('active'); albumArt.addClass('active'); checkBuffering(); i.attr('class', 'fas fa-pause'); audio.play(); } else { playerTrack.removeClass('active'); albumArt.removeClass('active'); clearInterval(buffInterval); albumArt.removeClass('buffering'); i.attr('class', 'fas fa-play'); audio.pause(); } }, 300); } function showHover(event) { seekBarPos = sArea.offset(); seekT = event.clientX - seekBarPos.left; seekLoc = audio.duration * (seekT / sArea.outerWidth()); sHover.width(seekT); cM = seekLoc / 60; ctMinutes = Math.floor(cM); ctSeconds = Math.floor(seekLoc - ctMinutes * 60); if ((ctMinutes < 0) || (ctSeconds < 0)) return; if ((ctMinutes < 0) || (ctSeconds < 0)) return; if (ctMinutes < 10) ctMinutes = '0' + ctMinutes; if (ctSeconds < 10) ctSeconds = '0' + ctSeconds; if (isNaN(ctMinutes) || isNaN(ctSeconds)) insTime.text('--:--'); else insTime.text(ctMinutes + ':' + ctSeconds); insTime.css({ 'left': seekT, 'margin-left': '-21px' }).fadeIn(0); } function hideHover() { sHover.width(0); insTime.text('00:00').css({ 'left': '0px', 'margin-left': '0px' }).fadeOut(0); } function playFromClickedPos() { audio.currentTime = seekLoc; seekBar.width(seekT); hideHover(); } function updateCurrTime() { nTime = new Date(); nTime = nTime.getTime(); if (!tFlag) { tFlag = true; trackTime.addClass('active'); } curMinutes = Math.floor(audio.currentTime / 60); curSeconds = Math.floor(audio.currentTime - curMinutes * 60); durMinutes = Math.floor(audio.duration / 60); durSeconds = Math.floor(audio.duration - durMinutes * 60); playProgress = (audio.currentTime / audio.duration) * 100; if (curMinutes < 10) curMinutes = '0' + curMinutes; if (curSeconds < 10) curSeconds = '0' + curSeconds; if (durMinutes < 10) durMinutes = '0' + durMinutes; if (durSeconds < 10) durSeconds = '0' + durSeconds; if (isNaN(curMinutes) || isNaN(curSeconds)) tProgress.text('00:00'); else tProgress.text(curMinutes + ':' + curSeconds); if (isNaN(durMinutes) || isNaN(durSeconds)) tTime.text('00:00'); else tTime.text(durMinutes + ':' + durSeconds); if (isNaN(curMinutes) || isNaN(curSeconds) || isNaN(durMinutes) || isNaN(durSeconds)) trackTime.removeClass('active'); else trackTime.addClass('active'); seekBar.width(playProgress + '%'); if (playProgress == 100) { i.attr('class', 'fa fa-play'); seekBar.width(0); tProgress.text('00:00'); albumArt.removeClass('buffering').removeClass('active'); clearInterval(buffInterval); } } function checkBuffering() { clearInterval(buffInterval); buffInterval = setInterval(function () { if ((nTime == 0) || (bTime - nTime) > 1000) albumArt.addClass('buffering'); else albumArt.removeClass('buffering'); bTime = new Date(); bTime = bTime.getTime(); }, 100); } function selectTrack2(flag) { /* * 歌单详细见 * https://api.uomg.com/doc-rand.music.html */ $.getJSON('https://api.uomg.com/api/rand.music?', { mid: '2073931039' ,format: 'json' }, function(json, textStatus) { if (json.code == 1) { if (flag == 0) i.attr('class', 'fa fa-play'); else { albumArt.removeClass('buffering'); i.attr('class', 'fa fa-pause'); } seekBar.width(0); trackTime.removeClass('active'); tProgress.text('00:00'); tTime.text('00:00'); currAlbum = json.data.artistsname; currTrackName = json.data.name; currArtwork = json.data.picurl; audio.src = json.data.url; nTime = 0; bTime = new Date(); bTime = bTime.getTime(); if (flag != 0) { audio.play(); playerTrack.addClass('active'); albumArt.addClass('active'); clearInterval(buffInterval); checkBuffering(); } albumName.text(currAlbum); trackName.text(currTrackName); albumArt.find('img.active').removeClass('active'); $('#album-pic').addClass('active'); $('#album-pic').attr('src',currArtwork); bgArtwork.css({ 'background-image': 'url(' + currArtwork + ')' }); } }); } function initPlayer() { audio = new Audio(); selectTrack2(0); audio.loop = false; playPauseButton.on('click', playPause); sArea.mousemove(function (event) { showHover(event); }); sArea.mouseout(hideHover); sArea.on('click', playFromClickedPos); $(audio).on('timeupdate', updateCurrTime); playPreviousTrackButton.on('click', function () { selectTrack2(-1); }); playNextTrackButton.on('click', function () { selectTrack2(1); }); } initPlayer(); });"},{"title":"","date":"2020-09-01T08:30:58.423Z","updated":"2020-03-11T11:39:36.367Z","comments":true,"path":"jigokutsushin/full/index.html","permalink":"https://brynhild.online/jigokutsushin/full/index.html","excerpt":"","text":"地獄通信 Not Found あなたの怨み、晴らします。 この怨み、地狱へ流します！"},{"title":"","date":"2020-09-01T08:30:58.424Z","updated":"2020-03-12T02:17:10.349Z","comments":true,"path":"jigokutsushin/mid/index.html","permalink":"https://brynhild.online/jigokutsushin/mid/index.html","excerpt":"","text":"地獄通信 Not Found あなたの怨み、晴らします。 この怨み、地狱へ流します！"},{"title":"","date":"2020-09-01T08:30:58.424Z","updated":"2020-03-11T11:40:28.902Z","comments":true,"path":"jigokutsushin/night/index.html","permalink":"https://brynhild.online/jigokutsushin/night/index.html","excerpt":"","text":"地獄通信 Not Found あなたの怨み、晴らします。 この怨み、地狱へ流します！"},{"title":"","date":"2021-05-03T16:00:23.904Z","updated":"2020-03-21T11:42:26.581Z","comments":true,"path":"tools/2048/index.html","permalink":"https://brynhild.online/tools/2048/index.html","excerpt":"","text":"2048 2048 Welcome! BEST: 0 SCORE: 0 GAME OVERRETRY RESTART"},{"title":"NICO LOOPER","date":"2018-12-11T02:08:23.000Z","updated":"2020-03-12T02:17:41.251Z","comments":true,"path":"tools/niconi/index.html","permalink":"https://brynhild.online/tools/niconi/index.html","excerpt":"","text":"window.onload = function () { var local1 = document.getElementById('videoID'); local1.autoplay = true; local1.loop = true; local1.muted = false; if (local1.paused) { local1.play(); } else { local1.pause(); } }"},{"title":"","date":"2020-09-01T08:30:58.433Z","updated":"2020-03-13T02:47:04.041Z","comments":true,"path":"tools/pac-man/index.html","permalink":"https://brynhild.online/tools/pac-man/index.html","excerpt":"","text":"Pac-Man body { background-color: #292929 } * { padding: 0; margin: 0; } .wrapper { width: 960px; margin: 0 auto; line-height: 36px; text-align: center; color: #999; } canvas { display: block; background: #000; } .mod-botton { height: 32px; padding: 15px 0; text-align: center; } unavailable. Press [space] or [enter] to pause or continue."},{"title":"","date":"2020-10-01T16:19:11.830Z","updated":"2020-03-29T14:31:13.685Z","comments":true,"path":"tools/sudoku/index.html","permalink":"https://brynhild.online/tools/sudoku/index.html","excerpt":"","text":"Sudoku SUBMIT RESET RETRY var sd = new SD; sd.init(30);"},{"title":"","date":"2020-09-03T07:51:01.766Z","updated":"2020-03-13T11:39:26.258Z","comments":true,"path":"tools/calc/calc-adv1/index.html","permalink":"https://brynhild.online/tools/calc/calc-adv1/index.html","excerpt":"","text":"CALCULATOR body { background: linear-gradient(to right, #85D8CE, #085078); } #app { font-family: 'Avenir', Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; display: flex; flex-wrap: wrap; justify-content: center; align-item: center; } .calculator { width: 440px; padding: 20px; border-radius: 5px; margin: 20px auto; font-size: 16px; background-color: #333333; } .input { width: 420px; height: 50px; border-radius: 0px; border: 1px solid black; background-color: #333333; color: #d9d9d9; padding: 0 5px 0 5px; margin: 0 0px 10px 0px; font-size: 30px; } .input:focus, .input:active { border-color: #03a9f4; box-shadow: 0 0 4px #03A9F4; outline: none 0; } .button { margin: 3px; width: 63px; border: 1px solid #0d0d0d; height: 30px; border-radius: 4px; color: #d9d9d9; background-color: #1a1a1a; cursor: pointer; outline: none; } .mode { display: flex; flex-wrap: wrap; justify-content: space-evenly; } .equal-sign { background-color: green; width: 133px; } .toggle-button { border: none; background-color: #333333; cursor: pointer; outline: none; font-size: 1rem; color: #fff; text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.35); } p { margin-top: 0; } button::-moz-focus-inner { border-color: transparent; } Show Advanced Mode ⚈ Show Basic Mode ⚆ 7 8 9 *"},{"title":"Tetris 3D","date":"2019-07-06T15:20:12.000Z","updated":"2020-03-13T15:42:41.868Z","comments":true,"path":"tools/tetris/tetris3d/index.html","permalink":"https://brynhild.online/tools/tetris/tetris3d/index.html","excerpt":"","text":"Tetris 3D #container{margin:0 auto;text-align:center;} .cyr{text-align:center;} Loading game... How to play Use the arrow keys to guide the falling blocks, spacebar and the up-arrow will rotate the block in opposite directions. Alternatively the keys A,W,S and D can be used as arrow keys for the same purpose. When a complete horizontal ring of 15 blocks is occupied by pieces the row will collapse and earn 100 points. If multiple rows are cleared at a time you will earn bonus points. \"A circle may be small, yet it may be as mathematically beautiful and perfect as a large one.\" - Isaac Disraeli Traditional Time Attack Garbage Traditional 1. Empty (0) 2. Empty (0) 3. Empty (0) Time Attack 1. Empty (0) 2. Empty (0) 3. Empty (0) Garbage 1. Empty (59:59) 2. Empty (59:59) 3. Empty (59:59) Skin: Glass Show ghost 0 0:00 You have achieved a high score, please enter your name:"},{"title":"","date":"2020-09-01T08:30:58.432Z","updated":"2020-03-16T05:53:57.113Z","comments":true,"path":"tools/minesweeper/minesweeper-pri/index.html","permalink":"https://brynhild.online/tools/minesweeper/minesweeper-pri/index.html","excerpt":"","text":"Minesweeper #bar { text-align: center; margin-bottom: 20px; } .bar { height: 25px; width: 150px; line-height: 25px; display: inline-block; border: solid 1px #000; margin-left: 20px; margin-right: 20px; } #grid { margin: auto; } .blocks { width: 30px; height: 30px; line-height: 30px; display: block; text-align: center; border: solid 1px #000; user-select: none; cursor: pointer; } .blocks:hover { background: #0af; } Left: 0 Time: 0s var row = 10; var col = 10; var maxCount = 10; var isFirstOpen = true; var grid = init_grid(); var count = document.getElementById('count'); var time = document.getElementById('time'); count.innerHTML = maxCount; var timer = setInterval(function () { let seconds = (parseFloat(time.innerHTML) + 0.1).toFixed(1); time.innerHTML = seconds; }, 100) function init_grid() { let gridHtml = ''; for (let i = 0; i < row; i++) { gridHtml += '' for (let j = 0; j < col; j++) { gridHtml += ''; } gridHtml += '' } document.getElementById('grid').innerHTML = gridHtml; let blocks = document.getElementsByClassName('blocks'); let grid = new Array(); for (let i = 0; i < blocks.length; i++) { if (i % col === 0) { grid.push(new Array()); } blocks[i].count = 0; grid[parseInt(i / col)].push(blocks[i]); } return grid; } function block_click(_i, _j, e) { if (grid[_i][_j].isOpen) { return; } if (e.button === 0) { if (isFirstOpen) { isFirstOpen = false; let count = 0; while (count < maxCount) { let ri = Math.floor(Math.random() * row); let rj = Math.floor(Math.random() * col); if (!(ri === _i && rj === _j) && !grid[ri][rj].isMine) { grid[ri][rj].isMine = true; count++; for (let i = ri - 1; i < ri + 2; i++) { for (let j = rj - 1; j < rj + 2; j++) { if (i > -1 && j > -1 && i < row && j < col) { grid[i][j].count++; } } } } } } block_open(_i, _j); function block_open(_i, _j) { let block = grid[_i][_j]; op(block); function op(block) { block.isOpen = true; block.style.background = '#ccc'; block.style.cursor = 'default'; } if (block.isMine) { block.innerHTML = '雷'; for (let i = 0; i < row; i++) { for (let j = 0; j < col; j++) { block = grid[i][j]; if (!block.isOpen && block.isMine) { op(block); block.innerHTML = '雷'; } } } clearInterval(timer); alert(\"GAME OVER\"); } else if (block.count === 0) { for (let i = _i - 1; i < _i + 2; i++) { for (let j = _j - 1; j < _j + 2; j++) { if (i > -1 && j > -1 && i < row && j < col && !grid[i][j].isOpen && !grid[i][j] .ismine) { block_open(i, j); } } } } else { block.innerHTML = block.count; } } } else if (e.button === 2) { let block = grid[_i][_j]; if (block.innerHTML !== '▲') { count.innerHTML = parseInt(count.innerHTML) - 1; block.innerHTML = '▲'; } else { block.innerHTML = ''; count.innerHTML = parseInt(count.innerHTML) + 1; } } for (let i = 0; i < row; i++) { for (let j = 0; j < col; j++) { if (!grid[i][j].isMine && !grid[i][j].isOpen) { return; } } } clearInterval(timer); alert(\"YOU WIN!\"); }"},{"title":"","date":"2020-09-01T08:30:58.432Z","updated":"2020-03-16T06:10:47.787Z","comments":true,"path":"tools/minesweeper/minesweeper-adv/index.html","permalink":"https://brynhild.online/tools/minesweeper/minesweeper-adv/index.html","excerpt":"","text":"Minesweeper Minesweeper Setting Easy Normal Hard Lunatic custome var mine1; window.onload = function () { document.getElementsByClassName('mine-wrap')[0].style.display = \"block\"; mine1 = new Mine(\"mine1\", 'face', 30, 16, 99, \"game-tag-images\", \"game-time-images\"); mine1.init(); var inputEle = document.getElementsByTagName('input'); for (var i = 0; i < inputEle.length; i++) { inputEle[i].onclick = function () { var width, height, minenum; if (this.value == 0) { width = 9; height = 9; minenum = 10; } else if (this.value == 1) { width = 16; height = 16; minenum = 40; } else if (this.value == 2) { width = 30; height = 16; minenum = 99; } else if (this.value == 4) { width = 30; height = 24; minenum = 160; } else if (this.value == 3) { width = prompt(\"line: (9-30)\"); height = width && prompt(\"row: (9-24)\"); minenum = height && prompt(\"boom: (10-200)\"); if (!(width && height && minenum)) { return; } if (width < 9) { width = 9; } if (width > 30) { width = 30; } if (height < 9) { height = 9; } if (height > 24) { height = 24; } if (minenum < 10) { minenum = 10; } if (minenum > 200) { minenum = 200; } if (minenum > height * width) { minenum = 10; } } mine1.paneheight = height; mine1.panewidth = width; mine1.minenum = minenum; mine1.init(); document.getElementsByClassName(\"mine-wrap\")[0].style.width = width * mine1.PANE_SIZE + 25 + \"px\"; } }; }"},{"title":"","date":"2020-09-01T08:30:58.432Z","updated":"2020-03-16T06:10:41.264Z","comments":true,"path":"tools/minesweeper/minesweeper-adv/test.html","permalink":"https://brynhild.online/tools/minesweeper/minesweeper-adv/test.html","excerpt":"","text":"Minesweeper Minesweeper Setting Easy Normal Hard Lunatic custome var mine1; window.onload = function () { document.getElementsByClassName('mine-wrap')[0].style.display = \"block\"; mine1 = new Mine(\"mine1\", 'face', 30, 16, 99, \"game-tag-images\", \"game-time-images\"); mine1.init(); var inputEle = document.getElementsByTagName('input'); for (var i = 0; i < inputEle.length; i++) { inputEle[i].onclick = function () { var width, height, minenum; if (this.value == 0) { width = 9; height = 9; minenum = 10; } else if (this.value == 1) { width = 16; height = 16; minenum = 40; } else if (this.value == 2) { width = 30; height = 16; minenum = 99; } else if (this.value == 3) { width = 30; height = 24; minenum = 160; } else if (this.value == 4) { width = prompt(\"line: (9-30)\"); height = width && prompt(\"row: (9-24)\"); minenum = height && prompt(\"mine: (10-200)\"); if (!(width && height && minenum)) { return; } if (width < 9) { width = 9; } if (width > 30) { width = 30; } if (height < 9) { height = 9; } if (height > 24) { height = 24; } if (minenum < 10) { minenum = 10; } if (minenum > 200) { minenum = 200; } if (minenum > height * width) { minenum = 10; } } mine1.paneheight = height; mine1.panewidth = width; mine1.minenum = minenum; mine1.init(); document.getElementsByClassName(\"mine-wrap\")[0].style.width = width * mine1.PANE_SIZE + 25 + \"px\"; } }; }"},{"title":"","date":"2020-09-06T13:55:23.162Z","updated":"2020-02-17T08:15:02.160Z","comments":true,"path":"tools/element/index.html","permalink":"https://brynhild.online/tools/element/index.html","excerpt":"","text":"Elements html, body { height: 100%; } body { background-color: #000000; margin: 0; font-family: Helvetica, sans-serif; ; overflow: hidden; } a { color: #ffffff; } #info { position: absolute; width: 100%; color: #ffffff; padding: 5px; font-family: Monospace; font-size: 13px; font-weight: bold; text-align: center; z-index: 1; } #menu { position: absolute; bottom: 20px; width: 100%; text-align: center; font-family: verdana, Tahoma, Arial, Hei, \"Microsoft Yahei\", SimHei; } .element { width: 120px; height: 160px; box-shadow: 0px 0px 12px rgba(0, 255, 255, 0.5); border: 1px solid rgba(127, 255, 255, 0.25); text-align: center; cursor: default; } .element:hover { box-shadow: 0px 0px 12px rgba(0, 255, 255, 0.75); border: 1px solid rgba(127, 255, 255, 0.75); } .element .number { position: absolute; top: 20px; right: 20px; font-size: 12px; color: rgba(127, 255, 255, 0.75); } .element .symbol { position: absolute; top: 40px; left: 0px; right: 0px; font-size: 60px; font-weight: bold; color: rgba(255, 255, 255, 0.75); text-shadow: 0 0 10px rgba(0, 255, 255, 0.95); } .element .details { position: absolute; bottom: 15px; left: 0px; right: 0px; font-size: 12px; color: rgba(127, 255, 255, 0.75); } button { color: rgba(127, 255, 255, 0.75); background: transparent; outline: 1px solid rgba(127, 255, 255, 0.75); border: 0px; padding: 5px 10px; cursor: pointer; } button:hover { background-color: rgba(0, 255, 255, 0.5); } button:active { color: #000000; background-color: rgba(0, 255, 255, 0.75); } TABLE SPHERE HELIX GRID var table = [ \"H\", \"Hydrogen\", \"1.00794\", 1, 1, \"He\", \"Helium\", \"4.002602\", 18, 1, \"Li\", \"Lithium\", \"#6.941\", 1, 2, \"Be\", \"Beryllium\", \"9.012182\", 2, 2, \"B\", \"Boron\", \"#10.811\", 13, 2, \"C\", \"Carbon\", \"#12.0107\", 14, 2, \"N\", \"Nitrogen\", \"#14.0067\", 15, 2, \"O\", \"Oxygen\", \"#15.9994\", 16, 2, \"F\", \"Fluorine\", \"18.9984032\", 17, 2, \"Ne\", \"Neon\", \"#20.1797\", 18, 2, \"Na\", \"Sodium\", \"22.98976...\", 1, 3, \"Mg\", \"Magnesium\", \"#24.305\", 2, 3, \"Al\", \"Aluminium\", \"26.9815386\", 13, 3, \"Si\", \"Silicon\", \"#28.0855\", 14, 3, \"P\", \"Phosphorus\", \"30.973762\", 15, 3, \"S\", \"Sulfur\", \"#32.065\", 16, 3, \"Cl\", \"Chlorine\", \"#35.453\", 17, 3, \"Ar\", \"Argon\", \"#39.948\", 18, 3, \"K\", \"Potassium\", \"#39.948\", 1, 4, \"Ca\", \"Calcium\", \"#40.078\", 2, 4, \"Sc\", \"Scandium\", \"44.955912\", 3, 4, \"Ti\", \"Titanium\", \"#47.867\", 4, 4, \"V\", \"Vanadium\", \"#50.9415\", 5, 4, \"Cr\", \"Chromium\", \"#51.9961\", 6, 4, \"Mn\", \"Manganese\", \"54.938045\", 7, 4, \"Fe\", \"Iron\", \"#55.845\", 8, 4, \"Co\", \"Cobalt\", \"58.933195\", 9, 4, \"Ni\", \"Nickel\", \"#58.6934\", 10, 4, \"Cu\", \"Copper\", \"#63.546\", 11, 4, \"Zn\", \"Zinc\", \"#65.38\", 12, 4, \"Ga\", \"Gallium\", \"#69.723\", 13, 4, \"Ge\", \"Germanium\", \"#72.63\", 14, 4, \"As\", \"Arsenic\", \"#74.9216\", 15, 4, \"Se\", \"Selenium\", \"#78.96\", 16, 4, \"Br\", \"Bromine\", \"#79.904\", 17, 4, \"Kr\", \"Krypton\", \"#83.798\", 18, 4, \"Rb\", \"Rubidium\", \"#85.4678\", 1, 5, \"Sr\", \"Strontium\", \"#87.62\", 2, 5, \"Y\", \"Yttrium\", \"88.90585\", 3, 5, \"Zr\", \"Zirconium\", \"#91.224\", 4, 5, \"Nb\", \"Niobium\", \"92.90628\", 5, 5, \"Mo\", \"Molybdenum\", \"#95.96\", 6, 5, \"Tc\", \"Technetium\", \"(98)\", 7, 5, \"Ru\", \"Ruthenium\", \"#101.07\", 8, 5, \"Rh\", \"Rhodium\", \"#102.9055\", 9, 5, \"Pd\", \"Palladium\", \"#106.42\", 10, 5, \"Ag\", \"Silver\", \"#107.8682\", 11, 5, \"Cd\", \"Cadmium\", \"#112.411\", 12, 5, \"In\", \"Indium\", \"#114.818\", 13, 5, \"Sn\", \"Tin\", \"#118.71\", 14, 5, \"Sb\", \"Antimony\", \"#121.76\", 15, 5, \"Te\", \"Tellurium\", \"127.6\", 16, 5, \"I\", \"Iodine\", \"126.90447\", 17, 5, \"Xe\", \"Xenon\", \"#131.293\", 18, 5, \"Cs\", \"Caesium\", \"#132.9054\", 1, 6, \"Ba\", \"Barium\", \"#132.9054\", 2, 6, \"La\", \"Lanthanum\", \"138.90547\", 4, 9, \"Ce\", \"Cerium\", \"#140.116\", 5, 9, \"Pr\", \"Praseodymium\", \"140.90765\", 6, 9, \"Nd\", \"Neodymium\", \"#144.242\", 7, 9, \"Pm\", \"Promethium\", \"(145)\", 8, 9, \"Sm\", \"Samarium\", \"#150.36\", 9, 9, \"Eu\", \"Europium\", \"#151.964\", 10, 9, \"Gd\", \"Gadolinium\", \"#157.25\", 11, 9, \"Tb\", \"Terbium\", \"158.92535\", 12, 9, \"Dy\", \"Dysprosium\", \"162.5\", 13, 9, \"Ho\", \"Holmium\", \"164.93032\", 14, 9, \"Er\", \"Erbium\", \"#167.259\", 15, 9, \"Tm\", \"Thulium\", \"168.93421\", 16, 9, \"Yb\", \"Ytterbium\", \"#173.054\", 17, 9, \"Lu\", \"Lutetium\", \"#174.9668\", 18, 9, \"Hf\", \"Hafnium\", \"#178.49\", 4, 6, \"Ta\", \"Tantalum\", \"180.94788\", 5, 6, \"W\", \"Tungsten\", \"#183.84\", 6, 6, \"Re\", \"Rhenium\", \"#186.207\", 7, 6, \"Os\", \"Osmium\", \"#190.23\", 8, 6, \"Ir\", \"Iridium\", \"#192.217\", 9, 6, \"Pt\", \"Platinum\", \"#195.084\", 10, 6, \"Au\", \"Gold\", \"196.966569\", 11, 6, \"Hg\", \"Mercury\", \"#200.59\", 12, 6, \"Tl\", \"Thallium\", \"#204.3833\", 13, 6, \"Pb\", \"Lead\", \"207.2\", 14, 6, \"Bi\", \"Bismuth\", \"#208.9804\", 15, 6, \"Po\", \"Polonium\", \"(209)\", 16, 6, \"At\", \"Astatine\", \"(210)\", 17, 6, \"Rn\", \"Radon\", \"(222)\", 18, 6, \"Fr\", \"Francium\", \"(223)\", 1, 7, \"Ra\", \"Radium\", \"(226)\", 2, 7, \"Ac\", \"Actinium\", \"(227)\", 4, 10, \"Th\", \"Thorium\", \"232.03806\", 5, 10, \"Pa\", \"Protactinium\", \"#231.0588\", 6, 10, \"U\", \"Uranium\", \"238.02891\", 7, 10, \"Np\", \"Neptunium\", \"(237)\", 8, 10, \"Pu\", \"Plutonium\", \"(244)\", 9, 10, \"Am\", \"Americium\", \"(243)\", 10, 10, \"Cm\", \"Curium\", \"(247)\", 11, 10, \"Bk\", \"Berkelium\", \"(247)\", 12, 10, \"Cf\", \"Californium\", \"(251)\", 13, 10, \"Es\", \"Einstenium\", \"(252)\", 14, 10, \"Fm\", \"Fermium\", \"(257)\", 15, 10, \"Md\", \"Mendelevium\", \"(258)\", 16, 10, \"No\", \"Nobelium\", \"(259)\", 17, 10, \"Lr\", \"Lawrencium\", \"(262)\", 18, 10, \"Rf\", \"Rutherfordium\", \"(267)\", 4, 7, \"Db\", \"Dubnium\", \"(268)\", 5, 7, \"Sg\", \"Seaborgium\", \"(271)\", 6, 7, \"Bh\", \"Bohrium\", \"(272)\", 7, 7, \"Hs\", \"Hassium\", \"(270)\", 8, 7, \"Mt\", \"Meitnerium\", \"(276)\", 9, 7, \"Ds\", \"Darmstadium\", \"(281)\", 10, 7, \"Rg\", \"Roentgenium\", \"(280)\", 11, 7, \"Cn\", \"Copernicium\", \"(285)\", 12, 7, \"Uut\", \"Unutrium\", \"(284)\", 13, 7, \"Fl\", \"Flerovium\", \"(289)\", 14, 7, \"Uup\", \"Ununpentium\", \"(288)\", 15, 7, \"Lv\", \"Livermorium\", \"(293)\", 16, 7, \"Uus\", \"Ununseptium\", \"(294)\", 17, 7, \"Uuo\", \"Ununoctium\", \"(294)\", 18, 7 ]; var camera, scene, renderer; var controls; var objects = []; var targets = { table: [], sphere: [], helix: [], grid: [] }; init(); animate(); function init() { camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000); camera.position.z = 3000; scene = new THREE.Scene(); // table for (var i = 0; i < table.length; i += 5) { var element = document.createElement('div'); element.className = 'element'; element.style.backgroundColor = 'rgba(0,127,127,' + (Math.random() * 0.5 + 0.25) + ')'; var number = document.createElement('div'); number.className = 'number'; number.textContent = (i / 5) + 1; element.appendChild(number); var symbol = document.createElement('div'); symbol.className = 'symbol'; symbol.textContent = table[i]; element.appendChild(symbol); var details = document.createElement('div'); details.className = 'details'; details.innerHTML = table[i + 1] + '' + table[i + 2]; element.appendChild(details); var object = new THREE.CSS3DObject(element); object.position.x = Math.random() * 4000 - 2000; object.position.y = Math.random() * 4000 - 2000; object.position.z = Math.random() * 4000 - 2000; scene.add(object); objects.push(object); // var object = new THREE.Object3D(); object.position.x = (table[i + 3] * 140) - 1330; object.position.y = -(table[i + 4] * 180) + 990; targets.table.push(object); } // sphere var vector = new THREE.Vector3(); for (var i = 0, l = objects.length; i < l; i++) { var phi = Math.acos(-1 + (2 * i) / l); var theta = Math.sqrt(l * Math.PI) * phi; var object = new THREE.Object3D(); object.position.x = 800 * Math.cos(theta) * Math.sin(phi); object.position.y = 800 * Math.sin(theta) * Math.sin(phi); object.position.z = 800 * Math.cos(phi); vector.copy(object.position).multiplyScalar(2); object.lookAt(vector); targets.sphere.push(object); } // helix var vector = new THREE.Vector3(); for (var i = 0, l = objects.length; i < l; i++) { var phi = i * 0.175 + Math.PI; var object = new THREE.Object3D(); object.position.x = 900 * Math.sin(phi); object.position.y = -(i * 8) + 450; object.position.z = 900 * Math.cos(phi); vector.x = object.position.x * 2; vector.y = object.position.y; vector.z = object.position.z * 2; object.lookAt(vector); targets.helix.push(object); } // grid for (var i = 0; i < objects.length; i++) { var object = new THREE.Object3D(); object.position.x = ((i % 5) * 400) - 800; object.position.y = (-(Math.floor(i / 5) % 5) * 400) + 800; object.position.z = (Math.floor(i / 25)) * 1000 - 2000; targets.grid.push(object); } // renderer = new THREE.CSS3DRenderer(); renderer.setSize(window.innerWidth, window.innerHeight); renderer.domElement.style.position = 'absolute'; document.getElementById('container').appendChild(renderer.domElement); // controls = new THREE.TrackballControls(camera, renderer.domElement); controls.rotateSpeed = 0.5; controls.minDistance = 500; controls.maxDistance = 6000; controls.addEventListener('change', render); var button = document.getElementById('table'); button.addEventListener('click', function (event) { transform(targets.table, 2000); }, false); var button = document.getElementById('sphere'); button.addEventListener('click', function (event) { transform(targets.sphere, 2000); }, false); var button = document.getElementById('helix'); button.addEventListener('click', function (event) { transform(targets.helix, 2000); }, false); var button = document.getElementById('grid'); button.addEventListener('click', function (event) { transform(targets.grid, 2000); }, false); transform(targets.table, 5000); // window.addEventListener('resize', onWindowResize, false); } function transform(targets, duration) { TWEEN.removeAll(); for (var i = 0; i < objects.length; i++) { var object = objects[i]; var target = targets[i]; new TWEEN.Tween(object.position) .to({ x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration) .easing(TWEEN.Easing.Exponential.InOut) .start(); new TWEEN.Tween(object.rotation) .to({ x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration) .easing(TWEEN.Easing.Exponential.InOut) .start(); } new TWEEN.Tween(this) .to({}, duration * 2) .onUpdate(render) .start(); } function onWindowResize() { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); render(); } function animate() { requestAnimationFrame(animate); TWEEN.update(); controls.update(); } function render() { renderer.render(scene, camera); } document.onkeydown = function (e) { var currKey = 0, evt = e || window.event; currKey = evt.keyCode || evt.which || evt.charCode; if (currKey == 123) { window.event.cancelBubble = true; window.event.returnValue = false; } }"},{"title":"Arcaea","date":"2020-09-03T07:50:49.810Z","updated":"2020-04-06T13:55:56.937Z","comments":true,"path":"tools/arcaea/index.html","permalink":"https://brynhild.online/tools/arcaea/index.html","excerpt":"","text":"A Wandering Melody of Love AI[UE]OON Alexandrite amygdata Anökumene Antithese Arcaea v2.2.0 Title Astral tale Auxesia Avant Raze Axium Crisis Babaroque BATTLE NO.1 Be There Black Territory Blaster Blossoms BLRINK Bookmaker (2D Version) Brand new world Call My Name feat. Yukacco carmine：scythe Chelsea Chronostasis Clotho and the stargazer conflict corps-sans-organes Corruption CROSS✝︎SOUL cry of viyella Cyaegha cyanine Cybernecia Catharsis Dandelion DataErr0r Dement after legend Diode Dot to Dot feat. shully Dreadnought Dream goes on Dreamin’ Attraction!! dropdead DX Choseinou Full Metal Shojo Einherjar Joker Empire of Winter Essence of Twilight Ether Strike Evoltex(poppi’n mix) Fairytale Fallensquare Filament Flashback Flyburg and Endroll Fracture Ray FREEF4LL Garakuta Doll Play Genesis GLORY：ROAD GOODTEK (Arcaea Edit) Grievous Lady (Full ver.) Grievous Lady Grimheart Halcyon Hall of Mirrors Harutopia Utopia of Spring Heavenly caress Heavensdoor Hikari iconoclast Ignotus Afterburn ignotus Ikazuchi Illegal Paradise Impure Bird Infinity Heaven inkar-usi I’ve heard it said IZANA Journey Kanagawa Cyber Culvert La’qryma of the Wasteland Lethaeus Libertas Linear Accelerator Lost Civilization Lucifer Lumia LunarOrbit -believe in the Espebranch road- Maze No.9 Memory Forest memoryfactory.lzh Menu MERLIN Metallic Punisher Mirzam Modelista Monochrome Princess Moonheart Moonlight of Sand Castle next to you Nhelv Nirv lucE Oblivia OMAKENO Stroke One Last Drive Oracle ouroboros -twin stroke of the end- Paradise Particle Arts Party Vinyl Phantasia PRAGMATISM Purgatorium qualia -ideaesthesia- Quon Rabbit In The Black Room REconstruction Red and Blue and Green Red and Blue Reinvent Relentless ReviXy Ringed Genesis Rise Romance Wars Rugie SAIKYO STRONGER Sayonara Hatsukoi Scarlet Lance Senkyou Shades of Light in a Transcendent Realm Sheriruth Silent Rush Singularity Singularity VVVIP Snow White Solitary Dream SOUNDWiTCH Specta STAGER Story mode(Full+Loop) Strongholds Sulfur Suomi SUPERNOVA Surrender Syro The Message Tie me down gently Tiferet Title OP trappola bewitching Tutorial Valhalla：0 VECTOЯ Vexaria Vicious Heroism Vindication World bgm World Vanquisher world.execute(me); Yosakura Fubuki Your voice so… feat. Such αterlβus γuarδina"},{"title":"","date":"2020-09-06T13:43:04.623Z","updated":"2020-09-06T13:37:54.597Z","comments":true,"path":"aboutme/css/fontawesome.css","permalink":"https://brynhild.online/aboutme/css/fontawesome.css","excerpt":"","text":"/*! * Font Awesome Free 5.3.1 by @fontawesome - https://fontawesome.com * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) */ .fa, .fab, .fal, .far, .fas { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; display: inline-block; font-style: normal; font-variant: normal; text-rendering: auto; line-height: 1 } .fa-lg { font-size: 1.33333em; line-height: .75em; vertical-align: -.0667em } .fa-xs { font-size: .75em } .fa-sm { font-size: .875em } .fa-1x { font-size: 1em } .fa-2x { font-size: 2em } .fa-3x { font-size: 3em } .fa-4x { font-size: 4em } .fa-5x { font-size: 5em } .fa-6x { font-size: 6em } .fa-7x { font-size: 7em } .fa-8x { font-size: 8em } .fa-9x { font-size: 9em } .fa-10x { font-size: 10em } .fa-fw { text-align: center; width: 1.25em } .fa-ul { list-style-type: none; margin-left: 2.5em; padding-left: 0 } .fa-ul>li { position: relative } .fa-li { left: -2em; position: absolute; text-align: center; width: 2em; line-height: inherit } .fa-border { border: .08em solid #eee; border-radius: .1em; padding: .2em .25em .15em } .fa-pull-left { float: left } .fa-pull-right { float: right } .fa.fa-pull-left, .fab.fa-pull-left, .fal.fa-pull-left, .far.fa-pull-left, .fas.fa-pull-left { margin-right: .3em } .fa.fa-pull-right, .fab.fa-pull-right, .fal.fa-pull-right, .far.fa-pull-right, .fas.fa-pull-right { margin-left: .3em } .fa-spin { animation: fa-spin 2s infinite linear } .fa-pulse { animation: fa-spin 1s infinite steps(8) } @keyframes fa-spin { 0% { transform: rotate(0deg) } to { transform: rotate(1turn) } } .fa-rotate-90 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\"; transform: rotate(90deg) } .fa-rotate-180 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\"; transform: rotate(180deg) } .fa-rotate-270 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\"; transform: rotate(270deg) } .fa-flip-horizontal { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\"; transform: scaleX(-1) } .fa-flip-vertical { transform: scaleY(-1) } .fa-flip-horizontal.fa-flip-vertical, .fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\" } .fa-flip-horizontal.fa-flip-vertical { transform: scale(-1) } :root .fa-flip-horizontal, :root .fa-flip-vertical, :root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270 { -webkit-filter: none; filter: none } .fa-stack { display: inline-block; height: 2em; line-height: 2em; position: relative; vertical-align: middle; width: 2em } .fa-stack-1x, .fa-stack-2x { left: 0; position: absolute; text-align: center; width: 100% } .fa-stack-1x { line-height: inherit } .fa-stack-2x { font-size: 2em } .fa-inverse { color: #fff } .fa-500px:before { content: \"\\f26e\" } .fa-accessible-icon:before { content: \"\\f368\" } .fa-accusoft:before { content: \"\\f369\" } .fa-ad:before { content: \"\\f641\" } .fa-address-book:before { content: \"\\f2b9\" } .fa-address-card:before { content: \"\\f2bb\" } .fa-adjust:before { content: \"\\f042\" } .fa-adn:before { content: \"\\f170\" } .fa-adversal:before { content: \"\\f36a\" } .fa-affiliatetheme:before { content: \"\\f36b\" } .fa-air-freshener:before { content: \"\\f5d0\" } .fa-algolia:before { content: \"\\f36c\" } .fa-align-center:before { content: \"\\f037\" } .fa-align-justify:before { content: \"\\f039\" } .fa-align-left:before { content: \"\\f036\" } .fa-align-right:before { content: \"\\f038\" } .fa-alipay:before { content: \"\\f642\" } .fa-allergies:before { content: \"\\f461\" } .fa-amazon:before { content: \"\\f270\" } .fa-amazon-pay:before { content: \"\\f42c\" } .fa-ambulance:before { content: \"\\f0f9\" } .fa-american-sign-language-interpreting:before { content: \"\\f2a3\" } .fa-amilia:before { content: \"\\f36d\" } .fa-anchor:before { content: \"\\f13d\" } .fa-android:before { content: \"\\f17b\" } .fa-angellist:before { content: \"\\f209\" } .fa-angle-double-down:before { content: \"\\f103\" } .fa-angle-double-left:before { content: \"\\f100\" } .fa-angle-double-right:before { content: \"\\f101\" } .fa-angle-double-up:before { content: \"\\f102\" } .fa-angle-down:before { content: \"\\f107\" } .fa-angle-left:before { content: \"\\f104\" } .fa-angle-right:before { content: \"\\f105\" } .fa-angle-up:before { content: \"\\f106\" } .fa-angry:before { content: \"\\f556\" } .fa-angrycreative:before { content: \"\\f36e\" } .fa-angular:before { content: \"\\f420\" } .fa-ankh:before { content: \"\\f644\" } .fa-app-store:before { content: \"\\f36f\" } .fa-app-store-ios:before { content: \"\\f370\" } .fa-apper:before { content: \"\\f371\" } .fa-apple:before { content: \"\\f179\" } .fa-apple-alt:before { content: \"\\f5d1\" } .fa-apple-pay:before { content: \"\\f415\" } .fa-archive:before { content: \"\\f187\" } .fa-archway:before { content: \"\\f557\" } .fa-arrow-alt-circle-down:before { content: \"\\f358\" } .fa-arrow-alt-circle-left:before { content: \"\\f359\" } .fa-arrow-alt-circle-right:before { content: \"\\f35a\" } .fa-arrow-alt-circle-up:before { content: \"\\f35b\" } .fa-arrow-circle-down:before { content: \"\\f0ab\" } .fa-arrow-circle-left:before { content: \"\\f0a8\" } .fa-arrow-circle-right:before { content: \"\\f0a9\" } .fa-arrow-circle-up:before { content: \"\\f0aa\" } .fa-arrow-down:before { content: \"\\f063\" } .fa-arrow-left:before { content: \"\\f060\" } .fa-arrow-right:before { content: \"\\f061\" } .fa-arrow-up:before { content: \"\\f062\" } .fa-arrows-alt:before { content: \"\\f0b2\" } .fa-arrows-alt-h:before { content: \"\\f337\" } .fa-arrows-alt-v:before { content: \"\\f338\" } .fa-assistive-listening-systems:before { content: \"\\f2a2\" } .fa-asterisk:before { content: \"\\f069\" } .fa-asymmetrik:before { content: \"\\f372\" } .fa-at:before { content: \"\\f1fa\" } .fa-atlas:before { content: \"\\f558\" } .fa-atom:before { content: \"\\f5d2\" } .fa-audible:before { content: \"\\f373\" } .fa-audio-description:before { content: \"\\f29e\" } .fa-autoprefixer:before { content: \"\\f41c\" } .fa-avianex:before { content: \"\\f374\" } .fa-aviato:before { content: \"\\f421\" } .fa-award:before { content: \"\\f559\" } .fa-aws:before { content: \"\\f375\" } .fa-backspace:before { content: \"\\f55a\" } .fa-backward:before { content: \"\\f04a\" } .fa-balance-scale:before { content: \"\\f24e\" } .fa-ban:before { content: \"\\f05e\" } .fa-band-aid:before { content: \"\\f462\" } .fa-bandcamp:before { content: \"\\f2d5\" } .fa-barcode:before { content: \"\\f02a\" } .fa-bars:before { content: \"\\f0c9\" } .fa-baseball-ball:before { content: \"\\f433\" } .fa-basketball-ball:before { content: \"\\f434\" } .fa-bath:before { content: \"\\f2cd\" } .fa-battery-empty:before { content: \"\\f244\" } .fa-battery-full:before { content: \"\\f240\" } .fa-battery-half:before { content: \"\\f242\" } .fa-battery-quarter:before { content: \"\\f243\" } .fa-battery-three-quarters:before { content: \"\\f241\" } .fa-bed:before { content: \"\\f236\" } .fa-beer:before { content: \"\\f0fc\" } .fa-behance:before { content: \"\\f1b4\" } .fa-behance-square:before { content: \"\\f1b5\" } .fa-bell:before { content: \"\\f0f3\" } .fa-bell-slash:before { content: \"\\f1f6\" } .fa-bezier-curve:before { content: \"\\f55b\" } .fa-bible:before { content: \"\\f647\" } .fa-bicycle:before { content: \"\\f206\" } .fa-bimobject:before { content: \"\\f378\" } .fa-binoculars:before { content: \"\\f1e5\" } .fa-birthday-cake:before { content: \"\\f1fd\" } .fa-bitbucket:before { content: \"\\f171\" } .fa-bitcoin:before { content: \"\\f379\" } .fa-bity:before { content: \"\\f37a\" } .fa-black-tie:before { content: \"\\f27e\" } .fa-blackberry:before { content: \"\\f37b\" } .fa-blender:before { content: \"\\f517\" } .fa-blind:before { content: \"\\f29d\" } .fa-blogger:before { content: \"\\f37c\" } .fa-blogger-b:before { content: \"\\f37d\" } .fa-bluetooth:before { content: \"\\f293\" } .fa-bluetooth-b:before { content: \"\\f294\" } .fa-bold:before { content: \"\\f032\" } .fa-bolt:before { content: \"\\f0e7\" } .fa-bomb:before { content: \"\\f1e2\" } .fa-bone:before { content: \"\\f5d7\" } .fa-bong:before { content: \"\\f55c\" } .fa-book:before { content: \"\\f02d\" } .fa-book-open:before { content: \"\\f518\" } .fa-book-reader:before { content: \"\\f5da\" } .fa-bookmark:before { content: \"\\f02e\" } .fa-bowling-ball:before { content: \"\\f436\" } .fa-box:before { content: \"\\f466\" } .fa-box-open:before { content: \"\\f49e\" } .fa-boxes:before { content: \"\\f468\" } .fa-braille:before { content: \"\\f2a1\" } .fa-brain:before { content: \"\\f5dc\" } .fa-briefcase:before { content: \"\\f0b1\" } .fa-briefcase-medical:before { content: \"\\f469\" } .fa-broadcast-tower:before { content: \"\\f519\" } .fa-broom:before { content: \"\\f51a\" } .fa-brush:before { content: \"\\f55d\" } .fa-btc:before { content: \"\\f15a\" } .fa-bug:before { content: \"\\f188\" } .fa-building:before { content: \"\\f1ad\" } .fa-bullhorn:before { content: \"\\f0a1\" } .fa-bullseye:before { content: \"\\f140\" } .fa-burn:before { content: \"\\f46a\" } .fa-buromobelexperte:before { content: \"\\f37f\" } .fa-bus:before { content: \"\\f207\" } .fa-bus-alt:before { content: \"\\f55e\" } .fa-business-time:before { content: \"\\f64a\" } .fa-buysellads:before { content: \"\\f20d\" } .fa-calculator:before { content: \"\\f1ec\" } .fa-calendar:before { content: \"\\f133\" } .fa-calendar-alt:before { content: \"\\f073\" } .fa-calendar-check:before { content: \"\\f274\" } .fa-calendar-minus:before { content: \"\\f272\" } .fa-calendar-plus:before { content: \"\\f271\" } .fa-calendar-times:before { content: \"\\f273\" } .fa-camera:before { content: \"\\f030\" } .fa-camera-retro:before { content: \"\\f083\" } .fa-cannabis:before { content: \"\\f55f\" } .fa-capsules:before { content: \"\\f46b\" } .fa-car:before { content: \"\\f1b9\" } .fa-car-alt:before { content: \"\\f5de\" } .fa-car-battery:before { content: \"\\f5df\" } .fa-car-crash:before { content: \"\\f5e1\" } .fa-car-side:before { content: \"\\f5e4\" } .fa-caret-down:before { content: \"\\f0d7\" } .fa-caret-left:before { content: \"\\f0d9\" } .fa-caret-right:before { content: \"\\f0da\" } .fa-caret-square-down:before { content: \"\\f150\" } .fa-caret-square-left:before { content: \"\\f191\" } .fa-caret-square-right:before { content: \"\\f152\" } .fa-caret-square-up:before { content: \"\\f151\" } .fa-caret-up:before { content: \"\\f0d8\" } .fa-cart-arrow-down:before { content: \"\\f218\" } .fa-cart-plus:before { content: \"\\f217\" } .fa-cc-amazon-pay:before { content: \"\\f42d\" } .fa-cc-amex:before { content: \"\\f1f3\" } .fa-cc-apple-pay:before { content: \"\\f416\" } .fa-cc-diners-club:before { content: \"\\f24c\" } .fa-cc-discover:before { content: \"\\f1f2\" } .fa-cc-jcb:before { content: \"\\f24b\" } .fa-cc-mastercard:before { content: \"\\f1f1\" } .fa-cc-paypal:before { content: \"\\f1f4\" } .fa-cc-stripe:before { content: \"\\f1f5\" } .fa-cc-visa:before { content: \"\\f1f0\" } .fa-centercode:before { content: \"\\f380\" } .fa-certificate:before { content: \"\\f0a3\" } .fa-chalkboard:before { content: \"\\f51b\" } .fa-chalkboard-teacher:before { content: \"\\f51c\" } .fa-charging-station:before { content: \"\\f5e7\" } .fa-chart-area:before { content: \"\\f1fe\" } .fa-chart-bar:before { content: \"\\f080\" } .fa-chart-line:before { content: \"\\f201\" } .fa-chart-pie:before { content: \"\\f200\" } .fa-check:before { content: \"\\f00c\" } .fa-check-circle:before { content: \"\\f058\" } .fa-check-double:before { content: \"\\f560\" } .fa-check-square:before { content: \"\\f14a\" } .fa-chess:before { content: \"\\f439\" } .fa-chess-bishop:before { content: \"\\f43a\" } .fa-chess-board:before { content: \"\\f43c\" } .fa-chess-king:before { content: \"\\f43f\" } .fa-chess-knight:before { content: \"\\f441\" } .fa-chess-pawn:before { content: \"\\f443\" } .fa-chess-queen:before { content: \"\\f445\" } .fa-chess-rook:before { content: \"\\f447\" } .fa-chevron-circle-down:before { content: \"\\f13a\" } .fa-chevron-circle-left:before { content: \"\\f137\" } .fa-chevron-circle-right:before { content: \"\\f138\" } .fa-chevron-circle-up:before { content: \"\\f139\" } .fa-chevron-down:before { content: \"\\f078\" } .fa-chevron-left:before { content: \"\\f053\" } .fa-chevron-right:before { content: \"\\f054\" } .fa-chevron-up:before { content: \"\\f077\" } .fa-child:before { content: \"\\f1ae\" } .fa-chrome:before { content: \"\\f268\" } .fa-church:before { content: \"\\f51d\" } .fa-circle:before { content: \"\\f111\" } .fa-circle-notch:before { content: \"\\f1ce\" } .fa-city:before { content: \"\\f64f\" } .fa-clipboard:before { content: \"\\f328\" } .fa-clipboard-check:before { content: \"\\f46c\" } .fa-clipboard-list:before { content: \"\\f46d\" } .fa-clock:before { content: \"\\f017\" } .fa-clone:before { content: \"\\f24d\" } .fa-closed-captioning:before { content: \"\\f20a\" } .fa-cloud:before { content: \"\\f0c2\" } .fa-cloud-download-alt:before { content: \"\\f381\" } .fa-cloud-upload-alt:before { content: \"\\f382\" } .fa-cloudscale:before { content: \"\\f383\" } .fa-cloudsmith:before { content: \"\\f384\" } .fa-cloudversify:before { content: \"\\f385\" } .fa-cocktail:before { content: \"\\f561\" } .fa-code:before { content: \"\\f121\" } .fa-code-branch:before { content: \"\\f126\" } .fa-codepen:before { content: \"\\f1cb\" } .fa-codiepie:before { content: \"\\f284\" } .fa-coffee:before { content: \"\\f0f4\" } .fa-cog:before { content: \"\\f013\" } .fa-cogs:before { content: \"\\f085\" } .fa-coins:before { content: \"\\f51e\" } .fa-columns:before { content: \"\\f0db\" } .fa-comment:before { content: \"\\f075\" } .fa-comment-alt:before { content: \"\\f27a\" } .fa-comment-dollar:before { content: \"\\f651\" } .fa-comment-dots:before { content: \"\\f4ad\" } .fa-comment-slash:before { content: \"\\f4b3\" } .fa-comments:before { content: \"\\f086\" } .fa-comments-dollar:before { content: \"\\f653\" } .fa-compact-disc:before { content: \"\\f51f\" } .fa-compass:before { content: \"\\f14e\" } .fa-compress:before { content: \"\\f066\" } .fa-concierge-bell:before { content: \"\\f562\" } .fa-connectdevelop:before { content: \"\\f20e\" } .fa-contao:before { content: \"\\f26d\" } .fa-cookie:before { content: \"\\f563\" } .fa-cookie-bite:before { content: \"\\f564\" } .fa-copy:before { content: \"\\f0c5\" } .fa-copyright:before { content: \"\\f1f9\" } .fa-couch:before { content: \"\\f4b8\" } .fa-cpanel:before { content: \"\\f388\" } .fa-creative-commons:before { content: \"\\f25e\" } .fa-creative-commons-by:before { content: \"\\f4e7\" } .fa-creative-commons-nc:before { content: \"\\f4e8\" } .fa-creative-commons-nc-eu:before { content: \"\\f4e9\" } .fa-creative-commons-nc-jp:before { content: \"\\f4ea\" } .fa-creative-commons-nd:before { content: \"\\f4eb\" } .fa-creative-commons-pd:before { content: \"\\f4ec\" } .fa-creative-commons-pd-alt:before { content: \"\\f4ed\" } .fa-creative-commons-remix:before { content: \"\\f4ee\" } .fa-creative-commons-sa:before { content: \"\\f4ef\" } .fa-creative-commons-sampling:before { content: \"\\f4f0\" } .fa-creative-commons-sampling-plus:before { content: \"\\f4f1\" } .fa-creative-commons-share:before { content: \"\\f4f2\" } .fa-credit-card:before { content: \"\\f09d\" } .fa-crop:before { content: \"\\f125\" } .fa-crop-alt:before { content: \"\\f565\" } .fa-cross:before { content: \"\\f654\" } .fa-crosshairs:before { content: \"\\f05b\" } .fa-crow:before { content: \"\\f520\" } .fa-crown:before { content: \"\\f521\" } .fa-css3:before { content: \"\\f13c\" } .fa-css3-alt:before { content: \"\\f38b\" } .fa-cube:before { content: \"\\f1b2\" } .fa-cubes:before { content: \"\\f1b3\" } .fa-cut:before { content: \"\\f0c4\" } .fa-cuttlefish:before { content: \"\\f38c\" } .fa-d-and-d:before { content: \"\\f38d\" } .fa-dashcube:before { content: \"\\f210\" } .fa-database:before { content: \"\\f1c0\" } .fa-deaf:before { content: \"\\f2a4\" } .fa-delicious:before { content: \"\\f1a5\" } .fa-deploydog:before { content: \"\\f38e\" } .fa-deskpro:before { content: \"\\f38f\" } .fa-desktop:before { content: \"\\f108\" } .fa-deviantart:before { content: \"\\f1bd\" } .fa-dharmachakra:before { content: \"\\f655\" } .fa-diagnoses:before { content: \"\\f470\" } .fa-dice:before { content: \"\\f522\" } .fa-dice-five:before { content: \"\\f523\" } .fa-dice-four:before { content: \"\\f524\" } .fa-dice-one:before { content: \"\\f525\" } .fa-dice-six:before { content: \"\\f526\" } .fa-dice-three:before { content: \"\\f527\" } .fa-dice-two:before { content: \"\\f528\" } .fa-digg:before { content: \"\\f1a6\" } .fa-digital-ocean:before { content: \"\\f391\" } .fa-digital-tachograph:before { content: \"\\f566\" } .fa-directions:before { content: \"\\f5eb\" } .fa-discord:before { content: \"\\f392\" } .fa-discourse:before { content: \"\\f393\" } .fa-divide:before { content: \"\\f529\" } .fa-dizzy:before { content: \"\\f567\" } .fa-dna:before { content: \"\\f471\" } .fa-dochub:before { content: \"\\f394\" } .fa-docker:before { content: \"\\f395\" } .fa-dollar-sign:before { content: \"\\f155\" } .fa-dolly:before { content: \"\\f472\" } .fa-dolly-flatbed:before { content: \"\\f474\" } .fa-donate:before { content: \"\\f4b9\" } .fa-door-closed:before { content: \"\\f52a\" } .fa-door-open:before { content: \"\\f52b\" } .fa-dot-circle:before { content: \"\\f192\" } .fa-dove:before { content: \"\\f4ba\" } .fa-download:before { content: \"\\f019\" } .fa-draft2digital:before { content: \"\\f396\" } .fa-drafting-compass:before { content: \"\\f568\" } .fa-draw-polygon:before { content: \"\\f5ee\" } .fa-dribbble:before { content: \"\\f17d\" } .fa-dribbble-square:before { content: \"\\f397\" } .fa-dropbox:before { content: \"\\f16b\" } .fa-drum:before { content: \"\\f569\" } .fa-drum-steelpan:before { content: \"\\f56a\" } .fa-drupal:before { content: \"\\f1a9\" } .fa-dumbbell:before { content: \"\\f44b\" } .fa-dyalog:before { content: \"\\f399\" } .fa-earlybirds:before { content: \"\\f39a\" } .fa-ebay:before { content: \"\\f4f4\" } .fa-edge:before { content: \"\\f282\" } .fa-edit:before { content: \"\\f044\" } .fa-eject:before { content: \"\\f052\" } .fa-elementor:before { content: \"\\f430\" } .fa-ellipsis-h:before { content: \"\\f141\" } .fa-ellipsis-v:before { content: \"\\f142\" } .fa-ello:before { content: \"\\f5f1\" } .fa-ember:before { content: \"\\f423\" } .fa-empire:before { content: \"\\f1d1\" } .fa-envelope:before { content: \"\\f0e0\" } .fa-envelope-open:before { content: \"\\f2b6\" } .fa-envelope-open-text:before { content: \"\\f658\" } .fa-envelope-square:before { content: \"\\f199\" } .fa-envira:before { content: \"\\f299\" } .fa-equals:before { content: \"\\f52c\" } .fa-eraser:before { content: \"\\f12d\" } .fa-erlang:before { content: \"\\f39d\" } .fa-ethereum:before { content: \"\\f42e\" } .fa-etsy:before { content: \"\\f2d7\" } .fa-euro-sign:before { content: \"\\f153\" } .fa-exchange-alt:before { content: \"\\f362\" } .fa-exclamation:before { content: \"\\f12a\" } .fa-exclamation-circle:before { content: \"\\f06a\" } .fa-exclamation-triangle:before { content: \"\\f071\" } .fa-expand:before { content: \"\\f065\" } .fa-expand-arrows-alt:before { content: \"\\f31e\" } .fa-expeditedssl:before { content: \"\\f23e\" } .fa-external-link-alt:before { content: \"\\f35d\" } .fa-external-link-square-alt:before { content: \"\\f360\" } .fa-eye:before { content: \"\\f06e\" } .fa-eye-dropper:before { content: \"\\f1fb\" } .fa-eye-slash:before { content: \"\\f070\" } .fa-facebook:before { content: \"\\f09a\" } .fa-facebook-f:before { content: \"\\f39e\" } .fa-facebook-messenger:before { content: \"\\f39f\" } .fa-facebook-square:before { content: \"\\f082\" } .fa-fast-backward:before { content: \"\\f049\" } .fa-fast-forward:before { content: \"\\f050\" } .fa-fax:before { content: \"\\f1ac\" } .fa-feather:before { content: \"\\f52d\" } .fa-feather-alt:before { content: \"\\f56b\" } .fa-female:before { content: \"\\f182\" } .fa-fighter-jet:before { content: \"\\f0fb\" } .fa-file:before { content: \"\\f15b\" } .fa-file-alt:before { content: \"\\f15c\" } .fa-file-archive:before { content: \"\\f1c6\" } .fa-file-audio:before { content: \"\\f1c7\" } .fa-file-code:before { content: \"\\f1c9\" } .fa-file-contract:before { content: \"\\f56c\" } .fa-file-download:before { content: \"\\f56d\" } .fa-file-excel:before { content: \"\\f1c3\" } .fa-file-export:before { content: \"\\f56e\" } .fa-file-image:before { content: \"\\f1c5\" } .fa-file-import:before { content: \"\\f56f\" } .fa-file-invoice:before { content: \"\\f570\" } .fa-file-invoice-dollar:before { content: \"\\f571\" } .fa-file-medical:before { content: \"\\f477\" } .fa-file-medical-alt:before { content: \"\\f478\" } .fa-file-pdf:before { content: \"\\f1c1\" } .fa-file-powerpoint:before { content: \"\\f1c4\" } .fa-file-prescription:before { content: \"\\f572\" } .fa-file-signature:before { content: \"\\f573\" } .fa-file-upload:before { content: \"\\f574\" } .fa-file-video:before { content: \"\\f1c8\" } .fa-file-word:before { content: \"\\f1c2\" } .fa-fill:before { content: \"\\f575\" } .fa-fill-drip:before { content: \"\\f576\" } .fa-film:before { content: \"\\f008\" } .fa-filter:before { content: \"\\f0b0\" } .fa-fingerprint:before { content: \"\\f577\" } .fa-fire:before { content: \"\\f06d\" } .fa-fire-extinguisher:before { content: \"\\f134\" } .fa-firefox:before { content: \"\\f269\" } .fa-first-aid:before { content: \"\\f479\" } .fa-first-order:before { content: \"\\f2b0\" } .fa-first-order-alt:before { content: \"\\f50a\" } .fa-firstdraft:before { content: \"\\f3a1\" } .fa-fish:before { content: \"\\f578\" } .fa-flag:before { content: \"\\f024\" } .fa-flag-checkered:before { content: \"\\f11e\" } .fa-flask:before { content: \"\\f0c3\" } .fa-flickr:before { content: \"\\f16e\" } .fa-flipboard:before { content: \"\\f44d\" } .fa-flushed:before { content: \"\\f579\" } .fa-fly:before { content: \"\\f417\" } .fa-folder:before { content: \"\\f07b\" } .fa-folder-minus:before { content: \"\\f65d\" } .fa-folder-open:before { content: \"\\f07c\" } .fa-folder-plus:before { content: \"\\f65e\" } .fa-font:before { content: \"\\f031\" } .fa-font-awesome:before { content: \"\\f2b4\" } .fa-font-awesome-alt:before { content: \"\\f35c\" } .fa-font-awesome-flag:before { content: \"\\f425\" } .fa-font-awesome-logo-full:before { content: \"\\f4e6\" } .fa-fonticons:before { content: \"\\f280\" } .fa-fonticons-fi:before { content: \"\\f3a2\" } .fa-football-ball:before { content: \"\\f44e\" } .fa-fort-awesome:before { content: \"\\f286\" } .fa-fort-awesome-alt:before { content: \"\\f3a3\" } .fa-forumbee:before { content: \"\\f211\" } .fa-forward:before { content: \"\\f04e\" } .fa-foursquare:before { content: \"\\f180\" } .fa-free-code-camp:before { content: \"\\f2c5\" } .fa-freebsd:before { content: \"\\f3a4\" } .fa-frog:before { content: \"\\f52e\" } .fa-frown:before { content: \"\\f119\" } .fa-frown-open:before { content: \"\\f57a\" } .fa-fulcrum:before { content: \"\\f50b\" } .fa-funnel-dollar:before { content: \"\\f662\" } .fa-futbol:before { content: \"\\f1e3\" } .fa-galactic-republic:before { content: \"\\f50c\" } .fa-galactic-senate:before { content: \"\\f50d\" } .fa-gamepad:before { content: \"\\f11b\" } .fa-gas-pump:before { content: \"\\f52f\" } .fa-gavel:before { content: \"\\f0e3\" } .fa-gem:before { content: \"\\f3a5\" } .fa-genderless:before { content: \"\\f22d\" } .fa-get-pocket:before { content: \"\\f265\" } .fa-gg:before { content: \"\\f260\" } .fa-gg-circle:before { content: \"\\f261\" } .fa-gift:before { content: \"\\f06b\" } .fa-git:before { content: \"\\f1d3\" } .fa-git-square:before { content: \"\\f1d2\" } .fa-github:before { content: \"\\f09b\" } .fa-github-alt:before { content: \"\\f113\" } .fa-github-square:before { content: \"\\f092\" } .fa-gitkraken:before { content: \"\\f3a6\" } .fa-gitlab:before { content: \"\\f296\" } .fa-gitter:before { content: \"\\f426\" } .fa-glass-martini:before { content: \"\\f000\" } .fa-glass-martini-alt:before { content: \"\\f57b\" } .fa-glasses:before { content: \"\\f530\" } .fa-glide:before { content: \"\\f2a5\" } .fa-glide-g:before { content: \"\\f2a6\" } .fa-globe:before { content: \"\\f0ac\" } .fa-globe-africa:before { content: \"\\f57c\" } .fa-globe-americas:before { content: \"\\f57d\" } .fa-globe-asia:before { content: \"\\f57e\" } .fa-gofore:before { content: \"\\f3a7\" } .fa-golf-ball:before { content: \"\\f450\" } .fa-goodreads:before { content: \"\\f3a8\" } .fa-goodreads-g:before { content: \"\\f3a9\" } .fa-google:before { content: \"\\f1a0\" } .fa-google-drive:before { content: \"\\f3aa\" } .fa-google-play:before { content: \"\\f3ab\" } .fa-google-plus:before { content: \"\\f2b3\" } .fa-google-plus-g:before { content: \"\\f0d5\" } .fa-google-plus-square:before { content: \"\\f0d4\" } .fa-google-wallet:before { content: \"\\f1ee\" } .fa-gopuram:before { content: \"\\f664\" } .fa-graduation-cap:before { content: \"\\f19d\" } .fa-gratipay:before { content: \"\\f184\" } .fa-grav:before { content: \"\\f2d6\" } .fa-greater-than:before { content: \"\\f531\" } .fa-greater-than-equal:before { content: \"\\f532\" } .fa-grimace:before { content: \"\\f57f\" } .fa-grin:before { content: \"\\f580\" } .fa-grin-alt:before { content: \"\\f581\" } .fa-grin-beam:before { content: \"\\f582\" } .fa-grin-beam-sweat:before { content: \"\\f583\" } .fa-grin-hearts:before { content: \"\\f584\" } .fa-grin-squint:before { content: \"\\f585\" } .fa-grin-squint-tears:before { content: \"\\f586\" } .fa-grin-stars:before { content: \"\\f587\" } .fa-grin-tears:before { content: \"\\f588\" } .fa-grin-tongue:before { content: \"\\f589\" } .fa-grin-tongue-squint:before { content: \"\\f58a\" } .fa-grin-tongue-wink:before { content: \"\\f58b\" } .fa-grin-wink:before { content: \"\\f58c\" } .fa-grip-horizontal:before { content: \"\\f58d\" } .fa-grip-vertical:before { content: \"\\f58e\" } .fa-gripfire:before { content: \"\\f3ac\" } .fa-grunt:before { content: \"\\f3ad\" } .fa-gulp:before { content: \"\\f3ae\" } .fa-h-square:before { content: \"\\f0fd\" } .fa-hacker-news:before { content: \"\\f1d4\" } .fa-hacker-news-square:before { content: \"\\f3af\" } .fa-hackerrank:before { content: \"\\f5f7\" } .fa-hamsa:before { content: \"\\f665\" } .fa-hand-holding:before { content: \"\\f4bd\" } .fa-hand-holding-heart:before { content: \"\\f4be\" } .fa-hand-holding-usd:before { content: \"\\f4c0\" } .fa-hand-lizard:before { content: \"\\f258\" } .fa-hand-paper:before { content: \"\\f256\" } .fa-hand-peace:before { content: \"\\f25b\" } .fa-hand-point-down:before { content: \"\\f0a7\" } .fa-hand-point-left:before { content: \"\\f0a5\" } .fa-hand-point-right:before { content: \"\\f0a4\" } .fa-hand-point-up:before { content: \"\\f0a6\" } .fa-hand-pointer:before { content: \"\\f25a\" } .fa-hand-rock:before { content: \"\\f255\" } .fa-hand-scissors:before { content: \"\\f257\" } .fa-hand-spock:before { content: \"\\f259\" } .fa-hands:before { content: \"\\f4c2\" } .fa-hands-helping:before { content: \"\\f4c4\" } .fa-handshake:before { content: \"\\f2b5\" } .fa-hashtag:before { content: \"\\f292\" } .fa-haykal:before { content: \"\\f666\" } .fa-hdd:before { content: \"\\f0a0\" } .fa-heading:before { content: \"\\f1dc\" } .fa-headphones:before { content: \"\\f025\" } .fa-headphones-alt:before { content: \"\\f58f\" } .fa-headset:before { content: \"\\f590\" } .fa-heart:before { content: \"\\f004\" } .fa-heartbeat:before { content: \"\\f21e\" } .fa-helicopter:before { content: \"\\f533\" } .fa-highlighter:before { content: \"\\f591\" } .fa-hips:before { content: \"\\f452\" } .fa-hire-a-helper:before { content: \"\\f3b0\" } .fa-history:before { content: \"\\f1da\" } .fa-hockey-puck:before { content: \"\\f453\" } .fa-home:before { content: \"\\f015\" } .fa-hooli:before { content: \"\\f427\" } .fa-hornbill:before { content: \"\\f592\" } .fa-hospital:before { content: \"\\f0f8\" } .fa-hospital-alt:before { content: \"\\f47d\" } .fa-hospital-symbol:before { content: \"\\f47e\" } .fa-hot-tub:before { content: \"\\f593\" } .fa-hotel:before { content: \"\\f594\" } .fa-hotjar:before { content: \"\\f3b1\" } .fa-hourglass:before { content: \"\\f254\" } .fa-hourglass-end:before { content: \"\\f253\" } .fa-hourglass-half:before { content: \"\\f252\" } .fa-hourglass-start:before { content: \"\\f251\" } .fa-houzz:before { content: \"\\f27c\" } .fa-html5:before { content: \"\\f13b\" } .fa-hubspot:before { content: \"\\f3b2\" } .fa-i-cursor:before { content: \"\\f246\" } .fa-id-badge:before { content: \"\\f2c1\" } .fa-id-card:before { content: \"\\f2c2\" } .fa-id-card-alt:before { content: \"\\f47f\" } .fa-image:before { content: \"\\f03e\" } .fa-images:before { content: \"\\f302\" } .fa-imdb:before { content: \"\\f2d8\" } .fa-inbox:before { content: \"\\f01c\" } .fa-indent:before { content: \"\\f03c\" } .fa-industry:before { content: \"\\f275\" } .fa-infinity:before { content: \"\\f534\" } .fa-info:before { content: \"\\f129\" } .fa-info-circle:before { content: \"\\f05a\" } .fa-instagram:before { content: \"\\f16d\" } .fa-internet-explorer:before { content: \"\\f26b\" } .fa-ioxhost:before { content: \"\\f208\" } .fa-italic:before { content: \"\\f033\" } .fa-itunes:before { content: \"\\f3b4\" } .fa-itunes-note:before { content: \"\\f3b5\" } .fa-java:before { content: \"\\f4e4\" } .fa-jedi:before { content: \"\\f669\" } .fa-jedi-order:before { content: \"\\f50e\" } .fa-jenkins:before { content: \"\\f3b6\" } .fa-joget:before { content: \"\\f3b7\" } .fa-joint:before { content: \"\\f595\" } .fa-joomla:before { content: \"\\f1aa\" } .fa-journal-whills:before { content: \"\\f66a\" } .fa-js:before { content: \"\\f3b8\" } .fa-js-square:before { content: \"\\f3b9\" } .fa-jsfiddle:before { content: \"\\f1cc\" } .fa-kaaba:before { content: \"\\f66b\" } .fa-kaggle:before { content: \"\\f5fa\" } .fa-key:before { content: \"\\f084\" } .fa-keybase:before { content: \"\\f4f5\" } .fa-keyboard:before { content: \"\\f11c\" } .fa-keycdn:before { content: \"\\f3ba\" } .fa-khanda:before { content: \"\\f66d\" } .fa-kickstarter:before { content: \"\\f3bb\" } .fa-kickstarter-k:before { content: \"\\f3bc\" } .fa-kiss:before { content: \"\\f596\" } .fa-kiss-beam:before { content: \"\\f597\" } .fa-kiss-wink-heart:before { content: \"\\f598\" } .fa-kiwi-bird:before { content: \"\\f535\" } .fa-korvue:before { content: \"\\f42f\" } .fa-landmark:before { content: \"\\f66f\" } .fa-language:before { content: \"\\f1ab\" } .fa-laptop:before { content: \"\\f109\" } .fa-laptop-code:before { content: \"\\f5fc\" } .fa-laravel:before { content: \"\\f3bd\" } .fa-lastfm:before { content: \"\\f202\" } .fa-lastfm-square:before { content: \"\\f203\" } .fa-laugh:before { content: \"\\f599\" } .fa-laugh-beam:before { content: \"\\f59a\" } .fa-laugh-squint:before { content: \"\\f59b\" } .fa-laugh-wink:before { content: \"\\f59c\" } .fa-layer-group:before { content: \"\\f5fd\" } .fa-leaf:before { content: \"\\f06c\" } .fa-leanpub:before { content: \"\\f212\" } .fa-lemon:before { content: \"\\f094\" } .fa-less:before { content: \"\\f41d\" } .fa-less-than:before { content: \"\\f536\" } .fa-less-than-equal:before { content: \"\\f537\" } .fa-level-down-alt:before { content: \"\\f3be\" } .fa-level-up-alt:before { content: \"\\f3bf\" } .fa-life-ring:before { content: \"\\f1cd\" } .fa-lightbulb:before { content: \"\\f0eb\" } .fa-line:before { content: \"\\f3c0\" } .fa-link:before { content: \"\\f0c1\" } .fa-linkedin:before { content: \"\\f08c\" } .fa-linkedin-in:before { content: \"\\f0e1\" } .fa-linode:before { content: \"\\f2b8\" } .fa-linux:before { content: \"\\f17c\" } .fa-lira-sign:before { content: \"\\f195\" } .fa-list:before { content: \"\\f03a\" } .fa-list-alt:before { content: \"\\f022\" } .fa-list-ol:before { content: \"\\f0cb\" } .fa-list-ul:before { content: \"\\f0ca\" } .fa-location-arrow:before { content: \"\\f124\" } .fa-lock:before { content: \"\\f023\" } .fa-lock-open:before { content: \"\\f3c1\" } .fa-long-arrow-alt-down:before { content: \"\\f309\" } .fa-long-arrow-alt-left:before { content: \"\\f30a\" } .fa-long-arrow-alt-right:before { content: \"\\f30b\" } .fa-long-arrow-alt-up:before { content: \"\\f30c\" } .fa-low-vision:before { content: \"\\f2a8\" } .fa-luggage-cart:before { content: \"\\f59d\" } .fa-lyft:before { content: \"\\f3c3\" } .fa-magento:before { content: \"\\f3c4\" } .fa-magic:before { content: \"\\f0d0\" } .fa-magnet:before { content: \"\\f076\" } .fa-mail-bulk:before { content: \"\\f674\" } .fa-mailchimp:before { content: \"\\f59e\" } .fa-male:before { content: \"\\f183\" } .fa-mandalorian:before { content: \"\\f50f\" } .fa-map:before { content: \"\\f279\" } .fa-map-marked:before { content: \"\\f59f\" } .fa-map-marked-alt:before { content: \"\\f5a0\" } .fa-map-marker:before { content: \"\\f041\" } .fa-map-marker-alt:before { content: \"\\f3c5\" } .fa-map-pin:before { content: \"\\f276\" } .fa-map-signs:before { content: \"\\f277\" } .fa-markdown:before { content: \"\\f60f\" } .fa-marker:before { content: \"\\f5a1\" } .fa-mars:before { content: \"\\f222\" } .fa-mars-double:before { content: \"\\f227\" } .fa-mars-stroke:before { content: \"\\f229\" } .fa-mars-stroke-h:before { content: \"\\f22b\" } .fa-mars-stroke-v:before { content: \"\\f22a\" } .fa-mastodon:before { content: \"\\f4f6\" } .fa-maxcdn:before { content: \"\\f136\" } .fa-medal:before { content: \"\\f5a2\" } .fa-medapps:before { content: \"\\f3c6\" } .fa-medium:before { content: \"\\f23a\" } .fa-medium-m:before { content: \"\\f3c7\" } .fa-medkit:before { content: \"\\f0fa\" } .fa-medrt:before { content: \"\\f3c8\" } .fa-meetup:before { content: \"\\f2e0\" } .fa-megaport:before { content: \"\\f5a3\" } .fa-meh:before { content: \"\\f11a\" } .fa-meh-blank:before { content: \"\\f5a4\" } .fa-meh-rolling-eyes:before { content: \"\\f5a5\" } .fa-memory:before { content: \"\\f538\" } .fa-menorah:before { content: \"\\f676\" } .fa-mercury:before { content: \"\\f223\" } .fa-microchip:before { content: \"\\f2db\" } .fa-microphone:before { content: \"\\f130\" } .fa-microphone-alt:before { content: \"\\f3c9\" } .fa-microphone-alt-slash:before { content: \"\\f539\" } .fa-microphone-slash:before { content: \"\\f131\" } .fa-microscope:before { content: \"\\f610\" } .fa-microsoft:before { content: \"\\f3ca\" } .fa-minus:before { content: \"\\f068\" } .fa-minus-circle:before { content: \"\\f056\" } .fa-minus-square:before { content: \"\\f146\" } .fa-mix:before { content: \"\\f3cb\" } .fa-mixcloud:before { content: \"\\f289\" } .fa-mizuni:before { content: \"\\f3cc\" } .fa-mobile:before { content: \"\\f10b\" } .fa-mobile-alt:before { content: \"\\f3cd\" } .fa-modx:before { content: \"\\f285\" } .fa-monero:before { content: \"\\f3d0\" } .fa-money-bill:before { content: \"\\f0d6\" } .fa-money-bill-alt:before { content: \"\\f3d1\" } .fa-money-bill-wave:before { content: \"\\f53a\" } .fa-money-bill-wave-alt:before { content: \"\\f53b\" } .fa-money-check:before { content: \"\\f53c\" } .fa-money-check-alt:before { content: \"\\f53d\" } .fa-monument:before { content: \"\\f5a6\" } .fa-moon:before { content: \"\\f186\" } .fa-mortar-pestle:before { content: \"\\f5a7\" } .fa-mosque:before { content: \"\\f678\" } .fa-motorcycle:before { content: \"\\f21c\" } .fa-mouse-pointer:before { content: \"\\f245\" } .fa-music:before { content: \"\\f001\" } .fa-napster:before { content: \"\\f3d2\" } .fa-neos:before { content: \"\\f612\" } .fa-neuter:before { content: \"\\f22c\" } .fa-newspaper:before { content: \"\\f1ea\" } .fa-nimblr:before { content: \"\\f5a8\" } .fa-nintendo-switch:before { content: \"\\f418\" } .fa-node:before { content: \"\\f419\" } .fa-node-js:before { content: \"\\f3d3\" } .fa-not-equal:before { content: \"\\f53e\" } .fa-notes-medical:before { content: \"\\f481\" } .fa-npm:before { content: \"\\f3d4\" } .fa-ns8:before { content: \"\\f3d5\" } .fa-nutritionix:before { content: \"\\f3d6\" } .fa-object-group:before { content: \"\\f247\" } .fa-object-ungroup:before { content: \"\\f248\" } .fa-odnoklassniki:before { content: \"\\f263\" } .fa-odnoklassniki-square:before { content: \"\\f264\" } .fa-oil-can:before { content: \"\\f613\" } .fa-old-republic:before { content: \"\\f510\" } .fa-om:before { content: \"\\f679\" } .fa-opencart:before { content: \"\\f23d\" } .fa-openid:before { content: \"\\f19b\" } .fa-opera:before { content: \"\\f26a\" } .fa-optin-monster:before { content: \"\\f23c\" } .fa-osi:before { content: \"\\f41a\" } .fa-outdent:before { content: \"\\f03b\" } .fa-page4:before { content: \"\\f3d7\" } .fa-pagelines:before { content: \"\\f18c\" } .fa-paint-brush:before { content: \"\\f1fc\" } .fa-paint-roller:before { content: \"\\f5aa\" } .fa-palette:before { content: \"\\f53f\" } .fa-palfed:before { content: \"\\f3d8\" } .fa-pallet:before { content: \"\\f482\" } .fa-paper-plane:before { content: \"\\f1d8\" } .fa-paperclip:before { content: \"\\f0c6\" } .fa-parachute-box:before { content: \"\\f4cd\" } .fa-paragraph:before { content: \"\\f1dd\" } .fa-parking:before { content: \"\\f540\" } .fa-passport:before { content: \"\\f5ab\" } .fa-pastafarianism:before { content: \"\\f67b\" } .fa-paste:before { content: \"\\f0ea\" } .fa-patreon:before { content: \"\\f3d9\" } .fa-pause:before { content: \"\\f04c\" } .fa-pause-circle:before { content: \"\\f28b\" } .fa-paw:before { content: \"\\f1b0\" } .fa-paypal:before { content: \"\\f1ed\" } .fa-peace:before { content: \"\\f67c\" } .fa-pen:before { content: \"\\f304\" } .fa-pen-alt:before { content: \"\\f305\" } .fa-pen-fancy:before { content: \"\\f5ac\" } .fa-pen-nib:before { content: \"\\f5ad\" } .fa-pen-square:before { content: \"\\f14b\" } .fa-pencil-alt:before { content: \"\\f303\" } .fa-pencil-ruler:before { content: \"\\f5ae\" } .fa-people-carry:before { content: \"\\f4ce\" } .fa-percent:before { content: \"\\f295\" } .fa-percentage:before { content: \"\\f541\" } .fa-periscope:before { content: \"\\f3da\" } .fa-phabricator:before { content: \"\\f3db\" } .fa-phoenix-framework:before { content: \"\\f3dc\" } .fa-phoenix-squadron:before { content: \"\\f511\" } .fa-phone:before { content: \"\\f095\" } .fa-phone-slash:before { content: \"\\f3dd\" } .fa-phone-square:before { content: \"\\f098\" } .fa-phone-volume:before { content: \"\\f2a0\" } .fa-php:before { content: \"\\f457\" } .fa-pied-piper:before { content: \"\\f2ae\" } .fa-pied-piper-alt:before { content: \"\\f1a8\" } .fa-pied-piper-hat:before { content: \"\\f4e5\" } .fa-pied-piper-pp:before { content: \"\\f1a7\" } .fa-piggy-bank:before { content: \"\\f4d3\" } .fa-pills:before { content: \"\\f484\" } .fa-pinterest:before { content: \"\\f0d2\" } .fa-pinterest-p:before { content: \"\\f231\" } .fa-pinterest-square:before { content: \"\\f0d3\" } .fa-place-of-worship:before { content: \"\\f67f\" } .fa-plane:before { content: \"\\f072\" } .fa-plane-arrival:before { content: \"\\f5af\" } .fa-plane-departure:before { content: \"\\f5b0\" } .fa-play:before { content: \"\\f04b\" } .fa-play-circle:before { content: \"\\f144\" } .fa-playstation:before { content: \"\\f3df\" } .fa-plug:before { content: \"\\f1e6\" } .fa-plus:before { content: \"\\f067\" } .fa-plus-circle:before { content: \"\\f055\" } .fa-plus-square:before { content: \"\\f0fe\" } .fa-podcast:before { content: \"\\f2ce\" } .fa-poll:before { content: \"\\f681\" } .fa-poll-h:before { content: \"\\f682\" } .fa-poo:before { content: \"\\f2fe\" } .fa-poop:before { content: \"\\f619\" } .fa-portrait:before { content: \"\\f3e0\" } .fa-pound-sign:before { content: \"\\f154\" } .fa-power-off:before { content: \"\\f011\" } .fa-pray:before { content: \"\\f683\" } .fa-praying-hands:before { content: \"\\f684\" } .fa-prescription:before { content: \"\\f5b1\" } .fa-prescription-bottle:before { content: \"\\f485\" } .fa-prescription-bottle-alt:before { content: \"\\f486\" } .fa-print:before { content: \"\\f02f\" } .fa-procedures:before { content: \"\\f487\" } .fa-product-hunt:before { content: \"\\f288\" } .fa-project-diagram:before { content: \"\\f542\" } .fa-pushed:before { content: \"\\f3e1\" } .fa-puzzle-piece:before { content: \"\\f12e\" } .fa-python:before { content: \"\\f3e2\" } .fa-qq:before { content: \"\\f1d6\" } .fa-qrcode:before { content: \"\\f029\" } .fa-question:before { content: \"\\f128\" } .fa-question-circle:before { content: \"\\f059\" } .fa-quidditch:before { content: \"\\f458\" } .fa-quinscape:before { content: \"\\f459\" } .fa-quora:before { content: \"\\f2c4\" } .fa-quote-left:before { content: \"\\f10d\" } .fa-quote-right:before { content: \"\\f10e\" } .fa-quran:before { content: \"\\f687\" } .fa-r-project:before { content: \"\\f4f7\" } .fa-random:before { content: \"\\f074\" } .fa-ravelry:before { content: \"\\f2d9\" } .fa-react:before { content: \"\\f41b\" } .fa-readme:before { content: \"\\f4d5\" } .fa-rebel:before { content: \"\\f1d0\" } .fa-receipt:before { content: \"\\f543\" } .fa-recycle:before { content: \"\\f1b8\" } .fa-red-river:before { content: \"\\f3e3\" } .fa-reddit:before { content: \"\\f1a1\" } .fa-reddit-alien:before { content: \"\\f281\" } .fa-reddit-square:before { content: \"\\f1a2\" } .fa-redo:before { content: \"\\f01e\" } .fa-redo-alt:before { content: \"\\f2f9\" } .fa-registered:before { content: \"\\f25d\" } .fa-rendact:before { content: \"\\f3e4\" } .fa-renren:before { content: \"\\f18b\" } .fa-reply:before { content: \"\\f3e5\" } .fa-reply-all:before { content: \"\\f122\" } .fa-replyd:before { content: \"\\f3e6\" } .fa-researchgate:before { content: \"\\f4f8\" } .fa-resolving:before { content: \"\\f3e7\" } .fa-retweet:before { content: \"\\f079\" } .fa-rev:before { content: \"\\f5b2\" } .fa-ribbon:before { content: \"\\f4d6\" } .fa-road:before { content: \"\\f018\" } .fa-robot:before { content: \"\\f544\" } .fa-rocket:before { content: \"\\f135\" } .fa-rocketchat:before { content: \"\\f3e8\" } .fa-rockrms:before { content: \"\\f3e9\" } .fa-route:before { content: \"\\f4d7\" } .fa-rss:before { content: \"\\f09e\" } .fa-rss-square:before { content: \"\\f143\" } .fa-ruble-sign:before { content: \"\\f158\" } .fa-ruler:before { content: \"\\f545\" } .fa-ruler-combined:before { content: \"\\f546\" } .fa-ruler-horizontal:before { content: \"\\f547\" } .fa-ruler-vertical:before { content: \"\\f548\" } .fa-rupee-sign:before { content: \"\\f156\" } .fa-sad-cry:before { content: \"\\f5b3\" } .fa-sad-tear:before { content: \"\\f5b4\" } .fa-safari:before { content: \"\\f267\" } .fa-sass:before { content: \"\\f41e\" } .fa-save:before { content: \"\\f0c7\" } .fa-schlix:before { content: \"\\f3ea\" } .fa-school:before { content: \"\\f549\" } .fa-screwdriver:before { content: \"\\f54a\" } .fa-scribd:before { content: \"\\f28a\" } .fa-search:before { content: \"\\f002\" } .fa-search-dollar:before { content: \"\\f688\" } .fa-search-location:before { content: \"\\f689\" } .fa-search-minus:before { content: \"\\f010\" } .fa-search-plus:before { content: \"\\f00e\" } .fa-searchengin:before { content: \"\\f3eb\" } .fa-seedling:before { content: \"\\f4d8\" } .fa-sellcast:before { content: \"\\f2da\" } .fa-sellsy:before { content: \"\\f213\" } .fa-server:before { content: \"\\f233\" } .fa-servicestack:before { content: \"\\f3ec\" } .fa-shapes:before { content: \"\\f61f\" } .fa-share:before { content: \"\\f064\" } .fa-share-alt:before { content: \"\\f1e0\" } .fa-share-alt-square:before { content: \"\\f1e1\" } .fa-share-square:before { content: \"\\f14d\" } .fa-shekel-sign:before { content: \"\\f20b\" } .fa-shield-alt:before { content: \"\\f3ed\" } .fa-ship:before { content: \"\\f21a\" } .fa-shipping-fast:before { content: \"\\f48b\" } .fa-shirtsinbulk:before { content: \"\\f214\" } .fa-shoe-prints:before { content: \"\\f54b\" } .fa-shopping-bag:before { content: \"\\f290\" } .fa-shopping-basket:before { content: \"\\f291\" } .fa-shopping-cart:before { content: \"\\f07a\" } .fa-shopware:before { content: \"\\f5b5\" } .fa-shower:before { content: \"\\f2cc\" } .fa-shuttle-van:before { content: \"\\f5b6\" } .fa-sign:before { content: \"\\f4d9\" } .fa-sign-in-alt:before { content: \"\\f2f6\" } .fa-sign-language:before { content: \"\\f2a7\" } .fa-sign-out-alt:before { content: \"\\f2f5\" } .fa-signal:before { content: \"\\f012\" } .fa-signature:before { content: \"\\f5b7\" } .fa-simplybuilt:before { content: \"\\f215\" } .fa-sistrix:before { content: \"\\f3ee\" } .fa-sitemap:before { content: \"\\f0e8\" } .fa-sith:before { content: \"\\f512\" } .fa-skull:before { content: \"\\f54c\" } .fa-skyatlas:before { content: \"\\f216\" } .fa-skype:before { content: \"\\f17e\" } .fa-slack:before { content: \"\\f198\" } .fa-slack-hash:before { content: \"\\f3ef\" } .fa-sliders-h:before { content: \"\\f1de\" } .fa-slideshare:before { content: \"\\f1e7\" } .fa-smile:before { content: \"\\f118\" } .fa-smile-beam:before { content: \"\\f5b8\" } .fa-smile-wink:before { content: \"\\f4da\" } .fa-smoking:before { content: \"\\f48d\" } .fa-smoking-ban:before { content: \"\\f54d\" } .fa-snapchat:before { content: \"\\f2ab\" } .fa-snapchat-ghost:before { content: \"\\f2ac\" } .fa-snapchat-square:before { content: \"\\f2ad\" } .fa-snowflake:before { content: \"\\f2dc\" } .fa-socks:before { content: \"\\f696\" } .fa-solar-panel:before { content: \"\\f5ba\" } .fa-sort:before { content: \"\\f0dc\" } .fa-sort-alpha-down:before { content: \"\\f15d\" } .fa-sort-alpha-up:before { content: \"\\f15e\" } .fa-sort-amount-down:before { content: \"\\f160\" } .fa-sort-amount-up:before { content: \"\\f161\" } .fa-sort-down:before { content: \"\\f0dd\" } .fa-sort-numeric-down:before { content: \"\\f162\" } .fa-sort-numeric-up:before { content: \"\\f163\" } .fa-sort-up:before { content: \"\\f0de\" } .fa-soundcloud:before { content: \"\\f1be\" } .fa-spa:before { content: \"\\f5bb\" } .fa-space-shuttle:before { content: \"\\f197\" } .fa-speakap:before { content: \"\\f3f3\" } .fa-spinner:before { content: \"\\f110\" } .fa-splotch:before { content: \"\\f5bc\" } .fa-spotify:before { content: \"\\f1bc\" } .fa-spray-can:before { content: \"\\f5bd\" } .fa-square:before { content: \"\\f0c8\" } .fa-square-full:before { content: \"\\f45c\" } .fa-square-root-alt:before { content: \"\\f698\" } .fa-squarespace:before { content: \"\\f5be\" } .fa-stack-exchange:before { content: \"\\f18d\" } .fa-stack-overflow:before { content: \"\\f16c\" } .fa-stamp:before { content: \"\\f5bf\" } .fa-star:before { content: \"\\f005\" } .fa-star-and-crescent:before { content: \"\\f699\" } .fa-star-half:before { content: \"\\f089\" } .fa-star-half-alt:before { content: \"\\f5c0\" } .fa-star-of-david:before { content: \"\\f69a\" } .fa-star-of-life:before { content: \"\\f621\" } .fa-staylinked:before { content: \"\\f3f5\" } .fa-steam:before { content: \"\\f1b6\" } .fa-steam-square:before { content: \"\\f1b7\" } .fa-steam-symbol:before { content: \"\\f3f6\" } .fa-step-backward:before { content: \"\\f048\" } .fa-step-forward:before { content: \"\\f051\" } .fa-stethoscope:before { content: \"\\f0f1\" } .fa-sticker-mule:before { content: \"\\f3f7\" } .fa-sticky-note:before { content: \"\\f249\" } .fa-stop:before { content: \"\\f04d\" } .fa-stop-circle:before { content: \"\\f28d\" } .fa-stopwatch:before { content: \"\\f2f2\" } .fa-store:before { content: \"\\f54e\" } .fa-store-alt:before { content: \"\\f54f\" } .fa-strava:before { content: \"\\f428\" } .fa-stream:before { content: \"\\f550\" } .fa-street-view:before { content: \"\\f21d\" } .fa-strikethrough:before { content: \"\\f0cc\" } .fa-stripe:before { content: \"\\f429\" } .fa-stripe-s:before { content: \"\\f42a\" } .fa-stroopwafel:before { content: \"\\f551\" } .fa-studiovinari:before { content: \"\\f3f8\" } .fa-stumbleupon:before { content: \"\\f1a4\" } .fa-stumbleupon-circle:before { content: \"\\f1a3\" } .fa-subscript:before { content: \"\\f12c\" } .fa-subway:before { content: \"\\f239\" } .fa-suitcase:before { content: \"\\f0f2\" } .fa-suitcase-rolling:before { content: \"\\f5c1\" } .fa-sun:before { content: \"\\f185\" } .fa-superpowers:before { content: \"\\f2dd\" } .fa-superscript:before { content: \"\\f12b\" } .fa-supple:before { content: \"\\f3f9\" } .fa-surprise:before { content: \"\\f5c2\" } .fa-swatchbook:before { content: \"\\f5c3\" } .fa-swimmer:before { content: \"\\f5c4\" } .fa-swimming-pool:before { content: \"\\f5c5\" } .fa-synagogue:before { content: \"\\f69b\" } .fa-sync:before { content: \"\\f021\" } .fa-sync-alt:before { content: \"\\f2f1\" } .fa-syringe:before { content: \"\\f48e\" } .fa-table:before { content: \"\\f0ce\" } .fa-table-tennis:before { content: \"\\f45d\" } .fa-tablet:before { content: \"\\f10a\" } .fa-tablet-alt:before { content: \"\\f3fa\" } .fa-tablets:before { content: \"\\f490\" } .fa-tachometer-alt:before { content: \"\\f3fd\" } .fa-tag:before { content: \"\\f02b\" } .fa-tags:before { content: \"\\f02c\" } .fa-tape:before { content: \"\\f4db\" } .fa-tasks:before { content: \"\\f0ae\" } .fa-taxi:before { content: \"\\f1ba\" } .fa-teamspeak:before { content: \"\\f4f9\" } .fa-teeth:before { content: \"\\f62e\" } .fa-teeth-open:before { content: \"\\f62f\" } .fa-telegram:before { content: \"\\f2c6\" } .fa-telegram-plane:before { content: \"\\f3fe\" } .fa-tencent-weibo:before { content: \"\\f1d5\" } .fa-terminal:before { content: \"\\f120\" } .fa-text-height:before { content: \"\\f034\" } .fa-text-width:before { content: \"\\f035\" } .fa-th:before { content: \"\\f00a\" } .fa-th-large:before { content: \"\\f009\" } .fa-th-list:before { content: \"\\f00b\" } .fa-the-red-yeti:before { content: \"\\f69d\" } .fa-theater-masks:before { content: \"\\f630\" } .fa-themeco:before { content: \"\\f5c6\" } .fa-themeisle:before { content: \"\\f2b2\" } .fa-thermometer:before { content: \"\\f491\" } .fa-thermometer-empty:before { content: \"\\f2cb\" } .fa-thermometer-full:before { content: \"\\f2c7\" } .fa-thermometer-half:before { content: \"\\f2c9\" } .fa-thermometer-quarter:before { content: \"\\f2ca\" } .fa-thermometer-three-quarters:before { content: \"\\f2c8\" } .fa-thumbs-down:before { content: \"\\f165\" } .fa-thumbs-up:before { content: \"\\f164\" } .fa-thumbtack:before { content: \"\\f08d\" } .fa-ticket-alt:before { content: \"\\f3ff\" } .fa-times:before { content: \"\\f00d\" } .fa-times-circle:before { content: \"\\f057\" } .fa-tint:before { content: \"\\f043\" } .fa-tint-slash:before { content: \"\\f5c7\" } .fa-tired:before { content: \"\\f5c8\" } .fa-toggle-off:before { content: \"\\f204\" } .fa-toggle-on:before { content: \"\\f205\" } .fa-toolbox:before { content: \"\\f552\" } .fa-tooth:before { content: \"\\f5c9\" } .fa-torah:before { content: \"\\f6a0\" } .fa-torii-gate:before { content: \"\\f6a1\" } .fa-trade-federation:before { content: \"\\f513\" } .fa-trademark:before { content: \"\\f25c\" } .fa-traffic-light:before { content: \"\\f637\" } .fa-train:before { content: \"\\f238\" } .fa-transgender:before { content: \"\\f224\" } .fa-transgender-alt:before { content: \"\\f225\" } .fa-trash:before { content: \"\\f1f8\" } .fa-trash-alt:before { content: \"\\f2ed\" } .fa-tree:before { content: \"\\f1bb\" } .fa-trello:before { content: \"\\f181\" } .fa-tripadvisor:before { content: \"\\f262\" } .fa-trophy:before { content: \"\\f091\" } .fa-truck:before { content: \"\\f0d1\" } .fa-truck-loading:before { content: \"\\f4de\" } .fa-truck-monster:before { content: \"\\f63b\" } .fa-truck-moving:before { content: \"\\f4df\" } .fa-truck-pickup:before { content: \"\\f63c\" } .fa-tshirt:before { content: \"\\f553\" } .fa-tty:before { content: \"\\f1e4\" } .fa-tumblr:before { content: \"\\f173\" } .fa-tumblr-square:before { content: \"\\f174\" } .fa-tv:before { content: \"\\f26c\" } .fa-twitch:before { content: \"\\f1e8\" } .fa-twitter:before { content: \"\\f099\" } .fa-twitter-square:before { content: \"\\f081\" } .fa-typo3:before { content: \"\\f42b\" } .fa-uber:before { content: \"\\f402\" } .fa-uikit:before { content: \"\\f403\" } .fa-umbrella:before { content: \"\\f0e9\" } .fa-umbrella-beach:before { content: \"\\f5ca\" } .fa-underline:before { content: \"\\f0cd\" } .fa-undo:before { content: \"\\f0e2\" } .fa-undo-alt:before { content: \"\\f2ea\" } .fa-uniregistry:before { content: \"\\f404\" } .fa-universal-access:before { content: \"\\f29a\" } .fa-university:before { content: \"\\f19c\" } .fa-unlink:before { content: \"\\f127\" } .fa-unlock:before { content: \"\\f09c\" } .fa-unlock-alt:before { content: \"\\f13e\" } .fa-untappd:before { content: \"\\f405\" } .fa-upload:before { content: \"\\f093\" } .fa-usb:before { content: \"\\f287\" } .fa-user:before { content: \"\\f007\" } .fa-user-alt:before { content: \"\\f406\" } .fa-user-alt-slash:before { content: \"\\f4fa\" } .fa-user-astronaut:before { content: \"\\f4fb\" } .fa-user-check:before { content: \"\\f4fc\" } .fa-user-circle:before { content: \"\\f2bd\" } .fa-user-clock:before { content: \"\\f4fd\" } .fa-user-cog:before { content: \"\\f4fe\" } .fa-user-edit:before { content: \"\\f4ff\" } .fa-user-friends:before { content: \"\\f500\" } .fa-user-graduate:before { content: \"\\f501\" } .fa-user-lock:before { content: \"\\f502\" } .fa-user-md:before { content: \"\\f0f0\" } .fa-user-minus:before { content: \"\\f503\" } .fa-user-ninja:before { content: \"\\f504\" } .fa-user-plus:before { content: \"\\f234\" } .fa-user-secret:before { content: \"\\f21b\" } .fa-user-shield:before { content: \"\\f505\" } .fa-user-slash:before { content: \"\\f506\" } .fa-user-tag:before { content: \"\\f507\" } .fa-user-tie:before { content: \"\\f508\" } .fa-user-times:before { content: \"\\f235\" } .fa-users:before { content: \"\\f0c0\" } .fa-users-cog:before { content: \"\\f509\" } .fa-ussunnah:before { content: \"\\f407\" } .fa-utensil-spoon:before { content: \"\\f2e5\" } .fa-utensils:before { content: \"\\f2e7\" } .fa-vaadin:before { content: \"\\f408\" } .fa-vector-square:before { content: \"\\f5cb\" } .fa-venus:before { content: \"\\f221\" } .fa-venus-double:before { content: \"\\f226\" } .fa-venus-mars:before { content: \"\\f228\" } .fa-viacoin:before { content: \"\\f237\" } .fa-viadeo:before { content: \"\\f2a9\" } .fa-viadeo-square:before { content: \"\\f2aa\" } .fa-vial:before { content: \"\\f492\" } .fa-vials:before { content: \"\\f493\" } .fa-viber:before { content: \"\\f409\" } .fa-video:before { content: \"\\f03d\" } .fa-video-slash:before { content: \"\\f4e2\" } .fa-vihara:before { content: \"\\f6a7\" } .fa-vimeo:before { content: \"\\f40a\" } .fa-vimeo-square:before { content: \"\\f194\" } .fa-vimeo-v:before { content: \"\\f27d\" } .fa-vine:before { content: \"\\f1ca\" } .fa-vk:before { content: \"\\f189\" } .fa-vnv:before { content: \"\\f40b\" } .fa-volleyball-ball:before { content: \"\\f45f\" } .fa-volume-down:before { content: \"\\f027\" } .fa-volume-off:before { content: \"\\f026\" } .fa-volume-up:before { content: \"\\f028\" } .fa-vuejs:before { content: \"\\f41f\" } .fa-walking:before { content: \"\\f554\" } .fa-wallet:before { content: \"\\f555\" } .fa-warehouse:before { content: \"\\f494\" } .fa-weebly:before { content: \"\\f5cc\" } .fa-weibo:before { content: \"\\f18a\" } .fa-weight:before { content: \"\\f496\" } .fa-weight-hanging:before { content: \"\\f5cd\" } .fa-weixin:before { content: \"\\f1d7\" } .fa-whatsapp:before { content: \"\\f232\" } .fa-whatsapp-square:before { content: \"\\f40c\" } .fa-wheelchair:before { content: \"\\f193\" } .fa-whmcs:before { content: \"\\f40d\" } .fa-wifi:before { content: \"\\f1eb\" } .fa-wikipedia-w:before { content: \"\\f266\" } .fa-window-close:before { content: \"\\f410\" } .fa-window-maximize:before { content: \"\\f2d0\" } .fa-window-minimize:before { content: \"\\f2d1\" } .fa-window-restore:before { content: \"\\f2d2\" } .fa-windows:before { content: \"\\f17a\" } .fa-wine-glass:before { content: \"\\f4e3\" } .fa-wine-glass-alt:before { content: \"\\f5ce\" } .fa-wix:before { content: \"\\f5cf\" } .fa-wolf-pack-battalion:before { content: \"\\f514\" } .fa-won-sign:before { content: \"\\f159\" } .fa-wordpress:before { content: \"\\f19a\" } .fa-wordpress-simple:before { content: \"\\f411\" } .fa-wpbeginner:before { content: \"\\f297\" } .fa-wpexplorer:before { content: \"\\f2de\" } .fa-wpforms:before { content: \"\\f298\" } .fa-wrench:before { content: \"\\f0ad\" } .fa-x-ray:before { content: \"\\f497\" } .fa-xbox:before { content: \"\\f412\" } .fa-xing:before { content: \"\\f168\" } .fa-xing-square:before { content: \"\\f169\" } .fa-y-combinator:before { content: \"\\f23b\" } .fa-yahoo:before { content: \"\\f19e\" } .fa-yandex:before { content: \"\\f413\" } .fa-yandex-international:before { content: \"\\f414\" } .fa-yelp:before { content: \"\\f1e9\" } .fa-yen-sign:before { content: \"\\f157\" } .fa-yin-yang:before { content: \"\\f6ad\" } .fa-yoast:before { content: \"\\f2b1\" } .fa-youtube:before { content: \"\\f167\" } .fa-youtube-square:before { content: \"\\f431\" } .fa-zhihu:before { content: \"\\f63f\" } .sr-only { border: 0; clip: rect(0, 0, 0, 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px } .sr-only-focusable:active, .sr-only-focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto }"},{"title":"","date":"2020-09-06T13:26:54.027Z","updated":"1985-12-21T08:57:10.000Z","comments":true,"path":"aboutme/js/jquery.min.js","permalink":"https://brynhild.online/aboutme/js/jquery.min.js","excerpt":"","text":"/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */ !function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(e,t){\"use strict\";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return\"function\"==typeof t&&\"number\"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement(\"script\");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?l[c.call(e)]||\"object\":typeof e}var b=\"3.3.1\",w=function(e,t){return new w.fn.init(e,t)},T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;w.fn=w.prototype={jquery:\"3.3.1\",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e1?(n=[e,e,\"\",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,o=i(e,t),a=o.length;while(a--)e[r=O(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(B,\"$1\"));return r[b]?se(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||\"\")||oe.error(\"unsupported lang: \"+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"))return(n=n.toLowerCase())===e||0===n.indexOf(e+\"-\")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),A.test(i[1])&&w.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,q=w(r);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){for(var e=0;e1&&(O[e]||w.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}});var M=/[^\\x20\\t\\r\\n\\f]+/g;function R(e){var t={};return w.each(e.match(M)||[],function(e,n){t[n]=!0}),t}w.Callbacks=function(e){e=\"string\"==typeof e?R(e):w.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1){n=a.shift();while(++s-1)o.splice(n,1),n-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n=\"\",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=\"\"),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l};function I(e){return e}function W(e){throw e}function $(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.extend({Deferred:function(t){var n=[[\"notify\",\"progress\",w.Callbacks(\"memory\"),w.Callbacks(\"memory\"),2],[\"resolve\",\"done\",w.Callbacks(\"once memory\"),w.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",w.Callbacks(\"once memory\"),w.Callbacks(\"once memory\"),1,\"rejected\"]],r=\"pending\",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},\"catch\":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=g(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+\"With\"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,l=function(){var e,l;if(!(t=o&&(r!==W&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),e.setTimeout(c))}}return w.Deferred(function(e){n[0][3].add(a(0,e,g(i)?i:I,e.notifyWith)),n[1][3].add(a(0,e,g(t)?t:I)),n[2][3].add(a(0,e,g(r)?r:W))}).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+\"With\"](this===o?void 0:this,arguments),this},o[t[0]+\"With\"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=w.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t0||F.resolveWith(r,[w]))}}),w.ready.then=F.then;function _(){r.removeEventListener(\"DOMContentLoaded\",_),e.removeEventListener(\"load\",_),w.ready()}\"complete\"===r.readyState||\"loading\"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(w.ready):(r.addEventListener(\"DOMContentLoaded\",_),e.addEventListener(\"load\",_));var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===x(n)){i=!0;for(s in n)z(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,g(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t),a=function(){w.dequeue(e,t)};\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return J.get(e,n)||J.access(e,n,{empty:w.Callbacks(\"once memory\").add(function(){J.remove(e,[t+\"queue\",n])})})}}),w.fn.extend({queue:function(e,t){var n=2;return\"string\"!=typeof e&&(t=e,e=\"fx\",n--),arguments.length"}],"posts":[{"title":"HYAsstSTM32 dev progress","slug":"HYAsstSTM32Progress","date":"2021-02-04T09:08:23.000Z","updated":"2021-09-12T09:01:04.513Z","comments":true,"path":"HYAsstSTM32Progress/","link":"","permalink":"https://brynhild.online/HYAsstSTM32Progress/","excerpt":"HongYanAsst项目硬件部分 HongYanAsstArduino及HongYanAsstSTM32 Dev log","text":"HongYanAsst项目硬件部分 HongYanAsstArduino及HongYanAsstSTM32 Dev log 硬件开发总体分为两个阶段, HongYanAsstArduino阶段和HongYanAsstSTM32阶段, 主要区别是MCU不同. 2020/10/29 HYAsstArduino开发正式开始元件全部到齐, 硬件开发正式开始 Photos 2020/10/30 阳台GPS调试因为天线的电缆长度不够, 所以只能在阳台调试GPS功能. 虽然只是接近11月, 但是晚间的阳台感觉已经到了12月, 需要穿羽绒服才能抵御严寒.当时大概调了不到半个小时就调通了, 所以也没被冻到. Photos 2020/11/14 HYAsstArduino THE ORIGIN de pre-release具有GSM联网和WLAN联网能力的原型机. 1602LCD屏幕用于调试信息展示, 按键单击切换数据页面, 长按超过三秒钟切换联网类型. Photos 实现的功能:GPS解析获取MPU6050三轴倾角通过ESP8266的数据上传通过GSM网络的数据上传 2020/11/16 校内户外调试, 主要测试WG-84转GCJ-02算法的准确性.发现似乎拟合得还不错. 2020/11/20 居庸关长距离实景测试主要测试两种联机方式和GPS定位在实际使用场景中的稳定性和精确度.去程使用GSM, 回程使用WLAN联网, 均为出现掉线情况; GPS定位点留下来的轨迹也基本与佳明码表(GARMIN Edge 520 plus)记录的轨迹基本拟合. Photos 2020/11/22 蟒山 户外调试主要测试山区通信能力和颠簸路面事故侦测的精确度.结果发现还不错. Photos 2020/11/24 HYAsstArduino THE ORIGINHYAsstArduino THE ORIGIN是在pre-release版本基础上的改良版.加入红外遥控来控制LED屏幕上的数据字段, 并且使用一块Li14500电池对设备供电. Photos 2020/11/27 实现告警功能在HYAsstArduino THE ORIGIN的基础上加入事故侦测及告警功能. Photos 实现了HongYanAsstArduino所有预期的核心功能, 进入迭代阶段. 2020/11/25-27 ASKR YGGDRASILLS pre-release续航测试调试项目调试结果ESP8266方案续航测试 (900mAh)113minSIM800C方案续航测试 (900mAh)185min由于准备使用的电池为6500mAh, 所以续航时间预计在22小时以上. 2020/11/26-27 尝试向ArduinoUNO移植并失败对应单片机ATMEGA328PU 2020/11/27 ASKR YGGDRASILLS Photos 迭代说明 取消LCD数据展示, 使用LED灯作为交互接口.弃用ESP8266, 改用SIM800C接入网络. 2020/11/28 基于ASKR YGGDRASILLS的户外调试本次调试主要测试真实使用场景下微信小程序的使用体验. Photos 2020/11/29 SORYU KYOKO ZEPPELIN Photos 迭代说明 弃用面包板, 使用主板铜柱固定各功能模块.暂时放弃LED交互接口及用来稳定供电的电容.更好的走线, 更坚固的框架, 更友好的外形, 便携性提升. 2020/12/02 SORYU ASUKA RANGURESORYU KYOKO ZEPPELIN的改良版 Photos 迭代说明 重新启用LED交互接口及电容, 将其整合到一张板上(为下一个版本做准备).SIM800C弃用胶棒天线, 换用弹簧天线, 进一步提升便携性. 2020/12/05 RAMIEL OCTAHEDRON Photos 迭代说明 重新制作灯板, 增加线路整理功能, 并整合到设备上部.启用NI-MH AA 5600mAh 4.8V电池阵列并置于设备底部, 理论续航延长至23小时.优化内存占用, 将静态内容优先存储至Flash.事故侦测倾角维护时间增长至150个算法周期. 2020/12/07 RAMIEL FINAL最后用来交导论大作业的版本. Photos 迭代说明 整理了排线, 提升便携性.加固固定部分, 提升便携性.优化灯板电气性能, 重写LED灯控代码, 延长续航. 灯板特写 Photos 2020/12/31 HYAsstSTM32开发准备开始 Photos 从此开始使用platformIO试图使用Arduino架构写STM32. 2021/01/08 HYAsstHybrid成功使用Arduino构架实现简单的数据获取和上传, 但是会莫名其妙地死机, 故决定换用STM32Cube框架. Photos 2021/01/14 HYAsstSTM32 THE ORIGIN学习了STM32Cube框架并实现所有功能. 到上个版本为止通信协议一直使用HTTP协议, 在这个版本中使用MQTT协议. Photos 2021/01/14-15 HYAsstSTM32 THE ORIGIN续航测试 Photos 电池容量920mAh测试序号测试结果1439min2227min3206min4210min准备使用的电池容量为10Ah, 续航估计为38小时. 2021/01/16 HYAsstSTM32 ADV整合到了洞洞板上 Photos 2021/01/16-18 HYAsstSTM32 ADV续航测试 Photos 电池容量920mAh测试序号测试结果1274min2268min3278min准备使用的电池容量为10Ah, 续航估计为49小时. 2021/01/17 开始绘制原理图与PCB板 Photos 2021/01/22 原理图绘制完成准备绘制PCB板 Photos 2021/01/23 HYAsstSTM32 PCB A Serious Rev.1第一版PCB将作为调试板使用.HYAsstSTM32 PCB A Serious命名为Axium Crisis Photos 由于元件排布过于紧密, 走线相当阴间. 2021/01/24 Axium Crisis Rev.2这一版基本确定元件的基本布局 Photos 2021/02/01 Axium Crisis Rev.7交付厂家打板的最终版本 Photos 2021/03/10 Axium Crisis Rev.7收到板子, 进行焊接和调试.由于打板周期中SIM卡槽断货，通信模块暂时无法测试，其余各功能区块功能正常. Photos 2021/05/01 启动封测启动封闭测试, 在实际环境中测试硬件各项参数 2021/07/05 封测结束封闭测试结束, 总结问题如下:条形设计重力矩较大, 外置安装重心不稳.LED灯珠亮度过亮, 辨识度极好但损失功率.按钮暴露在外, 易于误触.缺少充电提示及电力不足告警.电源规划不珂学, 通信模块会先于其他模块因欠压停止工作. 2021/07/10 二期开发开始总结封测时期提出的问题, 开始进行二期开发. 2021/07/29 HYAsstSTM32ADV SchHYAsstSTM32ADV alpha Fracture Ray 原理图绘制完成, 准备绘制PCB图纸. Photos 2021/08/05 HYAsstSTM32ADV PCBHYAsstSTM32ADV v2.3.21 alpha Fracture Ray 设计图纸定档, 准备交付生产. Photos 2021/08/23 H.Y.AsstSTM32ADV Shield v0.1 THE ORIGIN3D打印外壳H.Y.AsstSTM32ADV Shield v0.1 THE ORIGIN绘制完成, 准备交付生产. Photos To be continued..","categories":[],"tags":[]},{"title":"数据结构与算法导论 排序算法 C++描述","slug":"DSaAi","date":"2020-12-31T22:08:23.000Z","updated":"2021-06-07T08:31:53.899Z","comments":true,"path":"DSaAi/","link":"","permalink":"https://brynhild.online/DSaAi/","excerpt":"北京邮电大学信息与通信工程学院 2020年数据结构与算法导论课实验题目C++描述","text":"北京邮电大学信息与通信工程学院 2020年数据结构与算法导论课实验题目C++描述 实验六 排序实验目的通过选择下面五个题目之一进行实现，掌握如下内容： 掌握各种排序算法的实现方法和算法优劣 学习使用排序算法解决实际问题的能力 举一反三，提升扩展现有排序技术优化解决方法 实验内容题目1——基础实验使用简单数组实现下面各种排序算法，并进行比较。 排序算法： 起泡排序 直接插入排序 简单选择排序 希尔排序 快速排序 堆排序 归并排序 计数排序 桶排序 基数排序 要求: 测试数据分成三类：正序、逆序、随机数据 对于这三类数据，比较上述排序算法中关键字的比较次数和移动次数（其中关键字交换计为3 次移动） 对于这三类数据，比较上述排序算法中不同算法的执行时间，精确到微秒 对2 和3 的结果进行分析，验证上述各种算法的时间复杂度 编写测试main()函数测试排序算法的正确性。 注意: 我写的都是从小到大排的. 冒泡排序每次把最大的或最小的冒上去或者沉下来. 复杂度 $O(n^2)$, 在随机数据下比剩下俩$O(n^2)$的要快一点. 12345678910111213141516171819signed main ()&#123; register int n=readu(), tmpn=n-1, pos; for (register int i=0; i^n; ++ i) data[i]=read(); register bool flag=true; for (register int i=0; i^tmpn &amp;&amp; flag; ++ i) &#123; flag = false, pos = tmpn-i; for (register int j=0; j^pos; ++ j) &#123; if (data[j] &gt; data[j+1]) &#123; swapp(data[j], data[j+1]); flag=true; &#125; &#125; &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 插入排序维护一个有序列, 从无序列中依次挑元素插入到有序列中的相应位置. 复杂度 $O(n^2)$ 123456789101112131415signed main ()&#123; register int n=readu(), tmpn=n-1, pos, tmp; for (register int i=0; i^n; ++ i) data[i]=read(); for (register int i=0; i^tmpn; ++ i) &#123; pos = i, tmp = data[i+1]; while (pos+1 &amp;&amp; data[pos]&gt;tmp) data[pos+1]=data[pos --]; data[pos+1] = tmp; &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 选择排序维护一个有序列, 从无序列中选择元素依次加入到有序列的相应位置. 复杂度 $O(n^2)$ 123456789101112131415signed main ()&#123; register int n=readu(), tmpn=n-1, pos=0; for (register int i=0; i^n; ++ i) data[i]=read(); for (register int i=0; i^tmpn; pos = ++ i) &#123; for (register int j=i+1; j^n; ++ j) &#123; pos = data[pos]&lt;data[j]? pos:j; &#125; if (i^pos) swapp(data[i], data[pos]); &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 双向选择排序常数小一点. 注意: 小心小区间内最大值和最小值是同一个. 123456789101112131415161718192021signed main ()&#123; register int n=readu(), posl, posr; register int l=0, r=n-1; for (register int i=0; i^n; ++ i) data[i]=read(); while (l &lt; r) &#123; posl = l, posr = r; for (register int i=l; i&lt;=r; ++ i) &#123; posl = data[posl]&lt;data[i]? posl:i; posr = data[posr]&gt;data[i]? posr:i; &#125; posr = posr^l? posr:posl; if (posl^l) swapp(data[posl], data[l]); if (posr^r) swapp(data[posr], data[r]); ++l, -- r; &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 希尔排序更快的插入排序 插入排序的最好情况: 序列已经有序, 理想复杂度为 $O(n)$. 故先使用一些手段使序列基本有序. 将序列分为不相连的若干子区间(设间隔为gap, 为了方便处理), 在子区间内进行插入排序, 接着逐渐缩小gap直到gap=1进行最后一次插入排序. 12345678910111213141516171819signed main ()&#123; register int n=readu(), tmpn=n-1, pos, tmp, grpcnt; for (register int i=0; i^n; ++ i) data[i]=read(); register int gap=n&gt;&gt;1; while (gap) &#123; grpcnt = n-gap; for (register int i=0; i^grpcnt; ++ i) &#123; pos = i, tmp = data[i+gap]; while (pos&gt;=0 &amp;&amp; data[pos]&gt;tmp) data[pos+gap]=data[pos], pos-=gap; data[pos+gap] = tmp; &#125; gap &gt;&gt;= 1; &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 快速排序通过一次排序将一个序列分为两部分, 其中一部分的数据都比另外一部分中的小, 然后对两个子序列继续进行快速排序. 复杂度 $O(nlogn)$ 1234567891011121314151617181920212223inline void qsort (register int L, register int R)&#123; register int l=L, r=R, mid=data[(L+R)&gt;&gt;1]; while (l &lt; r) &#123; while (data[l] &lt; mid) ++ l; while (data[r] &gt; mid) -- r; if (l &lt;= r) swap(data[l ++], data[r --]); &#125; if (l &lt; R) qsort (l, R); if (r &gt; L) qsort (L, r);&#125;signed main ()&#123; register int n=readu(); for (register int i=0; i^n; ++ i) data[i]=read(); qsort (0, n-1); for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 非递归: 1234567891011121314151617181920212223242526signed main ()&#123; register int n=readu(); for (register int i=0; i^n; ++ i) data[i]=read(); register int l, r, mid; pair&lt;int, int&gt; stp; stack&lt;pair&lt;int, int&gt; &gt; s; s.push(make_pair(0, n-1)); while (!s.empty()) &#123; stp = s.top (); s.pop (); l=stp.first, r=stp.second, mid=data[(l+r)&gt;&gt;1]; while (l &lt; r) &#123; while (data[l] &lt; mid) ++ l; while (data[r] &gt; mid) -- r; if (l &lt;= r) swap(data[l ++], data[r --]); &#125; if (l &lt; stp.second) s.push (make_pair(l, stp.second)); if (r &gt; stp.first ) s.push (make_pair(stp.first , r)); &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 堆排序手写版: 1234567891011121314151617181920int data[maxn];inline void swift(int rt, int len) &#123; register int pos=rt&lt;&lt;1; while (pos&lt;=len) &#123; if(pos&lt;len &amp;&amp; data[pos|1]&lt;data[pos]) pos |= 1; if (data[rt]&lt;data[pos]) return; swapp(data[rt], data[pos]); rt = pos, pos=rt&lt;&lt;1; &#125;&#125;signed main () &#123; register int n = read(); for (register int i=1; i&lt;=n; ++ i) data[i]=read(); for (register int i=n&gt;&gt;1; i; -- i) swift(i, n); for (register int i=n; i; -- i) &#123; write(data[1]); pt(&#x27; &#x27;); swapp(data[1], data[i]); swift(1, i-1); &#125; return fwrite (but, 1, _p3-but, stdout), 0;&#125; 用STL实现: 123456789101112signed main ()&#123; register int n=readu(); register vector&lt;int&gt; vac; for (register int i=0; i^n; ++ i) vac.push_back(read ()); make_heap (vac.begin(), vac.end()); sort_heap (vac.begin(), vac.end(), cmp); for (register auto at=vac.begin(); at!=vac.end(); ++ at) &#123; write(*at), pt(&#x27; &#x27;); &#125; return fwrite (but, 1, _p3-but, stdout), 0;&#125; 归并排序分治. 123456789101112131415161718192021222324252627282930inline void merge (register int L, register int R)&#123; register int mid=((L+R++)&gt;&gt;1)+1, l=L, r=mid, pos=L; while (l^mid &amp;&amp; r^R) tmp[pos ++] = data[l]&lt;data[r]? data[l ++]:data[r ++]; while (l^mid) tmp[pos ++] = data[l ++]; while (r ^ R) tmp[pos ++] = data[r ++]; for (register int i=L; i^R; ++ i) data[i]=tmp[i];&#125;inline void mergeSort (register int L, register int R)&#123; if (!(L ^ R)) return; if (!((R-L) ^ 1)) &#123; if (data[L]&gt;data[R]) swapp(data[L], data[R]); return; &#125; mergeSort(L, (L+R)&gt;&gt;1), mergeSort(((L+R)&gt;&gt;1)+1, R); merge (L, R);&#125;signed main ()&#123; register int n=readu(); for (register int i=0; i^n; ++ i) data[i]=read(); mergeSort (0, n-1); for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 非递归写法: 12345678910111213141516171819202122232425inline void merge (register int L, register int mid, register int R)&#123; register int l=L, r=mid, pos=L; while (l^mid &amp;&amp; r^R) tmp[pos ++] = data[l]&lt;data[r]? data[l ++]:data[r ++]; while (l^mid) tmp[pos ++] = data[l ++]; while (r ^ R) tmp[pos ++] = data[r ++]; for (register int i=L; i^R; ++ i) data[i]=tmp[i];&#125;signed main ()&#123; register int n=readu(); for (register int i=0; i^n; ++ i) data[i]=read(); register int top, sst; for (register int stp=1, pos=0; stp&lt;n; stp&lt;&lt;=1, pos=0) &#123; sst = stp&lt;&lt;1, top = n - sst; while (pos &lt; top) merge(pos, pos+stp, pos+sst), pos += sst; if (pos &lt; n-stp) merge(pos, pos+stp, n); &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 计数排序&amp;桶排序12345678910signed main ()&#123; register int n=readu(); register map&lt;int, int&gt; M; for (register int i=0; i^n; ++ i) ++ M[read()]; for (register std::map&lt;int,int&gt;::iterator i=M.begin(); i!=M.end(); ++ i) &#123; while (i-&gt;second --) write(i-&gt;first), pt(&#x27; &#x27;); &#125; return fwrite (but, 1, _p3-but, stdout), 0;&#125; 桶排就不写了. 基数排序提取每一个数的特定数位, 并按照数位比较, 维护末端有序. 1234567891011121314151617signed main ()&#123; register int n=readu(), maxx=0; for (register int i=0; i^n; ++ i) data[i]=read(), maxx=maxx&gt;data[i]? maxx:data[i]; for (register int base=1; base&lt;=maxx; base*=10) &#123; for (register int i=0; i^10; ++ i) cnt[i] = 0; for (register int i=0; i^ n; ++ i) ++ cnt[dir[i]=(data[i]/base)%10]; for (register int i=1; i^10; ++ i) cnt[i] += cnt[i-1]; for (register int i=n-1; ~i; -- i) tmp[-- cnt[dir[i]]] = data[i]; for (register int i=0; i^ n; ++ i) data[i] = tmp[i]; &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 松式基排 以$256$为底, 能塞进L1高速缓存. 1234567891011121314151617181920signed main () &#123; register int n=readu(), maxa=0; register int data[maxn], tmpa[maxn], cnt[U]=&#123;0&#125;; for (register int i=0; i^n; ++ i) data[i]=read(), maxa=data[i]&gt;maxa? data[i]:maxa; register int top = 1; while (maxa &gt;&gt;= BIT) ++ top; for (register int base=0; base^top; ++ base) &#123; for (register int i=0; i^U; ++ i) cnt[i] = 0; for (register int i=0; i^n; ++ i) ++ cnt[getd(data[i], base)]; for (register int i=1; i^U; ++ i) cnt[i] += cnt[i-1]; for (register int i=n-1;~i; --i) tmpa[-- cnt[getd(data[i], base)]]=data[i]; for (register int i=0; i^n; ++ i) data[i] = tmpa[i]; &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; BUG 如果写成如下形式: 123456789101112131415161718signed main () &#123; register int n=readu(), maxa=0; register int data[maxn], tmpa[maxn], cnt[U]=&#123;0&#125;; for (register int i=0; i^n; ++ i) data[i]=read(), maxa=data[i]&gt;maxa? data[i]:maxa; for (register int base=0; maxa&gt;&gt;(BIT*base); ++ base) &#123; write(base), pt(&#x27; &#x27;), write(maxa&gt;&gt;(BIT*base)), pt(&#x27;\\n&#x27;); for (register int i=0; i^U; ++ i) cnt[i] = 0; for (register int i=0; i^n; ++ i) ++ cnt[getd(data[i], base)]; for (register int i=1; i^U; ++ i) cnt[i] += cnt[i-1]; for (register int i=n-1;~i; --i) tmpa[-- cnt[getd(data[i], base)]]=data[i]; for (register int i=0; i^n; ++ i) data[i] = tmpa[i]; &#125; for (register int i=0; i^n; ++ i) write(data[i]), pt(&#x27; &#x27;); return fwrite (but, 1, _p3-but, stdout), 0;&#125; 就会出现一些奇怪的状况导致循环无法结束. 例如: 输入数据 1234565326423623462346234623462346 输出数据为以下形式的循环: 1234410672 23462346410673 91649410674 358410675 1 怀疑是由于右移次数过多导致. 目前原因不明, 有望大佬指点! 附录 常用模板及操作fast IO1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;cstdio&gt;using namespace std;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],but[ELAS],*_p1=buf,*_p2=buf,*_p3=but,*_p4=but+ELAS;static int bit[20];#define gc() ((_p1==_p2)&amp;&amp;(_p2=(_p1=buf)+fread(buf,1,ELAS,stdin),_p1==_p2)?EOF:*_p1++)inline void pt(char c) &#123; (_p3==_p4)?(fwrite(_p3=but, 1, ELAS, stdout), *_p3++=c):(*_p3++=c);&#125;inline long long read () &#123; register long long x=0ll; register char c=gc(); register bool m=false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (!(c ^ &#x27;-&#x27;)) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;inline long long readu () &#123; register long long x=0ll; register char c=gc(); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c &gt;=&#x27;0&#x27; &amp;&amp; c &lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return x;&#125;inline long double readdou () &#123; register long double x=0.0; register char c=gc(); register bool m=false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (!(c ^ &#x27;-&#x27;)) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x * 10.0 + (c ^ &#x27;0&#x27;), c = gc(); if (!(c ^ &#x27;.&#x27;)) &#123; register long double s=0.1; c=gc(); while (c&gt;=&#x27;0&#x27; &amp;&amp; c&lt;=&#x27;9&#x27;) x = x + (c ^ &#x27;0&#x27;) * s, s/=10.0, c=gc(); &#125; return m? -x : x;&#125;inline long double readudou () &#123; register long double x=0.0; register char c=gc(); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x * 10.0 + (c ^ &#x27;0&#x27;), c = gc(); if (!(c ^ &#x27;.&#x27;)) &#123; register long double s=0.1; c=gc(); while (c&gt;=&#x27;0&#x27; &amp;&amp; c&lt;=&#x27;9&#x27;) x = x + (c ^ &#x27;0&#x27;) * s, s/=10.0, c=gc(); &#125; return x;&#125;template &lt;typename T&gt;inline void write (T x) &#123; if (!x) &#123;pt(&#x27;0&#x27;); return;&#125; register int pos=0; if (x &lt; 0) x = -x, pt (&#x27;-&#x27;); for (; x; x/=10) bit[++ pos] = x%10; for (register int i=pos; i; --i) pt(bit[i]^&#x27;0&#x27;);&#125;inline long long qpow (long long a, long long t) &#123; register long long base = a, ret = 1ll; while (t) &#123; if (t&amp;1) ret = ret * base; base = base * base, t &gt;&gt;= 1; &#125; return ret;&#125;inline void writedou (long double x, int res=9) &#123; if (x == 0.0) &#123; pt(&#x27;0&#x27;), pt(&#x27;.&#x27;); for (register int i=0; i^res; ++i) pt (&#x27;0&#x27;); return; &#125; else &#123; if (x &lt; 0.0) x=-x, pt(&#x27;-&#x27;); register long long clf=qpow(10, res); register long long flt=(long long)(x * clf) % clf; write ((long long) x); pt (&#x27;.&#x27;); register int pos = 0; for (; pos^res; flt/=10) bit[++ pos] = flt%10; for (register int i=pos; i; --i) pt(bit[i]^&#x27;0&#x27;); &#125;&#125;signed main ()&#123; //主程序代码内容 fwrite (but, 1, _p3-but, stdout); return 0;&#125; swap警告: 不能自己换自己 1#define swapp(x, y) ((x)^=(y)^=(x)^=(y)) a * b % mo12345inline long long mul_mod (register long long a,register long long b,register long long mo) &#123; register long long ret; __asm__ __volatile__ (&quot;\\tmull %%ebx\\n\\tdivl %%ecx\\n&quot; : &quot;=d&quot;(ret):&quot;a&quot;(a),&quot;b&quot;(b),&quot;c&quot;(mo)); return ret;&#125; 编译指令12345678910111213141516171819202122232425262728293031323334353637383940414243444546#pragma GCC optimize (2)#pragma GCC optimize (&quot;inline&quot;)#pragma GCC optimize (&quot;-fgcse&quot;)#pragma GCC optimize (&quot;-fgcse-lm&quot;)#pragma GCC optimize (&quot;-fipa-sra&quot;)#pragma GCC optimize (&quot;-ftree-pre&quot;)#pragma GCC optimize (&quot;-ftree-vrp&quot;)#pragma GCC optimize (&quot;-fpeephole2&quot;)#pragma GCC optimize (&quot;-ffast-math&quot;)#pragma GCC optimize (&quot;-fsched-spec&quot;)#pragma GCC optimize (&quot;unroll-loops&quot;)#pragma GCC optimize (&quot;-falign-jumps&quot;)#pragma GCC optimize (&quot;-falign-loops&quot;)#pragma GCC optimize (&quot;-falign-labels&quot;)#pragma GCC optimize (&quot;-fdevirtualize&quot;)#pragma GCC optimize (&quot;-fcaller-saves&quot;)#pragma GCC optimize (&quot;-fcrossjumping&quot;)#pragma GCC optimize (&quot;-fthread-jumps&quot;)#pragma GCC optimize (&quot;-funroll-loops&quot;)#pragma GCC optimize (&quot;-freorder-blocks&quot;)#pragma GCC optimize (&quot;-fschedule-insns&quot;)#pragma GCC optimize (&quot;inline-functions&quot;)#pragma GCC optimize (&quot;-ftree-tail-merge&quot;)#pragma GCC optimize (&quot;-fschedule-insns2&quot;)#pragma GCC optimize (&quot;-fstrict-aliasing&quot;)#pragma GCC optimize (&quot;-falign-functions&quot;)#pragma GCC optimize (&quot;-fcse-follow-jumps&quot;)#pragma GCC optimize (&quot;-fsched-interblock&quot;)#pragma GCC optimize (&quot;-fpartial-inlining&quot;)#pragma GCC optimize (&quot;no-stack-protector&quot;)#pragma GCC optimize (&quot;-freorder-functions&quot;)#pragma GCC optimize (&quot;-findirect-inlining&quot;)#pragma GCC optimize (&quot;-fhoist-adjacent-loads&quot;)#pragma GCC optimize (&quot;-frerun-cse-after-loop&quot;)#pragma GCC optimize (&quot;inline-small-functions&quot;)#pragma GCC optimize (&quot;-finline-small-functions&quot;)#pragma GCC optimize (&quot;-ftree-switch-conversion&quot;)#pragma GCC optimize (&quot;-foptimize-sibling-calls&quot;)#pragma GCC optimize (&quot;-fexpensive-optimizations&quot;)#pragma GCC optimize (&quot;inline-functions-called-once&quot;)#pragma GCC optimize (&quot;-fdelete-null-pointer-checks&quot;)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)","categories":[],"tags":[]},{"title":"HongYanAsstHardware","slug":"HongYanAsstHard","date":"2020-11-26T11:21:43.000Z","updated":"2020-12-20T10:05:48.338Z","comments":true,"path":"HongYanAsstHard/","link":"","permalink":"https://brynhild.online/HongYanAsstHard/","excerpt":"信息与通信工程导论项目 HongYanAsst 骑行安全监控系统 Wiki","text":"信息与通信工程导论项目 HongYanAsst 骑行安全监控系统 Wiki 项目背景及用户分析自行车在生活中随处可见，具有速度快、重量轻、节能环保、维护简单等优点。得益于人力车的性质，自行车兼具交通工具与运动器材的属性。它既是一种绿色环保的代步、出行方式；也可作为运动器材，进行多样的骑行训练与体育竞技。骑自行车锻炼，可亲近自然，愉悦身心，结交朋友，陶冶情操，更能增长见识，培养毅力，强身健体，预防疾病。近年来，随着智能运动终端的广泛普及，结合运动数据进行科学训练的模式，也正被愈发广泛地接受。 截至2019年，我国自行车社会保有量已近4亿辆、电动自行车近3亿辆，均位居世界第一。然而，自行车运动在我国的普及，前路依然漫长。推广力度的不足、相对高昂的器材价格与安全意识、健康意识的缺失等，都是阻碍更多普通大众接收自行车文化，加入骑友（骑行爱好者）行列的不利因素。 骑行运动本身由于速度快、技术要求高、时间长易于疲劳、路线一般开放等特点，其危险性可想而知。甚至仅仅是平时骑行通勤，道路上的机动车及电动车仍然会威胁到通勤安全。 年轻人，特别是大学生，一般具有体魄强健、追求刺激、乐于接受新鲜思想与事物的特点，十分适合作为自行车运动的普及者与首要普及对象。对普及者而言，正所谓“顺风而呼，声非加疾也，而闻者彰”，只有齐心协力，形成合力，持久发力，才能为自行车运动的普及与骑行活动的开展注入强大动力。成立自行车协会，组织骑行相关活动，是普及自行车文化较为经济、高效的方式之一。 时隔11载，2020年秋，在我校广大骑行爱好者的强烈要求与不懈努力之下，北郵鸿雁自行车协会（下简称“鸿雁车协”、“协会”）重新成立，正式成为认证社团。鸿雁车协推广自行车运动，为骑友提供交流平台，将骑行活动组织化、规范化，使自行车运动与健康意识在我校的普及迈出了基础却坚实的一步。 鸿雁车协的成立，对骑行爱好者意义重大，吸引了我校学生的广泛关注。迄今为止，协会已成功组织并顺利完成数次周边百公里级别骑行。2020年社团招新（百团大战）期间，关注协会者络绎不绝，覆盖各学院本科生、硕士生、博士生近300人；2020年社团嘉年华之夜，参与协会举办活动者260余人，现场排起长队，十分火爆。虽然成立时间尚短，活动举办尚少，但协会展现出的强劲发展势头，令鸿雁车协中心组与协会成员刮目相看。 然而，回顾我校自行车协会历史中断的十一年，却有太多需要弥补的损失。虽然我校骑友数载流离，车协事务百废待兴的混沌状态，已随着车协的成立与初步发展得到缓解，但不可否认的是，周边名校（如北大、央财、北航等）一直在争分夺秒，结合优势学科特色与社会影响力，建设专业性强，具有院校特色的自行车协会组织与良好的自行车文化氛围。相形之下，不论是组织、规模还是影响力，我邮车协都亟待发展。 提高学生健康意识，推动我校自行车运动事业发展，恰逢其运；利用所学知识与现有资源构建信息化平台，促进鸿雁车协的现代化、信息化进程，正当其时。鸿雁车协中心组部分成员联手志同道合者，组成团队，立志通过该项目的开发，为各高校车协的发展以及所有骑行爱好者的良好体验贡献力量。 创意过程创意分析过程 项目目标本项目主要为鸿雁车协微信公众平台及微信小程序HongYanAsst，以及任何一位骑行爱好者及他们的亲友、任何一位骑行通勤者及他们的亲友开发端到端的、软硬结合的骑行安全监控系统。本项目的成果将包含以下几项核心功能： 实时定位。实时获取设备位置信息及速度，并在微信小程序中显示。 事故侦测。由硬件设备判断是否发生事故，如发生事故则向指定手机号码发送短信告知。 高亮时刻。设备持有者可通过微信小程序在设备当前位置标点并上传图片，来和他的亲友共享。 Q&amp;A这个板块为立项初期进行用户调研时热心用户提出的可行性建议中的典型代表. 热心用户的提问对我们帮助很大, 能更清楚地了解用户担心什么, 让考虑更周全. 为什么不使用手机作为GPS信源，做小程序端到端系统？ 我们测试过微信小程序获取并发送GPS定位在手机后台运行的稳定性，在Samsung S20上一小时稳定性约为76%，HUAWEI P30约为65%，故不采用这种不稳妥的方式。而且手机作为出门在外唯一的实时通信工具，让手机有额外的电源损耗可能不是明智之举。 为什么对产品重量和气动效果重视程度较低？ 轻量化和气动外形研发时间长、成本高，研发团队在短时间内可能无法做出很好的解决方案，短期内只打算对核心功能做建设及优化。况且我们的用户定位更倾向于一般的骑行爱好者及通勤者，竞赛型用户究竟是少数。另外，我们的项目是开源的，用户完全在符合协议要求的前提下使用更好的材料、定制更气动的外形，我们也可以对具体需求具体定制。 有考虑过使用ESP8266模块使用WiFi作为网络接入解决方案吗？ 有考虑过。SIM系列硬件对电源功率的要求比较高，功耗也比较高，也很占体积。使用ESP8266连接WiFi虽然会消耗手机电源，但是现在大部分的手机都具备移动热点功率优化系统，人家大Pro做的终究是要比我们好。所以如果SIM策略不符合现有条件，我们会考虑用ESP8266连接移动热点来解决联网问题。 看到你们为了调试做了很多，软件和硬件上的都有。 确实，我们很重视调试体验，我们坚信良好的调试环境可以极大地提高调试效率。 如果能将得到的信息，比如说速度，展示出来，产品的功能会更强大一些。 我们最开始设计的时候就放弃了这个功能，一方面是考虑到我们面向的用户群体很大，很多车辆比如共享单车安装显示模块比较困难，而且可能会导致拆卸不便；另一方面，显示模块会加大电能消耗，这将不利于安全系统的续航；最后，作为设计者，我对产品的最初构想就是一个可以随身携带的、只要开机放在包里或者挂到车上就可以不用管它的省心的产品，因为这个考虑甚至把信息显示改为全LED形式，完全没有想过去考虑这种功能。 互评相关问题解答这个部分的内容是大作业互评之后对互评人提出的一些针对于项目功能和实现的、相比于互评中其他内容有价值的问题的解答，相似内容只回答一次。 注意：此部分提问内容均为互评系统中原文摘录，仅为了适应格式调整了部分空格和标点。 在一些如深山等信号强度较低的地方能否实现报警通信？这些地区往往是事故多发区，搜救难度大，较难收到求救信号，可以在这些地方测试设备的可靠性。 对于喜欢在深山老林人迹罕至没有信号的地方骑车的人自然是少数，我们在最开始设计的时候忽略了这部分人，考虑不周。在手机信号届不到的地方我们只想到了使用卫星通信或者托梦，由于成本等因素我们不打算实装。 如果小程序界面再美化就好了。 我们的微信小程序使用简洁的设计语言，目的就是为了交互界面的简单化便捷化。如果您有更详细的高见，请联系我。 小程序方面emmm不注册好像没有什么作用。 完整的用户系统和严格的鉴权系统是这个项目小程序部分的一个亮点，其必要性是无需多言的。 初步原理规划 设备设备列表 模块 数量 功能 Arduino MEGA 2560 1 核心板 NI-MH AA 5600mAh 4.8V 电池阵列 2 供电 SIM800C 1 移动网络接入 NEO-7N 1 获取GPS数据 MPU6050 1 获取加速度及计算偏角 ESP8266 1 [调试] 数据传输调试 LCD1602 1 [调试] 数据展示 CHQ1838 1 [调试] 读取红外信息 Li14500 1 [调试] 供电 Li18650 2 [调试] 供电 绿色表示核心组件, 红色表示已弃用. 硬件组装V0.0 2020/11/24 原型机: HYAsst THE ORIGIN Photos 迭代说明 原型机, 调试用, 有丰富的数据显示, 初步实现上述所有功能. v0.1 2020/11/27 初代机: ASKR YGGDRASILLS Photos 迭代说明 取消LCD数据展示及调试中断, 使用LED灯作为交互接口.彻底弃用ESP8266, 改用SIM800C接入网络.取消睡眠功能, 采用动态电源规划. v1.0 2020/11/29 二号机: SORYU KYOKO ZEPPELIN Photos 迭代说明 舍弃面包板, 使用主板铜柱固定各功能模块, 提升便携性.暂时放弃LED交互接口及电容组.更好的走线, 更坚固的框架, 更友好的外形, 设备便携性进一步提升. v1.1 2020/12/02 二号机·改: SORYU ASUKA RANGURE Photos 迭代说明 重新启用LED交互接口及电容组, 将其整合到一张板上(为下一个版本做准备).SIM800C弃用胶棒天线, 换用弹簧天线, 进一步提升便携性. v2.0 2020/12/05 三代目: RAMIEL OCTAHEDRON Photos 迭代说明 重新制作灯板, 增加线路整理功能, 并整合到设备上部.启用NI-MH AA 5600mAh 4.8V电池阵列并置于设备底部, 理论续航延长至23小时.优化内存占用, 将静态内容优先存储至Flash.事故侦测倾角维护时间增长至150个算法周期. v2.1 2020/12/07 导论课大作业成果: RAMIEL FINAL Photos 迭代说明 整理了排线, 提升便携性.加固固定部分, 提升便携性.优化灯板电气性能, 重写LED灯控代码, 延长续航. 我也不知道到底应该叫什么的洞洞板展示因为尺寸不对拿胶水粘的, 但是这胶水的强度真的超乎我的想象. 本来想给扒下来拍背面的, 结果愣是没整下来. 我太菜了. Photos How to use硬件部分软件设定123456#define ACCIDENT_ACCE 2 // 加速度阈值, 以G为单位#define ACCIDENT_ANGLE 90 // 偏差角阈值, 以度为单位#define ACCIDENT_ALERT_SPEED 25 // 速度阈值, 以km/h为单位#define DEVICE_ID &quot;xxxx&quot; // 设备IDconst String APIKey = &quot;xxxx&quot;; // 设备api-keyconst String TEL_NUM = &quot;xxxx&quot;; // 事故报警目标电话号 指示灯信息本项目为产品体积 质量以及实际考虑, 使用指示灯显示的方式进行交互. main board status green LED yellow LED RGB 1 Arduino power on device power on - 0 Arduino no power device no power - White - - initializing Blue - - data fetching Green - - data updating Red - - AccidentReport triggered SIM800C status PWR NET 0 no power no power 1 power on - blink (1 per 1s) - searching network blink (1 per 3s) - network connection OK blink (1 per 0.5s) - TCP connection established GPS status PPS 0 no power 1 searching for satellite blink PPS MPU6050 status PWR 0 no power 1 power on 微信小程序Register Register function demo Activities Activities function demo 地图标点功能在bilibili中有详细展示 此处并不提及. Administration为了保证云数据库的安全性 此权限暂时不对外授予. 目前只有开发者有此权限. 如需体验请移步bilibili视频或联系开发人员. Administration function demo Surroundings Surrounding function demo 功能实现硬件调试工具为了进行SIM800C调试而简单写的基于Arduino的串口调试工具. 不用USB转串口也可以进行串口调试. 12345678910#include &lt;Arduino.h&gt;#define mySerial Serial2void setup() &#123; Serial2.begin(115200); Serial.begin(115200);&#125;void loop() &#123; if (mySerial.available()) Serial.write(mySerial.read()); if (Serial.available()) mySerial.write(Serial.read());&#125; Arduino 多线程Metro Timer使用计时器库 Metro 模拟多线程操作. 详情见代码中loop()函数. 1#include &lt;Metro.h&gt; 123Metro dataUpdate = Metro(5000);Metro dataFetch = Metro(1000);Metro accidentMonitor = Metro(100); 12if (dataFetch.check()) getGpsData();if (dataUpdate.check()) dataUpd(); SCooptimer0_overflow_count未定义问题: 新版本的ArduinoIDE在编译的过程中不再识别timer0_overflow_count, 即使它前面有extern语句. 这使得timer0_overflow_count在全局作用域中不可见. 但是在旧版的ArduinoIDE中可以正常工作. SCoop.cpp中原文如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243extern volatile unsigned long timer0_overflow_count; // use this variable which is incremented at each overflowstatic inline micros_t SCoopMicros16(void) __attribute__((always_inline));static inline micros_t SCoopMicros16(void) // same as standrad PJRC micros, but in 16 bits and with inlining&#123; register micros_t out ; asm volatile( &quot;in __tmp_reg__, __SREG__&quot; &quot;\\n\\t&quot; &quot;cli&quot; &quot;\\n\\t&quot; &quot;in %A0, %2&quot; &quot;\\n\\t&quot; &quot;in __zero_reg__, %3&quot; &quot;\\n\\t&quot; &quot;lds %B0, timer0_overflow_count&quot; &quot;\\n\\t&quot; &quot;out __SREG__, __tmp_reg__&quot; &quot;\\n\\t&quot; &quot;sbrs __zero_reg__, %4&quot; &quot;\\n\\t&quot; &quot;rjmp L_%=_skip&quot; &quot;\\n\\t&quot; &quot;cpi %A0, 255&quot; &quot;\\n\\t&quot; &quot;breq L_%=_skip&quot; &quot;\\n\\t&quot;#if F_CPU == 16000000L &quot;subi %B0, 1&quot; &quot;\\n\\t&quot;#elif F_CPU == 8000000L &quot;subi %B0, 2&quot; &quot;\\n\\t&quot;#endif &quot;L_%=_skip:&quot; &quot;\\n\\t&quot; &quot;clr __zero_reg__&quot; &quot;\\n\\t&quot; &quot;clr __tmp_reg__&quot; &quot;\\n\\t&quot;#if F_CPU == 16000000L || F_CPU == 8000000L &quot;lsl %B0&quot; &quot;\\n\\t&quot; &quot;lsl %B0&quot; &quot;\\n\\t&quot; &quot;lsl %A0&quot; &quot;\\n\\t&quot; &quot;rol __tmp_reg__&quot; &quot;\\n\\t&quot; &quot;lsl %A0&quot; &quot;\\n\\t&quot; &quot;rol __tmp_reg__&quot; &quot;\\n\\t&quot;#if F_CPU == 8000000L &quot;lsl %B0&quot; &quot;\\n\\t&quot; &quot;lsl %A0&quot; &quot;\\n\\t&quot; &quot;rol __tmp_reg__&quot; &quot;\\n\\t&quot;#endif &quot;or %B0, __tmp_reg__&quot; &quot;\\n\\t&quot;#endif : &quot;=r&quot; (out) : &quot;M&quot; (TIMER0_MICROS_INC), &quot;I&quot; (_SFR_IO_ADDR(TCNT0)), &quot;I&quot; (_SFR_IO_ADDR(TIFR0)), &quot;I&quot; (TOV0) : &quot;r0&quot; ); return out; &#125; 在timer0_overflow_count的定义后加入 1static unsigned long timer0_overflow_count_available_container = timer0_overflow_count; 即可. Kalman Filter使用积分, 对角速度及加速度进行操作计算倾角, 并使陀螺仪倾角平滑化. reference: KalmanFilterforDummies Introduction to kalman filter and its applications 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253inline void getAcce () &#123; unsigned long now = millis(); dt = (now - lastTime) / 1000.0; lastTime = now; accelgyro.getMotion6(&amp;ax, &amp;ay, &amp;az, &amp;gx, &amp;gy, &amp;gz); double accx = ax / AcceRatio, accy = ay / AcceRatio, accz = az / AcceRatio; aax = atan(accy / accz) * (-180) / pi; aay = atan(accx / accz) * 180 / pi; aaz = atan(accz / accy) * 180 / pi; aax_sum = aay_sum = aaz_sum = 0; for (register int i=1; i ^ n_sample; ++ i) &#123; aaxs[i-1] = aaxs[i], aax_sum += aaxs[i] * i; aays[i-1] = aays[i], aay_sum += aays[i] * i; aazs[i-1] = aazs[i], aaz_sum += aazs[i] * i; &#125; aaxs[n_sample-1] = aax, aax_sum += aax * n_sample, aax = (aax_sum / (11 * n_sample / 2.0)) * 9 / 7.0; aays[n_sample-1] = aay, aay_sum += aay * n_sample, aay = (aay_sum / (11 * n_sample / 2.0)) * 9 / 7.0; aazs[n_sample-1] = aaz, aaz_sum += aaz * n_sample, aaz = (aaz_sum / (11 * n_sample / 2.0)) * 9 / 7.0; double gyrox = -(gx - gxo) / GyroRatio * dt; double gyroy = -(gy - gyo) / GyroRatio * dt; double gyroz = -(gz - gzo) / GyroRatio * dt; agx += gyrox, agy += gyroy, agz += gyroz; Sx = Rx = Sy = Ry = Sz = Rz = 0; for (int i = 1; i ^ 10; ++ i) &#123; a_x[i - 1] = a_x[i], Sx += a_x[i]; a_y[i - 1] = a_y[i], Sy += a_y[i]; a_z[i - 1] = a_z[i], Sz += a_z[i]; &#125; a_x[9] = aax, Sx += aax, Sx /= 10, a_y[9] = aay, Sy += aay, Sy /= 10, a_z[9] = aaz, Sz += aaz, Sz /= 10; for (register int i=0; i^10; ++ i) Rx += sq(a_x[i] - Sx), Ry += sq(a_y[i] - Sy), Rz += sq(a_z[i] - Sz); Rx = Rx / 9, Ry = Ry / 9, Rz = Rz / 9; Px = Px + 0.0025, Kx = Px / (Px + Rx), agx = agx + Kx * (aax - agx), Px = (1 - Kx) * Px; Py = Py + 0.0025, Ky = Py / (Py + Ry), agy = agy + Ky * (aay - agy), Py = (1 - Ky) * Py; Pz = Pz + 0.0025, Kz = Pz / (Pz + Rz), agz = agz + Kz * (aaz - agz), Pz = (1 - Kz) * Pz; #ifdef ACCELGYRO_SERIAL_OUTPUT Serial.print(agx); Serial.print(&quot;,&quot;); Serial.print(agy); Serial.print(&quot;,&quot;); Serial.print(agz); Serial.println(); #endif&#125; SIM800C 供电问题众所周知, SIM800C功耗较大, 正常工况功率可以高达$5W$, 搜索网络过程中更是需要$10W$的高功率, 而Arduino的$5V$引脚是提供不了$5V2A$的高功率的. 为了解决这个问题我们使用Li14500电池对电路直接加电, 同时给包括Arduino板在内的所有模块供电. 为了进一步提高电路稳定性, 我们还在电路中加入了四颗当初玩粉尘传感器玩剩下的$220UF$电解电容, 来提升电路瞬间放电能力. Photos SIM800C发送HTTP报文12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849inline void dataUpd () &#123; SIM.println(&quot;AT\\r&quot;); delay(100); SIM.println(&quot;AT+CGDCONT=1,\\&quot;IP\\&quot;,\\&quot;CMNET\\&quot;\\r&quot;); delay(100); SIM.println(&quot;AT+CGATT=1&quot;); delay(100); SIM.println(&quot;AT+CIPCSGP=1,\\&quot;CMNET\\&quot;\\r&quot;); delay(100); SIM.println(&quot;AT+CLPORT=\\&quot;TCP\\&quot;,\\&quot;2000\\&quot;\\r&quot;); delay(100); SIM.println(&quot;AT+CIPSTART=\\&quot;TCP\\&quot;,\\&quot;183.230.40.33\\&quot;,\\&quot;80\\&quot;\\r&quot;); delay(100); SIM.println(&quot;AT+CIPSEND&quot;); delay(100); char buf[10]; String jsonToSend = &quot;&#123;\\&quot;Logitude\\&quot;:&quot;; dtostrf(Logi, 1, 6, buf); jsonToSend += &quot;\\&quot;&quot; + String(buf) + &quot;\\&quot;&quot;; jsonToSend += &quot;,\\&quot;Latitude\\&quot;:&quot;; dtostrf(Lati, 1, 6, buf); jsonToSend += &quot;\\&quot;&quot; + String(buf) + &quot;\\&quot;&quot;; jsonToSend += &quot;,\\&quot;Altitude\\&quot;:&quot;; dtostrf(Alti, 1, 6, buf); jsonToSend += &quot;\\&quot;&quot; + String(buf) + &quot;\\&quot;&quot;; jsonToSend += &quot;,\\&quot;Speed\\&quot;:&quot;; dtostrf(Skmph, 1, 2, buf); jsonToSend += &quot;\\&quot;&quot; + String(buf) + &quot;\\&quot;&quot;; jsonToSend += &quot;&#125;&quot;; String postString = &quot;POST /devices/&quot;; postString += DEVICE_ID; postString += &quot;/datapoints?type=3 HTTP/1.1&quot;; postString += &quot;\\r\\n&quot;; postString += &quot;api-key:&quot;; postString += APIKey; postString += &quot;\\r\\n&quot;; postString += &quot;Host:api.heclouds.com\\r\\n&quot;; postString += &quot;Connection:close\\r\\n&quot;; postString += &quot;Content-Length:&quot;; postString += jsonToSend.length(); postString += &quot;\\r\\n&quot;; postString += &quot;\\r\\n&quot;; postString += jsonToSend; postString += &quot;\\r\\n&quot;; postString += &quot;\\r\\n&quot;; postString += &quot;\\r\\n&quot;; const char *postArray = postString.c_str(); Serial.println(postArray); SIM.write(postArray); delay(100); SIM.write(0x1A); postArray = NULL;&#125; SIM800C发送短信12345678910111213141516171819202122232425262728293031void accidentReport () &#123; ledWrite(0, 0, 0); ledWrite(255, 0, 0); Serial.println (&quot;Accident Report Trigged.&quot;); SIM.println(&quot;AT+CIPCLOSE\\r&quot;); delay(1000); SIM.println(&quot;AT+CIPSTART\\r&quot;); delay(5000); String tmp = &quot;AT+CMGS=\\&quot;&quot;; tmp += TEL_NUM; tmp += &quot;\\&quot;\\n\\r&quot;; Serial.println(tmp); char buf[10]; SIM.begin(115200); SIM.println(&quot;AT\\r\\n&quot;); delay(100); SIM.println(&quot;AT+CMGF=1\\n\\r&quot;); delay(500); SIM.write(tmp.c_str()); delay(1000); SIM.println(&quot;It seems to be an accident.&quot;); tmp = &quot;Location: &quot;; dtostrf(Lati, 1, 4, buf); tmp += String(buf); dtostrf(Logi, 1, 4, buf); tmp += &quot;, &quot; + String(buf)+&quot;\\r&quot;; SIM.write(tmp.c_str()); delay(1000); SIM.write(0x1A); delay (10000); ledWrite(0, 0, 0); SIM.println(&quot;AT+CIPCLOSE\\r&quot;); delay(1000); SIM.println(&quot;AT+CIPSTART\\r&quot;); delay(5000);&#125; 这里尤其需要注意和TCP的冲突问题, 这里采用了先断连再重连的实现方式, 但是在实际测试中发现就算不断开连接短信也能够正常发送. LED灯控制函数很方便的LED灯控制手段. 12345inline void ledWrite (int R, int G, int B) &#123; digitalWrite(LedRed, (255-R)&gt;&gt;LED_LITHT_DEC); digitalWrite(LedGre, (255-G)&gt;&gt;LED_LITHT_DEC); digitalWrite(LedBlu, (255-B)&gt;&gt;LED_LITHT_DEC);&#125; 红外遥控器编码12345678910111213141516171819202122int rm_encode (long long res) &#123; switch (res) &#123; case 0xFF6897: return 0; //Show Time case 0xFF30CF: return 1; //Show Longitude &amp; Latitude case 0xFF18E7: return 2; //Show Speed case 0xFF7A85: return 3; //Show Acceleration case 0xFF10EF: return 4; //Show Accelgyro case 0xFF38C7: return 5; case 0xFF5AA5: return 6; case 0xFF42BD: return 7; case 0xFF4AB5: return 8; case 0xFF52AD: return 9; case 0xFF22DD: return 1001; case 0xFF02FD: return 1002; default: return -1; &#125;&#125; 红外遥控信息处理逻辑12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364void nowPosiModify (long long res) &#123; rettmp=lcd_rm_encode(res); if (rettmp != -1) &#123; if (rettmp&gt;1000 &amp;&amp; rettmp&lt;=1100) &#123; if (true) &#123; flag=false; switch (rettmp) &#123; case 1001: &#123;ret = (ret+1)%tot_sta; break;&#125; case 1002: &#123;ret = --ret&lt;0? ret+tot_sta:ret; break;&#125; &#125; &#125; &#125; else ret=rettmp, flag=true; &#125; digitalWrite(lcdBackLight, HIGH); #ifdef LCD_OUTPUT switch (ret) &#123; case 0: &#123; lcd.clear(); lcd.setCursor(0, 0); lcd.print(Year); lcd.print(&quot;/&quot;); if (Month&lt;10) lcd.print(&quot;0&quot;); lcd.print(Month); lcd.print(&quot;/&quot;); if (Day &lt;10) lcd.print(&quot;0&quot;); lcd.print(Day); lcd.setCursor(0, 1); if (Hour&lt;10) lcd.print(&quot;0&quot;); lcd.print(Hour); lcd.print(&quot;:&quot;); if (Minute&lt;10) lcd.print(&quot;0&quot;); lcd.print(Minute); lcd.print(&quot;:&quot;); if (Second&lt;10) lcd.print(&quot;0&quot;); lcd.print(Second); break; &#125; case 1: &#123; lcd.clear(); lcd.setCursor(0, 0); lcd.print(&quot;Logi: &quot;); lcd.print(Logi); lcd.setCursor(0, 1); lcd.print(&quot;Lati: &quot;); lcd.print(Lati); break; &#125; case 2: &#123; lcd.clear(); lcd.setCursor(0, 0); lcd.print (&quot;Speed(Kmph): &quot;); lcd.setCursor(0, 1); lcd.print(Skmph); break; &#125; case 3: &#123; lcd.clear(); lcd.setCursor(0, 0); lcd.print (&quot;Acceleration:&quot;); lcd.setCursor(0, 1); lcd.print(Acce); break; &#125; case 4: &#123; lcd.clear(); lcd.setCursor(0, 0); lcd.print(&quot;x:&quot;); lcd.print(agx); lcd.print(&quot; y:&quot;); lcd.print(agy); lcd.setCursor(0, 1); lcd.print(&quot;z:&quot;); lcd.print(agz); break; &#125; &#125; rettmp = -1; #endif #ifdef DEBUG //Serial.print(&quot;ret: &quot;); //Serial.print(ret); //Serial.print(&quot; tettmp: &quot;); //Serial.println(rettmp); #endif&#125; 事故侦测1234567891011121314151617181920const int durVal = 150;double tmpAgx[durVal], tmpAgy[durVal], tmpAgz[durVal];int pos, totx, toty, totz;double avgx, avgy, avgz;inline bool isRotate () &#123; getAcce(); register bool flag = false; register double acce = sqrt(accx*accx + accy*accy + accz*accz); flag = acce&gt;=ACCIDENT_ACCE; if (Abs(agx-avgx)&gt;ACCIDENT_ANGLE || Abs(agy-avgy)&gt;ACCIDENT_ANGLE || Abs(agz-avgz)&gt;ACCIDENT_ANGLE) flag = true; totx -= tmpAgx[pos], toty -= tmpAgy[pos], totz -= tmpAgz[pos]; tmpAgx[pos] = agx, tmpAgy[pos]= agy, tmpAgz[pos] = agz; totx += agx, toty += agy, totz += agz; avgx = 1.0*totx/(1.0*durVal), avgy = 1.0*toty/(1.0*durVal), avgz = 1.0*totz/(1.0*durVal); pos = (pos+1)%durVal; return flag;&#125; 123if (accidentMonitor.check()) &#123; if (isRotate() &amp;&amp; Skmph&gt;=ACCIDENT_ALERT_SPEED) accidentReport();&#125; 使用循环数组存储$150$个运行周期中三维陀螺仪的倾角信息, 通过更新循环数组求$150$个运行周期中的三维倾角平均值. acce为三维加速度的等效值. 报警条件: 等效加速度大小大于阈值ACCIDENT_ ACCE, 并且三个方向上的倾角只要有一个倾角相对于$150$个运行周期中的平均值的差的绝对值大于阈值ACCIDENT_ANGEL, 并且当前GPS速度大于阈值ACCIDENT_ALERT_SPEED, 即可触发报警. 需要注意的一点: if语句中各个判断条件从左向右计算, 如果发现在某种情况下判断结果已经可以确定, 其余的部分将不会被计算. 为了能够保证维护的循环数组的连续性, 我们牺牲了部分低速或静息状态下的续航和性能, 保证isRotate()在每一个程序周期中都会被调用. [Bad Attempt] 向 Arduino UNO 移植想要做Arduino最小系统进一步减小体积, 后来发现有各种问题, 故终止. 失败原因: ATMEGA328PU性能太差, RAM太小, 实现功能要用到的动态存储空间太大. 下文简单介绍一下挣扎时用到的一些可能有用的操作. 减小RAM占用ATMEGA2560足足有8K的SRAM, 但ATMEGA328PU只有2K, 我当场MLE. 学OI那阵子松松松都是松时间, 从来不用担心MLE, 上了带学连空间都要松, 这就是当代带学生吗 (雾 解决方案: 将静态变量内容存入Flash.在静态变量前面加PROGMEM修饰, 可以将静态变量存入Flash, 以减少RAM占用. 1PROGMEM const double pi = 3.1415926, AcceRatio = 16384.0, GyroRatio = 131.0; 将字符串常量存入Flash.字符串常量通常被存入静态内存区, 将其用F()修饰可以将其存入Flash. 123SIM.println(F(&quot;AT+CIPCSGP=1,\\&quot;CMNET\\&quot;\\r&quot;)); sleep(100);SIM.println(F(&quot;AT+CLPORT=\\&quot;TCP\\&quot;,\\&quot;2000\\&quot;\\r&quot;)); sleep(500);SIM.println(F(&quot;AT+CIPSTART=\\&quot;TCP\\&quot;,\\&quot;183.230.40.33\\&quot;,\\&quot;80\\&quot;\\r&quot;)); 烧写bootloader有几次炸内存之后Arduino板工作不正常, 甚至无法正常烧录程序, 抱着尝试的心态重新烧写引导程序, 它奇迹般地复活了. 硬件连接(常用) The 10µF electrolytic capacitor connected to RESET and GND of the programming board is needed only for the boards that have an interface between the microcontroller and the computer’s USB, like Mega, Uno, Mini, Nano. Boards like Leonardo, Esplora and Micro, with the USB directly managed by the microcontroller, don’t need the capacitor. 实际用Mega测试的时候发现电容不加也行. (笑 在工具栏 工具-&gt;开发板 中选择PROGRAMMER的正确开发板型号及处理器型号. 在工具栏 工具-&gt;编程器 中选择AVRISP编程器. 在工具栏 文件-&gt;示例-&gt;ArduinoISP 中打开ArduinoISP例程, 编译并烧录到PROGRAMMER中. 在工具栏 工具-&gt;开发板 中选择TARGET的正确开发板型号和处理器型号. 在工具栏 工具-&gt;编程器 中选择Arduino as ISP, 并点击下方的烧录引导程序. 等待即可. 更多内容详见官网相关文档ArduinoISP. 微信小程序由于微信小程序部分码量巨大 且只有定位功能是我们项目的核心功能 本Wiki中关于微信小程序将只针对于定位页面进行讲解 账号授权 新建活动 活动报名 资讯 相册 添加新设备等附属功能请自行查看代码. WG-84 to GCJ-02 坐标转换首先参考 GCJ-02火星坐标系和WGS-84坐标系转换关系, 得: 然后参考 已知不可逆的坐标转换算法，通过结果进行反算的方法 进行坐标逆变换. 我们只能先认为 WGS-84 转到 GCJ-02 的精确公式是存在的，这是我们做 GCJ-02 到 WGS-84 公式逆变换的前提，否则我们或许只能黑箱操作（其实我们已经进行了黑箱操作，但是效果不好）。经过一番操作，我们凑巧得出如下公式： 在小程序中进行处理后, 在传入坐标精度为6位小数即可一定程度上保证坐标精准度. 1234567891011121314151617181920212223242526272829303132333435363738394041424344var wgs84togcj02 = function(lat, log) &#123; //is position off China mainland if (log &lt; 72.004 || log &gt; 137.8347 || lat &lt; 0.8293 || lat &gt; 55.8271) &#123; return &#123; latitude: lat, longitude: log, &#125; &#125; else &#123; const Pi = 3.14159265358979324; //coordinate projection factor const a = 6378245.0; //eccentricity const ee = 0.00669342162296594323; //All Hail ELLIAS var transformLat = function (x, y) &#123; var ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x)); ret += (20.0 * Math.sin(6.0 * x * Pi) + 20.0 * Math.sin(2.0 * x * Pi)) * 2.0 / 3.0; ret += (20.0 * Math.sin(y * Pi) + 40.0 * Math.sin(y / 3.0 * Pi)) * 2.0 / 3.0; ret += (160.0 * Math.sin(y / 12.0 * Pi) + 320 * Math.sin(y * Pi / 30.0)) * 2.0 / 3.0; return ret; &#125; var transformLog = function (x, y) &#123; var ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x)); ret += (20.0 * Math.sin(6.0 * x * Pi) + 20.0 * Math.sin(2.0 * x * Pi)) * 2.0 / 3.0; ret += (20.0 * Math.sin(x * Pi) + 40.0 * Math.sin(x / 3.0 * Pi)) * 2.0 / 3.0; ret += (150.0 * Math.sin(x / 12.0 * Pi) + 300.0 * Math.sin(x / 30.0 * Pi)) * 2.0 / 3.0; return ret; &#125; var delta = function (lat, lon) &#123; var dLat = transformLat(lon - 105.0, lat - 35.0); var dLon = transformLog(lon - 105.0, lat - 35.0); var radLat = lat / 180.0 * Pi; var magic = Math.sin(radLat); magic = 1 - ee * magic * magic; var sqrtMagic = Math.sqrt(magic); dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * Pi); dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * Pi); return &#123;&#x27;lat&#x27;: dLat, &#x27;lon&#x27;: dLon&#125;; &#125; const d = delta(lat, log); return &#123; latitude: lat + d.lat, longitude: log + d.lon, &#125; &#125;&#125;; 数据实时刷新1234//location data getter timertimer = setInterval(() =&gt; &#123; this.get_datapoints().then(datapoints =&gt; &#123;&#125;)&#125;, 3000) event到期后timer将会停止工作. 获取当前event本项目中将不同的使用节次虚拟化为不同的event. 只有在event中register才有权限上传图片. 只能在event开始前12h到event结束后1天的时间范围内上传图片. 如果event结束, timer也不会再更新. 12345678910111213141516171819202122232425262728293031323334353637//get the corresponded eventvar event = app.globalData.event;var participants = event.participants;var is_signed = false;for (var i = 0; i &lt; participants.length; i++) &#123; if (app.globalData.user.openid == participants[i].openid) &#123; //matching current user //check whether the event is expired, -12h to 1d var can_upload = ((((Date.now() - event.precise_time) / 86400000) &gt;= 1) || (((Date.now() - event.precise_time) / 86400000) &lt;= -0.5)) ? false : true; //fill the basic event name info and decide whether the uploader should be shown or not this.setData(&#123; event: event, all_snapshots_tip: &quot;查看&quot; + event.name + &quot;的全部图片&quot;, is_uploader_hide: !can_upload, tip_footer: &quot;请在活动开始前12小时到活动结束后1天内上传图片&quot; &#125;) if (((Date.now() - event.precise_time) / 86400000) &gt;= 1) &#123; clearInterval(timer); this.setData(&#123; tip_footer: &quot;活动已结束&quot;, is_dynamic_data_hide: true &#125;) //event expired, clear interval &#125; is_signed = true; break; &#125; //cannot upload if unsigned if (!is_signed) &#123; this.setData(&#123; event: event, all_snapshots_tip: &quot;查看&quot; + event.name + &quot;的全部图片&quot;, is_uploader_hide: true, tip_footer: &quot;未报名活动，无法上传图片&quot; &#125;) &#125;&#125; 从数据库中获取当前event所对应的图片表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485db.collection(&quot;events&quot;).where(&#123; _id: event._id &#125;).field(&#123; _id: true, snapshots: true &#125;).get(&#123; success: function (res) &#123; //all shots taken in the event var snapshots = res.data[0].snapshots that.setData(&#123; event_id: res.data[0]._id, event_shots: snapshots &#125;) var markers = []; markers[0] = &#123; id: 0, latitude: that.data.latitude, longitude: that.data.longitude, width: 20, height: 20, iconPath: &quot;image/star.png&quot;, callout: &#123; content: that.data.event.device.name + &quot;：&quot; + that.data.event.device.deviceid, bgColor: &quot;#fff&quot;, padding: &quot;5px&quot;, borderRadius: &quot;5px&quot;, borderWidth: &quot;1px&quot;, borderColor: &quot;#1296DB&quot;, display: &quot;BYCLICK&quot;, fontSize: &quot;10&quot;, &#125;, is_snapshot: false &#125;; for (var i = 0; i &lt; snapshots.length; i++) &#123; var snapshot = snapshots[i]; var marker = &#123;&#125;; //geopoint need to be transformed to json var location = snapshot.location.toJSON().coordinates; marker.id = i + 1; marker.location = snapshot.location; marker.longitude = location[0]; marker.latitude = location[1]; marker.openid = snapshot.openid; marker.name = snapshot.name; marker.avatar = snapshot.avatar; marker.nickname = snapshot.nickname; marker.realname = snapshot.realname; marker.taker = snapshot.nickname + &quot; (&quot; + snapshot.realname + &quot;)&quot;; marker.detail = snapshot.detail; marker.iconPath = &quot;image/imagepoint.png&quot;; marker.url = snapshot.url; marker.width = 20; marker.height = 20; marker.callout = &#123; content: snapshot.detail, bgColor: &quot;#fff&quot;, padding: &quot;5px&quot;, borderRadius: &quot;5px&quot;, borderWidth: &quot;1px&quot;, borderColor: &quot;#1485EF&quot;, display: &quot;ALWAYS&quot;, fontSize: &quot;10&quot;, &#125;; marker.is_snapshot = true; markers.push(marker); //deviation, prevent markers from overlapping &#125; for (var i = 0; i &lt; markers.length; i++) &#123; var marker = markers[i]; for (var j = 0; j &lt; markers.length; j++) &#123; if (markers[j].location == marker.location) &#123; markers[j].longitude += i * 0.0002; markers[j].latitude += i * 0.0002; &#125; &#125; &#125; console.log(markers); that.setData(&#123; markers: markers &#125;) wx.hideLoading(&#123; complete: (res) =&gt; &#123;&#125;, &#125;) &#125; &#125;) 当前定位点和图片定位点都需要用markers[]盛放, 为了避免渲染冲突, 我们将当前定位点存在markers[0]中, 并对其单独赋值. 如果有坐标相同的定位点, 为了防止它们重合, 这里单独做了特判, 将每一对中重合的标记点其中的一个平移. 从OneNet获取设备信息wgs84togcj02函数在上文有提及. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//get gps datapointsget_datapoints: function () &#123; var that = this; return new Promise((resolve, reject) =&gt; &#123; wx.request(&#123; url: `https://api.heclouds.com/devices/$&#123;that.data.event.device.deviceid&#125;/datapoints?datastream_id=Latitude,Logitude,Speed&amp;limit=1`, header: &#123; &#x27;content-type&#x27;: &#x27;application/json&#x27;, &#x27;api-key&#x27;: that.data.event.device.apikey &#125;, success: (res) =&gt; &#123; const status = res.statusCode; const response = res.data; var speed = response.data.datastreams[0].datapoints; var longitude = response.data.datastreams[1].datapoints; var latitude = response.data.datastreams[2].datapoints; var current_sp = Number(speed[speed.length - 1].value); var current_lo = Number(longitude[longitude.length - 1].value); var current_la = Number(latitude[latitude.length - 1].value); //encrypt to gcj to fit Tencent map const encrypt_res = wgs84togcj02(current_la, current_lo); that.setData(&#123; speed: current_sp, longitude: encrypt_res.longitude, latitude: encrypt_res.latitude, &#125;) console.log(&quot;[onenet][speed]: &quot; + that.data.speed); console.log(&quot;[onenet][latitude]: &quot; + that.data.latitude); console.log(&quot;[onenet][longitude]: &quot; + that.data.longitude); if (status !== 200) &#123; reject(res.data) return; &#125; if (response.errno !== 0) &#123; reject(response.error) return; &#125; if (response.data.datastreams.length === 0) &#123; reject(&quot;No data yet.&quot;) &#125; resolve(&#123;&#125;) &#125;, fail: (err) =&gt; &#123; reject(err) &#125; &#125;) &#125;)&#125;, 使用Promise取消异步. 在地图上点击图片点123456789101112131415161718192021//marker tappedshow_snapshots: function (e) &#123; var id = e.detail.markerId; var markers = this.data.markers; if (id == 0) return; for (var i = 1; i &lt; this.data.markers.length; i++) &#123; markers[i].iconPath = &quot;image/imagepoint.png&quot;; markers[i].callout.borderColor = &quot;#1485EF&quot;; //change imagepoint to red if (i == id) &#123; markers[i].iconPath = &quot;image/imagepoint_selected.png&quot;; markers[i].callout.borderColor = &quot;#EF2914&quot;; &#125; &#125; var current_marker = markers[id]; this.setData(&#123; markers: markers, current_marker: current_marker, is_image_previewer_hide: false &#125;)&#125;, 显示所有图片1234567891011121314151617181920212223//show all tab tappedshow_all_snapshots: function () &#123; //no snapshot var event = this.data.event; if (!this.data.event.snapshots_count) &#123; this.setData(&#123; all_snapshots_tip: &quot;暂无图片&quot; &#125;) return; &#125; //has snapshots if (this.data.is_all_Hide) &#123; this.setData(&#123; is_all_Hide: false, all_snapshots_tip: &quot;收起&quot; &#125;) &#125; else &#123; this.setData(&#123; is_all_Hide: true, all_snapshots_tip: &quot;查看&quot; + this.data.event.name + &quot;全部图片&quot; &#125;) &#125;&#125;, 选择上传位点12345678910111213141516171819202122232425262728293031choose_location: function () &#123; var that = this; wx.chooseLocation(&#123; latitude: that.data.latitude, longitude: that.data.longitude, complete: (res) =&gt; &#123; if (!res.name) &#123; this.setData(&#123; tip: &quot;未选中位置，点我重新选择&quot; &#125;) &#125; else &#123; this.setData(&#123; tip: res.name &#125;) &#125; this.data.snapshots.avatar = app.globalData.user.avatar; this.data.snapshots.openid = app.globalData.user.openid; this.data.snapshots.nickname = app.globalData.user.nickname; this.data.snapshots.realname = app.globalData.user.realname; this.data.snapshots.name = res.name; this.data.snapshots.location = db.Geo.Point(res.longitude, res.latitude); var d = new Date(); this.data.snapshots.time = d.getTime(); if (this.data.detail) &#123; this.data.snapshots.detail = this.data.detail; &#125; else &#123; this.data.snapshots.detail = &quot;暂无描述&quot;; &#125; &#125;, &#125;) &#125;, 选择要上传的图片12345678910111213141516171819202122232425262728293031323334353637//the rider choose an image from snapshots just takenchoose_image: function () &#123; if (this.data.files.length &gt;= 1) &#123; wx.showToast(&#123; title: &#x27;每位用户单个地点最多上传一张图片&#x27;, icon: &quot;none&quot; &#125;) return; &#125; var that = this; wx.chooseImage(&#123; //choose compressd image to get faster upload and save data sizeType: [&#x27;original&#x27;, &#x27;compressed&#x27;], count: 1, //take a snapshot or choose a photo sourceType: [&#x27;album&#x27;, &#x27;camera&#x27;], success: function (res) &#123; //check the size of the image var maxsize = 4000000; if (res.tempFiles[0].size &gt; maxsize) &#123; var original_size = (res.tempFiles[0].size / 1000000).toFixed(2); wx.showToast(&#123; title: &#x27;图片过大(&#x27; + original_size + &#x27;MB&#x27; + &#x27;)，请取消勾选&quot;原图&quot;或另行上传较小的图片&#x27;, icon: &#x27;none&#x27; &#125;) return; &#125; //return file path and attach to page data filepath array that.setData(&#123; files: that.data.files.concat(res.tempFilePaths), is_upload_add_hide: true, tip_second: &quot;长按图片删除&quot; &#125;); &#125; &#125;) this.choose_location();&#125;, 经过测试, 如果图片大小超过4Mib可能会造成微信闪退, 故加入了图片大小检测, 以提升系统的健壮性. 上传图片和备注123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//upload image with location and detailupload_images: function () &#123; var that = this; //check if the user is uploading another snapshot to the same point for (var i = 0; i &lt; this.data.markers.length; i++) &#123; var marker = this.data.markers[i]; if (marker.openid == app.globalData.openid &amp;&amp; marker.name == this.data.snapshots.name) &#123; wx.showToast(&#123; icon: &#x27;none&#x27;, title: &#x27;每位用户单个地点最多上传一张图片&#x27;, &#125;) return; &#125; &#125; //check if the location is specified if (!this.data.snapshots.name) &#123; wx.showToast(&#123; icon: &#x27;none&#x27;, title: &#x27;未选择位置&#x27;, &#125;) return; &#125; //check if the detail of snapshot is provided if (!this.data.detail) &#123; wx.showModal(&#123; title: &#x27;提示&#x27;, content: &#x27;是否填写图片备注？&#x27;, cancelColor: &#x27;gray&#x27;, cancelText: &#x27;否&#x27;, confirmText: &#x27;是&#x27;, complete: function (e) &#123; if (e.cancel) &#123; wx.showModal(&#123; title: &#x27;提示&#x27;, content: &#x27;确认上传该照片到&#x27; + that.data.snapshots.name + &quot;？&quot;, cancelText: &#x27;取消&#x27;, confirmText: &#x27;确认&#x27;, success: function (res) &#123; if (res.cancel) &#123; return; &#125; else &#123; that.upload_image_final(); &#125; &#125; &#125;) &#125; else &#123; return; &#125; &#125; &#125;) &#125; else &#123; wx.showModal(&#123; title: &#x27;提示&#x27;, content: &#x27;确认上传该照片到&#x27; + that.data.snapshots.name + &quot;？&quot;, cancelText: &#x27;取消&#x27;, confirmText: &#x27;确认&#x27;, success: function (res) &#123; if (res.cancel) &#123; return; &#125; else &#123; that.upload_image_final(); &#125; &#125; &#125;) &#125;&#125;, 上传数据12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970upload_image_final: function () &#123; wx.showNavigationBarLoading(&#123; complete: (res) =&gt; &#123;&#125;, &#125;) wx.showToast(&#123; title: &#x27;图片上传中&#x27;, icon: &#x27;loading&#x27;, duration: 5000 &#125;) var that = this; const filePath = that.data.files[0]; //const filePath = files[i]; //use this when uploading mutiple details const cloudPath = `events/$&#123;that.data.event.name&#125;/$&#123;app.globalData.user.nickname&#125;/$&#123;app.globalData.openid&#125;_$&#123;Math.random()&#125;_$&#123;Date.now()&#125;.$&#123;filePath.match(/\\.(\\w+)$/)[1]&#125;`; wx.cloud.uploadFile(&#123; cloudPath, filePath, success: function (res) &#123; files_cloud_url = res.fileID; that.setData(&#123; files_cloud_url: files_cloud_url &#125;) var snapshots = that.data.snapshots; //regenerate detail if (that.data.detail != &quot;暂无描述&quot; &amp;&amp; that.data.detail != &quot;&quot;) &#123; snapshots.detail = that.data.detail; &#125; else &#123; snapshots.detail = &quot;暂无描述&quot;; &#125; console.log(snapshots); //add url field snapshots.url = that.data.files_cloud_url; var e = that.data.event_shots; e.push(snapshots); var snapshots_count = e.length; that.setData(&#123; event_shots: e &#125;) console.log(that.data.event_shots); wx.cloud.callFunction(&#123; name: &#x27;update_snapshots_count&#x27;, data: &#123; taskId: that.data.event_id.toString(), my_snapshot_count: snapshots_count &#125; &#125;) wx.cloud.callFunction(&#123; name: &#x27;update_snapshots&#x27;, data: &#123; taskId: that.data.event_id.toString(), my_snapshot: that.data.event_shots, &#125; &#125;).then(res =&gt; &#123; wx.hideNavigationBarLoading(&#123; complete: (res) =&gt; &#123;&#125;, &#125;) wx.showToast(&#123; title: &#x27;上传成功&#x27;, duration: 3000, success(res) &#123; wx.pageScrollTo(&#123; scrollTop: 0, &#125;) setTimeout(that.onLoad, 3000); &#125; &#125;) &#125;) &#125; &#125;) &#125; 对于图像的云储存, 我们使用将文件上传到存储区并维护链接表及链接表个数统计的方案. 下文的代码为云上文件存储路径的命名规则, 以及存储区的文件组织架构 1const cloudPath = `events/$&#123;that.data.event.name&#125;/$&#123;app.globalData.user.nickname&#125;/$&#123;app.globalData.openid&#125;_$&#123;Math.random()&#125;_$&#123;Date.now()&#125;.$&#123;filePath.match(/\\.(\\w+)$/)[1]&#125;`; cloudFunction update_snapshots_countupdate_snapshots_count及update_snapshots用来更新数据库中图片counter及图片表. 123456789exports.main = async (event, context) =&gt; &#123; return await new Promise((resolve, reject) =&gt; &#123; db.collection(&#x27;events&#x27;).doc(event.taskId).update(&#123; data: &#123; snapshots_count: event.my_snapshot_count &#125; &#125;) &#125;).then(console.log(&quot;[update_snapshots][updated successfully]&quot;))&#125; cloudFunction update_snapshots123456789exports.main = async (event, context) =&gt; &#123; return await new Promise((resolve, reject) =&gt; &#123; db.collection(&#x27;events&#x27;).doc(event.taskId).update(&#123; data: &#123; snapshots: event.my_snapshot &#125; &#125;) &#125;).then(console.log(&quot;[update_snapshots][updated successfully]&quot;))&#125; 项目展示警告: 由于小程序基本功能需要后台支持 请不要下载源码自行编译体验. 提示: 文档中内容只有主要功能部分 如需详细讲解请联系我. Arduino代码: HongYanAsstHardware 微信小程序代码: HongyanAsst. 微信小程序在线展示: 宣传视频: bilibili 团队进度开发进度 项目 开发进度 迭代进度 Arduino 100% 100% 微信小程序 100% 100% 组员进度 请注意对照火花空间相关内容. 成员 团队分工 开发进度 贡献率 ElliasK 所有模块的初始开发、迭代开发和调试 100% 90% Picaloe 设备调试协力、影视协力、文案协力 100% 10% 统计数据硬件端 软件端 调试日志2020/11/16 校内 户外调试 机型: v0.0-pre 原型机前体 HYAsst THE ORIGIN de pre-release调试项目调试结果GPS精度测试通过(WG-84标准)WG-84转GCJ-02黑箱结果测试基本拟合, 部分点位有10m以上的精度误差基础便携性测试通过系统稳定性测试 (ESP8266方案)通过ESP8266通信能力测试通过, 全时连接 2020/11/18 寝室 黑箱算法结论验证 测试项目测试结果WG-84转GCJ-02黑箱结果测试 (二周目)部分点位漂得厉害. 厄厄, 太野蛮了 2020/11/20 居庸关 长途奔袭调试 机型: v0.0-pre 原型机前体 HYAsst THE ORIGIN de pre-release调试项目调试结果ESP8266移动中通信能力测试通过, 全时连接高速便携性测试通过 Photos 2020/11/22 蟒山 户外调试 机型: v0.0-pre 原型机前体 HYAsst THE ORIGIN de pre-release调试项目调试结果ESP8266移动中通信能力测试通过, 全时连接高速便携性测试通过恶劣路面便携性测试未通过, 有杜邦线松动系统稳定性测试 (ESP8266方案) (二周目)检测到的死机一次, 原因不明骑行中陀螺仪数据采集success Photos 2020/11/25-27 寝室 室内续航测试 机型: v0.1 初代机 ASKR YGGDRASILLS调试项目调试结果ESP8266方案续航测试 (900mAh)113min, 续航良好系统稳定性测试 (ESP8266方案) (三周目)检测到的死机一次, 原因为ESP8266的TCP释放失败SIM800C方案续航测试 (900mAh)185min, 续航良好系统稳定性测试 (SIM800C方案)在进行TCP通信时触发事故告警会死机, 需要断电重启.理想最大电源solution: 6500mAh, 可提供最大电源solution: 30Ah奇怪的事情发生了, SIM800C续航比ESP8266还长(未曾设想的道路).[FIXED] SIM800C在进行TCP通信时触发事故告警会死机 2020/11/28 校内 户外调试 机型: v0.1 初代机 ASKR YGGDRASILLS从此次开始所有的系统稳定性测试默认为SIM800C方案.调试项目调试结果SIM800C通信能力测试通过, 全时连接精确的WG-84 to GCJ-02公式验证通过GPS速度精度测试通过, 测得误差约为±0.092kmph事故侦测算法及参数验证 (二周目)通过, 判断准确基础便携性测试 (二周目)通过高速便携性测试 (二周目)通过恶劣路面便携性测试 (二周目)通过系统稳定性测试 (二周目)通过[FIXED] 微信小程序中当前点标注由于图片中心点问题在画布缩小后看起来定位不准[FIXED] timer = setInterval失效 只能手动刷新 Photos 2020/12/06 校内 户外调试 机型: 三代目: RAMIEL OCTAHEDRON调试项目调试结果事故侦测算法及参数验证 (三周目)通过, 判断准确高速便携性测试 (三周目)通过恶劣路面便携性测试 (三周目)通过系统稳定性测试通过整体通信能力测试通过, 全时连接续航测试 (900mAh) (二周目)203min, 续航良好系统稳定性测试 (三周目)通过 开发点滴音乐推荐 电子熏香2020年11月20日早晨6点25分, 由于没睡醒进行了一些奇妙操作导致SIM800C冒烟. R.I.P. 从此我组给部分硬件损毁的情况起了别名: 别名 实际故障 放炮 炸电解电容/二极管 电子熏香 板子糊了 核爆 炸电源 噜 Apple punch🍎砸牛顿, 于是有了万有引力定律. 🍎砸我们, 于是弯了电容和杜邦线. 事故现场 团队故事Picaloe 首先非常有幸能与我们小组组长一同完成本次大作业，本人是一个完全技术上的萌新小白，但与一个拥有过硬技术的组长共同完成了这个我认为很完美的项目，过程中我体会到了完成一个项目的难度，技术掌握，项目规划，文案策划等等，组长很早就已经开始策划本次大作业的方向了，由于本人技术原因，在技术创新方面我出力甚少，但在文案策划排版方面，我学到了许多新知识，例如LaTeX，html一些的文本代码的编写与格式的实现。我想说，这个项目，无论在，硬件，软件，还是文案布局方面，都付出了极大的心血，组长打代码的声音我是忘不了了。这次项目下来，我认识到了小组合作的重要性，也初步加深了对这个专业作为工科的理解，希望今后能慢慢从一只萌新小白成长为一位老打工人。 ElliasK 这是一次很充实、很有趣、很具有挑战性、自认为不管是过程还是效果都姑且认为可以令人满意的大作业。 首先，在项目初期元认知和项目初期思维层面就具有一定的挑战。我们从用户的角度出发，积极运用课内所体悟到的元认知的相关内容，在分析用户需求、确定产品定位等方面深刻体悟到了元认知对于项目初期项目确立的重要意义。我们不但应用了课内所学的元认知的内容，还对课内的知识进行了进一步的扩展，在本次项目的实践中，发现我最初的胡思乱想是有效果的，是对实践有指导意义的。这个创新便是Q&amp;A部分（在次文档的开头有这一部分的简单举例）。我们通过一对一的用户访谈以及针对于产品功能及技术实现的方案公开招标，收集到了大量热心用户（特别是鸿雁自行车协会中的具有丰富骑行经验的热心车友）的质疑和建议，在分析与解答热心用户的提问或建议的同时，我们发现了项目中所存在的，不管是功能方面的还是技术实现方面的漏洞，并在项目进行的过程中进行调整，使得我们的项目尽可能的完善。我们很希望这种思路可以进入信息与通信工程导论课程元认知教学的内容中，旨在增强需求分析能力、促进研发交流、提升社区活力，为更多优秀作品的诞生垫下基石。 得益于项目初期科学理论的指导以及热心用户的帮助，我自认为我们的项目具有创新性与实用性。创新性无需多言：面向广大骑行组织以及个人的，能够结合实时监测、事故侦测、信息共享的，便于携带且造价低廉的，端到端的，软硬结合的骑行安全监控系统是史无前例的。对于实用性，通勤时马路交通的复杂性、竞赛或日常训练高速骑行的危险性是众所周知的，以地图为画板进行图片共享是将图片与位置结合的最好手段，实时定位以及小程序中所开发的其他功能项目对于自行车协会运营的简化程度也是可想而知的。正因如此，可以说，这个项目充分发挥了硬件–&gt;云&lt;–&gt;微信小程序的端到端系统的功能优势，在创新性与实用性的方面做到了能够真正解决实际问题、开辟新的道路的程度。 其次，在项目的研发阶段，我们应用了项目管理、科技创新管理的知识理论体系，在PMBOK、PRINCEⅡ等专业化项目管理理论体系，有效地做到了一下几点指标： 人尽其力。 我们的小组成员实力参差不齐，我作为组长，自认为拥有较强的组织领带和项目经理能力，并且不管是基础的代码编写、焊接、视频制作、文档撰写，还是比较高等的算法设计及应用、数据结构设计及应用、元认知、项目开发思维，相比与组员都有得天独厚的优势，所以贡献主要在项目开发和迭代过程中。对于技术力较弱的队友，因其有摄影的爱好，便承担了展示视频制作中的素材采集工作，在开发和调试过程中所担任的后勤保障的工作也极为重要。在开发的过程中，我们分工明确，配合默契，比起我单打独斗，效率的确有显著提升，项目开发体验明显改善，营造了一种清新愉快的和睦气氛。 指标动态化。 众所周知，项目的目标并不完全是从项目的开始就定好的，由于项目干系人（在此次项目中，项目干系人大多为Q&amp;A体系中的热心用户，特别是车协中心组活动部的成员以及在项目开发方面有深刻见解的学长）需求的不断变化，开发进程中对技术把握的更新，在开发进程中发现的项目的问题的解决，导致项目的目标及技术实现等指标不断变化。在诸多变化之中，我们积极应对，应用DDP（动态动态规划）的思想，在每一次状态转移中都尽力保持能够达到最终结果的最优解的状态，从而在各种层面上保证了产品的完整性和完成度。 物尽其用。 得益于科技创新理论体系的指引，我们在对技术手段的选取上可谓是毫不冗余，物尽其用。我们对应于每一个需求所采取的技术手段都是经过深思熟虑的，使得功能实现的技术开销能够维持在较低的水平。例如，我们之所以要做端到端系统，并不是像某些同年级项目一样只是为了得到更高的项目复杂度，进而得到更高的分数，我们采取端到端的理由是因为端到端系统真的是我们的刚需，是我们无法回避的。如果我们的项目可以不使用端到端系统，能够使用更简单的、实现代价更低的系统就可以完成，并且其性能没有过大损失的话，我们舍弃端到端便是理所应当之事。对于WG-84 to GCJ-02制式转换，我们最开始采取模拟退火（莫得深度）进行黑箱测试，可以得到基本满足使用精度的可行解；但是经过后来的测试，我们发现在一些奇怪的点位上我们得出的解有明显的偏移，于是我们果断使用数学方法，最终得出了精准的解决方案。对于事故侦测中对一定时间内采集到的数据的均值的维护，采取了被广泛认同是最佳方案的循环数组的方案，能够在尽可能节省空间的前提下实现功能。对于数据库内容的更新，我们直接采取了云函数的方式。尽可能使用较为简单便捷的技术方案，不管是在开发过程中的代价问题，还是在使用过程中的资源占用以及健壮性问题，尽量使用简单便捷的技术方案是有其现实意义的，是项目开发过程中所必须追求的。这是项目思维的体现，是对技术的精准掌握的体现，是对项目本身指标熟悉程度的体现，是对用户的尊重的体现，是项目工程师或项目经理对自身技术能力以及元认知能力的极佳彰显。 第三，在迭代过程中，有了前两步的积累（特别是Q&amp;A模块产生的反馈），我们在实现基础功能之后，在迭代过程中应该选取的方向已经很明确了。对于一个在移动场景中使用的产品，我们充分注重了产品的便携性（包括形状，大小，重量，坚固程度）以及续航，虽然便携性结果并不太令人满意，由于时间的限制我们预测我们的印刷电路板无法及时到货，我们所有的设备（除了集信息显示、电源接入、电路稳定、线材收束、开关控制等功能为一体的我花了将近两天晚上来设计和焊接的大小仅有4x6cm的我也不知道到底应该叫什么的洞洞板之外）基本停留在公版方案上，虽然使用铜柱将所有板子固定，并且将杂乱无章的线材收束起来，再用大排线接到arduino板上（上文提到的我也不知道到底应该叫什么的洞洞板其实是双面焊接，背面也有排针（焊得我险些去世（不是））（硬件连接中有展示图片），整个产品的便携性也是可以保证的。在续航方面，我们取得了在常规工况下长达23小时的优秀的续航成绩，以至于我们因此取消了本来打算实装的睡眠方案，改而采取优化发包频率的策略。正是由于我们在前期充分重视元认知和用户反馈，我们在迭代时有充足的抓手，能够快且精准地找到方向，使迭代过程顺利进行。 最后，在项目收尾过程（包括项目文档撰写、展示视频制作等）中，由于前期项目进行过程中的良好习惯，收尾进程也进行地尤为顺利。在此次项目开发的过程中，我充分意识到了一个完全的项目的最基本要求其中的几条就是元认知、项目开发思维、项目管理思维、科技创新管理思维的始终贯彻，良好开发习惯的始终保持。感谢这次大作业让我在大学的第一个学期里拥有了一段愉快的、难以忘怀的记忆，进一步促进了我对项目开发的热爱。这依然成为我记忆宝库中为数不多的珍宝，将伴随着我度过从今以后的岁月。 室外调试过程中拍的照片中的几张 Next Dream.. @2020.12.07进一步迭代前景展望 性能更强功耗更低成本更低的MCU. 目前计划使用STM32进行进一步开发. 更好的通信功耗及性能. 目前计划改用NB-IoT模块, 使用CoAP协议. 更美的外观, 更高的便携性, 更好的电气性能. 计划绘制并印刷电路板, 完成各项设备的集成化. 更好的软件优化. 重构硬件代码, 码风更为清秀、封装性更强的同时充分考虑各种使用场景, 力求性能和功耗平衡的最优解. 微信小程序代码性能进一步优化, 注重代码性能和效率. 继续完善微信小程序周边功能, 比如用户注册时的短信验证码, 个人信息修改等等. Dream never eclipses. We are always on the way forward. Recerence TheWayForward FAIOJ C++参考手册 已知不可逆的坐标转换算法，通过结果进行反算的方法 w3school ECMAScript 6 Promise对象 GCJ-02到WG-84坐标变换 百度文库 NEO-7_ProductSummary_(GPS.G7-HW-11003) KalmanFilterforDummies Introduction-and-implementations-of-the-kalman-filter 百度文库 基于单片机控制的积分式电压表设计 SCoop Github issue about timer0_overflow_count Arduino PROGMEM SIM800 Series AT Command Manual V1.07 百度文库 SIM800C_硬件设计手册_V1.01 CSDN JOY_TECH SIM800C的使用心得 百度文库 MPU6050 技术手册 微信小程序文档 - 微信开放文档 Arduino tutorials ArduinoISP The LaTeX Project CTEX : OnlineDocuments LaTeX Hypertext Help with LaTeX LATEX2e 插图指南 编译原理——链接过程 OneNET 文档中心 OneNET 多协议接入 程序员大本营 HTTP报文格式 知乎 HTTP报文格式简介 std::string::c_str WeUI 文档 GitHub Tencent WeUI Parser富文本插件 文档 GitHub jin-yufeng Parser","categories":[],"tags":[]},{"title":"YMOI圣地巡礼","slug":"recall-oi-20200828","date":"2020-08-28T13:57:07.000Z","updated":"2020-09-07T13:53:37.481Z","comments":true,"path":"recall-oi-20200828/","link":"","permalink":"https://brynhild.online/recall-oi-20200828/","excerpt":"2020.8.28 YMOI暑假24中集训圣地巡礼goto: ELLIAS的退役之路","text":"2020.8.28 YMOI暑假24中集训圣地巡礼goto: ELLIAS的退役之路 罗森便利店(七七街店)2020-08-28 2018-07-25 大连市第24中学 次の旅を楽しみにしています!","categories":[{"name":"memory","slug":"memory","permalink":"https://brynhild.online/categories/memory/"}],"tags":[]},{"title":"FAIOJ 101 左偏树 可并堆 STL简单实现","slug":"faioj0101-leftist-heap","date":"2020-08-11T05:14:11.000Z","updated":"2020-09-02T14:54:12.683Z","comments":true,"path":"faioj0101-leftist-heap/","link":"","permalink":"https://brynhild.online/faioj0101-leftist-heap/","excerpt":"FAIOJ #101洛谷 P3377","text":"FAIOJ #101洛谷 P3377 使用了 ext/pb_ds/priority_queue.hpp. 由于使用结构体或者pair同时存数和编号较为繁琐, 由于本题数据不大, 故使用 $data*(n+1)+i$ 来同时存储数据和编号. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;cstdio&gt;#include &lt;ext/pb_ds/priority_queue.hpp&gt;using namespace std;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],but[ELAS],*_p1=buf,*_p2=buf,*_p3=but,*_p4=but+ELAS;static int bit[20];#define gc() ((_p1==_p2)&amp;&amp;(_p2=(_p1=buf)+fread(buf,1,ELAS,stdin),_p1==_p2)?EOF:*_p1++)inline void pt(char c) &#123; (_p3==_p4)?(fwrite(_p3=but, 1, ELAS, stdout), *_p3++=c):(*_p3++=c);&#125;inline long long read () &#123; register long long x=0; register char c=gc(); register bool m=false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (!(c ^ &#x27;-&#x27;)) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;inline unsigned long long readu () &#123; register unsigned long long x=0; register char c=gc(); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c &gt;=&#x27;0&#x27; &amp;&amp; c &lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return x;&#125;inline void write (long long x) &#123; if (!x) &#123;putchar(&#x27;0&#x27;); return;&#125; register long long pos=0; if (x &lt; 0) x = -x, pt (&#x27;-&#x27;); for (; x; x/=10) bit[++ pos] = x%10; for (register long long i=pos; i; --i) pt(bit[i]^&#x27;0&#x27;);&#125;#define maxn 100001long long fa[maxn];inline long long find (long long x) &#123; return (!(x^fa[x]))? x:fa[x]=find(fa[x]);&#125;__gnu_pbds::priority_queue&lt;long long, greater &lt;long long&gt;, __gnu_pbds::binomial_heap_tag&gt; que[maxn];signed main ()&#123; register long long n=readu()+1, m=readu(), opt, x, y; register bool del[maxn]; for (register long long i=1; i^n; ++i) fa[i]=i, del[i]=false, que[i].push(read()*n+i); while (m --) &#123; opt = read(), x = read(); if (opt^2) &#123; y = read (); if (del[x] || del[y]) continue; if ((x=find(x))^(y=find(y))) &#123; fa[y]=x, que[x].join(que[y]); &#125; &#125; else &#123; if (del[x]) pt(&#x27;-&#x27;), pt(&#x27;1&#x27;), pt(&#x27;\\n&#x27;); else &#123; write ((opt=que[y=find(x)].top())/n), pt (&#x27;\\n&#x27;); que[y].pop(), del[opt%n] = true; &#125; &#125; &#125; return fwrite (but, 1, _p3-but, stdout), 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"OPTIMIZATION","slug":"OPTIMIZE","date":"2020-08-07T05:20:42.000Z","updated":"2020-09-02T14:51:59.433Z","comments":true,"path":"OPTIMIZE/","link":"","permalink":"https://brynhild.online/OPTIMIZE/","excerpt":"编译选项 普通的快读快写 fread/fwrite优化的快读快写 浮点数的快读快写 内嵌asm","text":"编译选项 普通的快读快写 fread/fwrite优化的快读快写 浮点数的快读快写 内嵌asm LuoguBlog Fast Read &amp; WriteELLIAS_Old123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354class fastio &#123; private: inline char gc() &#123; static char buf[1&lt;&lt;14],*p1=buf,*p2=buf; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;14,stdin),p1==p2)?EOF:*p1++; &#125; public: inline void getint (int &amp;to) &#123; register int x = 0; register char c = gc(); register bool m = 0; while (c!=&#x27;-&#x27;&amp;&amp;(c&lt;&#x27;0&#x27;||c&gt;&#x27;9&#x27;) &amp;&amp; c != &#x27;-&#x27;) c = gc(); if (c == &#x27;-&#x27;) c = gc(), m = 1; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + c - &#x27;0&#x27;, c = gc(); if (m) return -x; else return x; &#125; inline void getuint (int &amp;to) &#123; int x = 0; char c = gc(); while (!isdigit(c)) c = gc(); while (isdigit(c)) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + c - &#x27;0&#x27;, c = gc(); to = x; &#125; inline void getdou (double &amp;to) &#123; double x=0; char ch = getchar (); bool m = 0; while (!isdigit(ch) &amp;&amp; ch != &#x27;-&#x27;) ch = gc (); if (ch == &#x27;-&#x27;) ch = gc(), m = 1; while (isdigit(ch)) x = x * 10 + (ch-48), ch = gc (); if (ch == &#x27;.&#x27;) &#123; double s = 0.1; ch = gc (); while (isdigit(ch)) x = x + (ch-48)*s,s/=10,ch = gc (); &#125; if (m) to = -x; else to = x; &#125; inline void getudou (double &amp;to) &#123; double x=0; char ch = gc (); while (!isdigit(ch)) ch = gc (); while (isdigit(ch)) x = x * 10 + (ch-48), ch = gc (); if (ch == &#x27;.&#x27;) &#123; double s = 0.1; ch = gc (); while (isdigit(ch)) x = x + (ch-48)*s,s/=10,ch = gc (); &#125; to = x; &#125; inline void write (int x) &#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48); &#125;&#125; io; SJB1234567891011121314151617181920212223242526272829303132333435namespace fastIO &#123; const int str = 1&lt;&lt;20; const char* kiana = &quot;\\n&quot;; struct Reader &#123; char buf[str], *s, *t; bool EOF_FLG; Reader():s(buf), t(buf), EOF_FLG(false) &#123;&#125;; inline char gt() &#123;return s==t&amp;&amp;((t=(s=buf)+fread(buf,1,str,stdin))==s)?EOF:(*s++);&#125; template &lt;typename T&gt; Reader&amp;operator &gt;&gt; (T&amp;x) &#123; if (EOF_FLG)return *this; register char c=0,d; while (c != EOF &amp;&amp; (!isdigit(c)))d=c,c=gt(); if(c == EOF) &#123;EOF_FLG=true; return *this;&#125; else x = 0; while(isdigit(c)) x = (x&lt;&lt;3) + (x&lt;&lt;1) + c - &#x27;0&#x27;, c = gt(); if (d == &#x27;-&#x27;) x =- x; return *this; &#125; &#125; cin; struct Writer &#123; char buf[str],*s,*t; Writer():s(buf),t(buf+str) &#123;&#125; ~Writer() &#123;fwrite(buf,1,s-buf,stdout);&#125; inline void pt(char c) &#123;(s==t)?(fwrite(s=buf,1,str,stdout),*s++=c):(*s++=c);&#125; template&lt;typename T&gt;Writer&amp;operator&lt;&lt;(T x) &#123; if(!x) return pt(&#x27;0&#x27;),*this; if(x&lt;0) pt(&#x27;-&#x27;), x = -x; register char a[30],t=0; while(x)a[t++]=x%10,x/=10; while(t--)pt(a[t]+&#x27;0&#x27;); return *this; &#125; Writer&amp;operator&lt;&lt;(const char*s) &#123;while(*s)pt(*s++);return *this;&#125; &#125; cout;&#125; ELLIAS_New1234567891011121314151617181920const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = 0; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (int x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (int x) &#123;if(x&lt;0)x=-x,putchar(&#x27;-&#x27;); write (x); putchar (&#x27;\\n&#x27;);&#125; ELLIAS@2020 (fread fwrite 优化版本)包括 fread fwrite 改写的 getchar() 和 putchar() 浮点数快读快写 整数快读快写 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;cstdio&gt;using namespace std;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],but[ELAS],*_p1=buf,*_p2=buf,*_p3=but,*_p4=but+ELAS;static int bit[20];#define gc() ((_p1==_p2)&amp;&amp;(_p2=(_p1=buf)+fread(buf,1,ELAS,stdin),_p1==_p2)?EOF:*_p1++)inline void pt(char c) &#123; (_p3==_p4)?(fwrite(_p3=but, 1, ELAS, stdout), *_p3++=c):(*_p3++=c);&#125;inline long long read () &#123; register long long x=0ll; register char c=gc(); register bool m=false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (!(c ^ &#x27;-&#x27;)) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;inline long long readu () &#123; register long long x=0ll; register char c=gc(); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c &gt;=&#x27;0&#x27; &amp;&amp; c &lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return x;&#125;inline long double readdou () &#123; register long double x=0.0; register char c=gc(); register bool m=false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (!(c ^ &#x27;-&#x27;)) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x * 10.0 + (c ^ &#x27;0&#x27;), c = gc(); if (!(c ^ &#x27;.&#x27;)) &#123; register long double s=0.1; c=gc(); while (c&gt;=&#x27;0&#x27; &amp;&amp; c&lt;=&#x27;9&#x27;) x = x + (c ^ &#x27;0&#x27;) * s, s/=10.0, c=gc(); &#125; return m? -x : x;&#125;inline long double readudou () &#123; register long double x=0.0; register char c=gc(); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x * 10.0 + (c ^ &#x27;0&#x27;), c = gc(); if (!(c ^ &#x27;.&#x27;)) &#123; register long double s=0.1; c=gc(); while (c&gt;=&#x27;0&#x27; &amp;&amp; c&lt;=&#x27;9&#x27;) x = x + (c ^ &#x27;0&#x27;) * s, s/=10.0, c=gc(); &#125; return x;&#125;inline void write (long long x) &#123; if (!x) &#123;pt(&#x27;0&#x27;); return;&#125; register int pos=0; if (x &lt; 0) x = -x, pt (&#x27;-&#x27;); for (; x; x/=10) bit[++ pos] = x%10; for (register int i=pos; i; --i) pt(bit[i]^&#x27;0&#x27;);&#125;inline long long qpow (long long a, long long t) &#123; register long long base = a, ret = 1ll; while (t) &#123; if (t&amp;1) ret = ret * base; base = base * base, t &gt;&gt;= 1; &#125; return ret;&#125;inline void writedou (long double x, int res=9) &#123; if (x == 0.0) &#123; pt(&#x27;0&#x27;), pt(&#x27;.&#x27;); for (register int i=0; i^res; ++i) pt (&#x27;0&#x27;); return; &#125; else &#123; if (x &lt; 0.0) x=-x, pt(&#x27;-&#x27;); register long long clf=qpow(10, res); register long long flt=(long long)(x * clf) % clf; write ((long long) x); pt (&#x27;.&#x27;); register int pos = 0; for (; pos^res; flt/=10) bit[++ pos] = flt%10; for (register int i=pos; i; --i) pt(bit[i]^&#x27;0&#x27;); &#125;&#125;signed main ()&#123; //主程序代码内容 fwrite (but, 1, _p3-but, stdout); return 0;&#125; SWITCHOLD (2017)123456789#pragma GCC optimize (&quot;-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2&quot;, 3)#pragma G++ optimize (&quot;Ofast&quot;, 3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;) OLD(2018.3)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC optimize (&quot;inline&quot;)#pragma GCC optimize (&quot;-fgcse&quot;)#pragma GCC optimize (&quot;-fgcse-lm&quot;)#pragma GCC optimize (&quot;-fipa-sra&quot;)#pragma GCC optimize (&quot;-ftree-pre&quot;)#pragma GCC optimize (&quot;-ftree-vrp&quot;)#pragma GCC optimize (&quot;-fpeephole2&quot;)#pragma GCC optimize (&quot;-ffast-math&quot;)#pragma GCC optimize (&quot;-fsched-spec&quot;)#pragma GCC optimize (&quot;unroll-loops&quot;)#pragma GCC optimize (&quot;-falign-jumps&quot;)#pragma GCC optimize (&quot;-falign-loops&quot;)#pragma GCC optimize (&quot;-falign-labels&quot;)#pragma GCC optimize (&quot;-fdevirtualize&quot;)#pragma GCC optimize (&quot;-fcaller-saves&quot;)#pragma GCC optimize (&quot;-fcrossjumping&quot;)#pragma GCC optimize (&quot;-fthread-jumps&quot;)#pragma GCC optimize (&quot;-funroll-loops&quot;)#pragma GCC optimize (&quot;-fwhole-program&quot;)#pragma GCC optimize (&quot;-freorder-blocks&quot;)#pragma GCC optimize (&quot;-fschedule-insns&quot;)#pragma GCC optimize (&quot;inline-functions&quot;)#pragma GCC optimize (&quot;-ftree-tail-merge&quot;)#pragma GCC optimize (&quot;-fschedule-insns2&quot;)#pragma GCC optimize (&quot;-fstrict-aliasing&quot;)#pragma GCC optimize (&quot;-fstrict-overflow&quot;)#pragma GCC optimize (&quot;-falign-functions&quot;)#pragma GCC optimize (&quot;-fcse-skip-blocks&quot;)#pragma GCC optimize (&quot;-fcse-follow-jumps&quot;)#pragma GCC optimize (&quot;-fsched-interblock&quot;)#pragma GCC optimize (&quot;-fpartial-inlining&quot;)#pragma GCC optimize (&quot;no-stack-protector&quot;)#pragma GCC optimize (&quot;-freorder-functions&quot;)#pragma GCC optimize (&quot;-findirect-inlining&quot;)#pragma GCC optimize (&quot;-fhoist-adjacent-loads&quot;)#pragma GCC optimize (&quot;-frerun-cse-after-loop&quot;)#pragma GCC optimize (&quot;inline-small-functions&quot;)#pragma GCC optimize (&quot;-finline-small-functions&quot;)#pragma GCC optimize (&quot;-ftree-switch-conversion&quot;)#pragma GCC optimize (&quot;-foptimize-sibling-calls&quot;)#pragma GCC optimize (&quot;-fexpensive-optimizations&quot;)#pragma GCC optimize (&quot;-funsafe-loop-optimizations&quot;)#pragma GCC optimize (&quot;inline-functions-called-once&quot;)#pragma GCC optimize (&quot;-fdelete-null-pointer-checks&quot;) NOIp20181234567891011121314151617181920212223242526272829303132333435363738394041#pragma GCC optimize (2)#pragma GCC optimize (&quot;inline&quot;)#pragma GCC optimize (&quot;-fgcse&quot;)#pragma GCC optimize (&quot;-fgcse-lm&quot;)#pragma GCC optimize (&quot;-fipa-sra&quot;)#pragma GCC optimize (&quot;-ftree-pre&quot;)#pragma GCC optimize (&quot;-ftree-vrp&quot;)#pragma GCC optimize (&quot;-fpeephole2&quot;)#pragma GCC optimize (&quot;-ffast-math&quot;)#pragma GCC optimize (&quot;-fsched-spec&quot;)#pragma GCC optimize (&quot;unroll-loops&quot;)#pragma GCC optimize (&quot;-falign-jumps&quot;)#pragma GCC optimize (&quot;-falign-loops&quot;)#pragma GCC optimize (&quot;-falign-labels&quot;)#pragma GCC optimize (&quot;-fdevirtualize&quot;)#pragma GCC optimize (&quot;-fcaller-saves&quot;)#pragma GCC optimize (&quot;-fcrossjumping&quot;)#pragma GCC optimize (&quot;-fthread-jumps&quot;)#pragma GCC optimize (&quot;-funroll-loops&quot;)#pragma GCC optimize (&quot;-freorder-blocks&quot;)#pragma GCC optimize (&quot;-fschedule-insns&quot;)#pragma GCC optimize (&quot;inline-functions&quot;)#pragma GCC optimize (&quot;-ftree-tail-merge&quot;)#pragma GCC optimize (&quot;-fschedule-insns2&quot;)#pragma GCC optimize (&quot;-fstrict-aliasing&quot;)#pragma GCC optimize (&quot;-falign-functions&quot;)#pragma GCC optimize (&quot;-fcse-follow-jumps&quot;)#pragma GCC optimize (&quot;-fsched-interblock&quot;)#pragma GCC optimize (&quot;-fpartial-inlining&quot;)#pragma GCC optimize (&quot;no-stack-protector&quot;)#pragma GCC optimize (&quot;-freorder-functions&quot;)#pragma GCC optimize (&quot;-findirect-inlining&quot;)#pragma GCC optimize (&quot;-fhoist-adjacent-loads&quot;)#pragma GCC optimize (&quot;-frerun-cse-after-loop&quot;)#pragma GCC optimize (&quot;inline-small-functions&quot;)#pragma GCC optimize (&quot;-finline-small-functions&quot;)#pragma GCC optimize (&quot;-ftree-switch-conversion&quot;)#pragma GCC optimize (&quot;-foptimize-sibling-calls&quot;)#pragma GCC optimize (&quot;-fexpensive-optimizations&quot;)#pragma GCC optimize (&quot;inline-functions-called-once&quot;)#pragma GCC optimize (&quot;-fdelete-null-pointer-checks&quot;) 内嵌asm优化a * b % mo12345inline long long mul_mod (register long long a,register long long b,register long long mo) &#123; register long long ret; __asm__ __volatile__ (&quot;\\tmull %%ebx\\n\\tdivl %%ecx\\n&quot; : &quot;=d&quot;(ret):&quot;a&quot;(a),&quot;b&quot;(b),&quot;c&quot;(mo)); return ret;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"线段树 namespace","slug":"seg-tree-namespace","date":"2020-07-26T05:46:23.000Z","updated":"2020-09-02T14:51:42.940Z","comments":true,"path":"seg-tree-namespace/","link":"","permalink":"https://brynhild.online/seg-tree-namespace/","excerpt":"线段树 namespace","text":"线段树 namespace 12345678910111213141516171819202122232425262728293031323334namespace Seg_Tree &#123;#define ls p &lt;&lt; 1#define rs p &lt;&lt; 1 | 1#define mid ((l + r) &gt;&gt; 1) int mn[N &lt;&lt; 2], pos[N &lt;&lt; 2], tag[N &lt;&lt; 2]; inline void pushup (int p) &#123; mn[p] = std::min (mn[ls], mn[rs]), pos[p] = !(mn[p]^mn[rs]) ? pos[rs] : pos[ls]; &#125; inline void modify (int p, int x) &#123; tag[p] += x, mn[p] -= x; &#125; inline void pushdown (int p) &#123; if (tag[p]) modify (ls, tag[p]), modify (rs, tag[p]), tag[p] = 0; &#125; static void build (int p, int l, int r) &#123; if (!(l^r)) return mn[p] = wait[l], pos[p] = l, void (); else build (ls, l, mid), build (rs, mid + 1, r), pushup (p); &#125; static void update (int p, int l, int r, int L, int R, int x) &#123; if (L &gt; r || l &gt; R || L &gt; R) return; else if (L &lt;= l &amp;&amp; r &lt;= R) return modify(p, x); else pushdown (p), update (ls, l, mid, L, R, x), update (rs, mid + 1, r, L, R, x), pushup (p); &#125; static int find (int p, int l, int r, int L, int R) &#123; if (L &gt; r || l &gt; R || L &gt; R) return 0; else if (L &lt;= l &amp;&amp; r &lt;= R) return p; pushdown(p); register int p1 = find (ls, l, mid, L, R), p2 = find (rs, mid + 1, r, L, R); return mn[p1] &gt; mn[p2] ? p2 : p1; &#125;#undef ls#undef rs#undef mid&#125; 1using namespace Seg_Tree;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"},{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"FAIOJ 1499 快速幂取模 (加强版)","slug":"faioj1499-qpow-fast","date":"2020-07-26T05:38:42.000Z","updated":"2020-09-24T15:44:01.737Z","comments":true,"path":"faioj1499-qpow-fast/","link":"","permalink":"https://brynhild.online/faioj1499-qpow-fast/","excerpt":"扩展欧拉定理题目链接","text":"扩展欧拉定理题目链接 $$ {a}^b\\ mod\\ p = {a}^{b\\ mod\\ φp + φp}\\ mod\\ p $$ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#pragma G++ optimize(&quot;Ofast&quot;, 3)#pragma GCC optimize(&quot;Ofast&quot;, 3)#pragma GCC target(&quot;sse3&quot;, &quot;sse2&quot;, &quot;sse&quot;)#pragma GCC target(&quot;avx&quot;, &quot;sse4&quot;, &quot;sse4.1&quot;, &quot;sse4.2&quot;, &quot;ssse3&quot;)#pragma GCC target(&quot;f16c&quot;)#pragma G++ target(&quot;sse3&quot;, &quot;sse2&quot;, &quot;sse&quot;)#pragma G++ target(&quot;avx&quot;, &quot;sse4&quot;, &quot;sse4.1&quot;, &quot;sse4.2&quot;, &quot;ssse3&quot;)#pragma G++ target(&quot;f16c&quot;)#include &lt;cstdio&gt;#include &lt;cstring&gt;#define Re registerusing namespace std;typedef long long ll;inline long long mul_mod (register long long a,register long long b,register long long mo) &#123; register long long ret; __asm__ __volatile__ (&quot;\\tmull %%ebx\\n\\tdivl %%ecx\\n&quot; : &quot;=d&quot;(ret):&quot;a&quot;(a),&quot;b&quot;(b),&quot;c&quot;(mo)); return ret;&#125;inline long long qpow(Re ll a, Re ll t, Re ll m) &#123; register long long base = a % m, ret = 1ll; while (t) &#123; if (t &amp; 1) ret = mul_mod (ret, base, m); base = mul_mod (base, base, m), t &gt;&gt;= 1; &#125; return ret % m;&#125;char aa[101], bb[101];signed main() &#123; register long long a = 0ll, b = 0ll, m, mm, phi; scanf(&quot;%s %s %lld&quot;, aa, bb, &amp;m); mm = phi = m; for (register ll i = 2ll; i * i &lt;= mm; ++i) &#123; if (!(mm % i)) &#123; phi = phi / i * (i - 1); while (!(mm % i)) mm /= i; &#125; &#125; if (mm &gt; 1) phi = phi / mm * (mm - 1); register int la = strlen(aa), lb = strlen(bb); for (register int i = 0; i &lt; la; ++i) a = (a * 10 + (aa[i] ^ &#x27;0&#x27;)) % m; for (register int i = 0; i &lt; lb; ++i) b = (b * 10 + (bb[i] ^ &#x27;0&#x27;)) % phi; return printf(&quot;%lld&quot;, qpow(a, b &gt; phi? (b % phi + phi) : b % phi, m)), 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"珂学上网 基于VultrVPS的SSR服务器的基本搭建","slug":"vultr_ssr_vpn_buildup","date":"2020-03-01T22:08:23.000Z","updated":"2020-09-02T14:55:33.371Z","comments":true,"path":"vultr_ssr_vpn_buildup/","link":"","permalink":"https://brynhild.online/vultr_ssr_vpn_buildup/","excerpt":"Vultr SSR VPS 锐速 CentOS VPN GoogleBBR 防火墙","text":"Vultr SSR VPS 锐速 CentOS VPN GoogleBBR 防火墙 购买 VPS 服务器我们应该选择国外的 VPS(Virtual Private Server) 提供商,这里推荐 Vultr,性价比较高,最低有 $2.5/m 的,但其只支持 IPv6 ,所以个人搭建推荐 $3.5/m. 目前新账号充值 $10 可赠送 $50,是相当划算的.如果想要通过注册多个账号来减少资费,请务必注意 IP 地址及 GPS 定位. VPS服务器的搭建和连接服务器搭建在 Product 页点击加号新建服务器. 选择 Cloud Compute. 选择自己熟悉的 OS.这里以 CentOS 为例. CentOS 版本建议选6以上,否则也许会出现未知的问题. Vultr 提供多个地区的服务器,建议一次性搭建多台之后逐个测试速度,速度较慢的删除即可.服务器按照小时计费,不需要担心资费浪费问题. 扩展功能按需要选择.这里建议勾选 Enable IPv6. 服务器搭建完成后可以在 Products 页面看到. 服务器连接在服务器页面,我们需要记下服务器的 IP 用户名 密码. 我们需要终端用 SSH 来连接 VPS.在 Windows 操作系统上推荐 Xshell. Vultr 网站上也提供了命令行,但不推荐使用. 在Xshell上连接文件-&gt;新建 在连接中填写相关内容. 在用户身份验证中填写用户名和密码. 连接即可. 在终端连接1ssh your_username@server_IP -p 22 (22是你VPS的SSH端口) 端口可以省略. 相关内容安装安装SSR安装 wegt 1yum -y install wget 安装 SSR 该脚本由 www.qcgzxw.cn 提供. 1wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh SSR 相关配置依需要而定. 搭建成功后会显示 IP,端口,密码,协议等,用于填写 ShadowsocksR 配置信息. 使用锐速为 SSR 加速锐速模块依赖于内核,基本原理是对丢包情况进行评估,并重发可能丢的数据包,即锐速多倍发包,在一定程度上能够提高 VPN 速度. 首先查询系统内核版本 1uname -r 如返回值以 2 开头,说明服务器为 CentOS6,可直接安装锐速. 如返回值以 3 开头,需要对内核降级. 另: 如果已经安装过 Google BBR 拥塞控制算法,那么无法安装锐速. CentOS6 安装锐速: 1wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install &#x27;2.6.32-642.el6.x86_64&#x27; 更高版本使用以下命令对内核降级: 1wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh 如图所示,系统为 CentOS7,更换内核后系统重启. 重新连接后使用如下指令安装锐速: 1yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install 在过程中图示的三个选项默认即可. 下图为安装运行成功.与锐速相关的指令会在文末给出. 使用 Google BBR 为 SSR 加速这是一个 TCP 拥塞控制算法.Google BBR 的 github 页面: https://github.com/google/bbr 警告: Google BBR 需要升级内核,锐速需要降级内核,二者不可兼得. 卸载原版内核 headers. 1yum remove kernel-headers 安装高版本内核 headers. 1yum --enablerepo=elrepo-kernel -y install kernel-ml-headers 升级 CentOS 系统内核. 1yum -y install kernel-ml kernel-ml-devel 升级 headers. 1yum -y install kernel-ml-headers 对于 CentOS6 1sed -i &#x27;s/^default=.*/default=0/g&#x27; /boot/grub/grub.conf 对于更高版本 1grub2-set-default 0 使用安装脚本安装 Google BBR. 1wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh 这个脚本由 秋水逸冰 提供. 安装后重启服务器,检查 BBR 是否启动. 1lsmod | grep bbr 返回值有 tcp_bbr 模块即说明 BBR 已启动.并不是所有的 VPS 都会有此返回值,若没有也属正常. SSR多端口配置使用 Vim 打开配置文件 1vi /etc/shadowsocks.json 原有内容大致如下: 1234567891011121314151617181920&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;server_port&quot;: 25565, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1081, &quot;password&quot;: &quot;www.qcgzxw.cn&quot;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;protocol&quot;: &quot;auth_sha1_v4_compatible&quot;, &quot;protocol_param&quot;: &quot;&quot;, &quot;obfs&quot;: &quot;http_simple_compatible&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 1, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 1&#125; 删除原有的 server_port 及 password ,新增 port_password ,前面是端口,后面是密码,需要注意格式问题. 示例更改后如下: 12345678910111213141516171819202122232425262728&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1081, &quot;port_password&quot;: &#123; &quot;1096&quot;:&quot;hanyuu&quot;, &quot;1919&quot;:&quot;senpai&quot;, &quot;2020&quot;:&quot;evolution&quot;, &quot;417&quot;:&quot;morsunhy&quot;, &quot;2333&quot;:&quot;morsun&quot;, &quot;11451&quot;:&quot;niconiconi&quot;, &quot;10960&quot;:&quot;hanyuu&quot; &#125;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;protocol&quot;: &quot;auth_sha1_v4_compatible&quot;, &quot;protocol_param&quot;: &quot;&quot;, &quot;obfs&quot;: &quot;http_simple_compatible&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 1, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 1&#125; 保存后修改防火墙配置: 1vi /etc/firewalld/zones/public.xml 原有内容大致如下: 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;zone&gt; &lt;short&gt;Public&lt;/short&gt; &lt;description&gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt; &lt;service name=&quot;dhcpv6-client&quot;/&gt; &lt;service name=&quot;ssh&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;25565&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;25565&quot;/&gt;&lt;/zone&gt; 加入新加入的端口,一行 tcp,一行 udp. 修改后内容大致如下: 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;zone&gt; &lt;short&gt;Public&lt;/short&gt; &lt;service name=&quot;dhcpv6-client&quot;/&gt; &lt;service name=&quot;ssh&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;1096&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;1096&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;1919&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;1919&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;2020&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;2020&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;2333&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;2333&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;11451&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;11451&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;417&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;417&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;10960&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;10960&quot;/&gt;&lt;/zone&gt; 重启 SSR. 1/etc/init.d/shadowsocks restart 重启防火墙. 1firewall-cmd --reload 也可以参考下文的指令按照类似流程安装. SSR的使用下载客户端,配置并连接即可. Shadowsocks: https://shadowsocks.org/ ShadowsocksR: https://github.com/Anankke/SSRR-Windows/ 相关指令扩展SSR1234567891011121314151617#启动SSR/etc/init.d/shadowsocks start#停止SSR/etc/init.d/shadowsocks stop#重启SSR/etc/init.d/shadowsocks restart#状态SSR/etc/init.d/shadowsocks status#卸载SSR./shadowsocks-all.sh uninstall#更改配置参数vim /etc/shadowsocks-r/config.json 锐速1234567891011121314#查看运行状态/appex/bin/serverSpeeder.sh status #启动锐速/appex/bin/serverSpeeder.sh start #停止锐速/appex/bin/serverSpeeder.sh stop #重启锐速/appex/bin/serverSpeeder.sh restart #卸载锐速/appex/bin/serverSpeeder.sh uninstall 防火墙CentOS7之前版本 iptables 命令1234567891011121314151617181920#查看已经开放的端口:/etc/init.d/iptables status#开启端口/sbin/iptables -I INPUT -p tcp --dport 端口 -j ACCEPT#保存设置/etc/rc.d/init.d/iptables save#启动防火墙(永久)chkconfig iptables on#停止防火墙(永久)chkconfig iptables off#启动防火墙(暂时,重启失效)service iptables start#关闭防火墙(暂时,重启失效)service iptables stop CentOS7 firewall 命令1234567891011121314151617181920#启动防火墙systemctl start firewalld#查看防火墙状态systemctl status firewalld#查看已经开放的端口firewall-cmd --list-ports#开启端口(永久)firewall-cmd --zone=public --add-port=端口/tcp --permanent#重启防火墙firewall-cmd --reload#停止防火墙systemctl stop firewalld.service #禁止开机启动systemctl disable firewalld.service","categories":[{"name":"VPN","slug":"VPN","permalink":"https://brynhild.online/categories/VPN/"}],"tags":[{"name":"VPN","slug":"VPN","permalink":"https://brynhild.online/tags/VPN/"},{"name":"VPS","slug":"VPS","permalink":"https://brynhild.online/tags/VPS/"}]},{"title":"扫盲向 利用OBS虚拟摄像头在网课上摸鱼","slug":"obs_internet_class_fishing","date":"2020-03-01T02:08:23.000Z","updated":"2020-09-02T14:53:07.771Z","comments":true,"path":"obs_internet_class_fishing/","link":"","permalink":"https://brynhild.online/obs_internet_class_fishing/","excerpt":"Windows OBS OBS-VirtualCam Facerig","text":"Windows OBS OBS-VirtualCam Facerig INTRODUCTION 「摸鱼之心，人皆有之，咸者能毋丧耳。」 – Hanyuu ELLIAS 近期不少同学问我网课摸鱼的事,于是有了这个扫盲向博客. 当然,您也可以用它来在课上做一些不对劲的事, REQUIREMENT Open Broadcaster Software OBS-VirtualCam Install and run. USEINPUT在”来源”中点击加号添加. 作为视频或图像录一段学习时候的视频或选择一张贴纸. 选择 VLC 视频源或图像. 点击加号添加文件或路径. 作为视频源添加视频捕获装置 作为示例,这里选择了 Facerig 的虚拟摄像头. 我很可爱,请给我钱! 这个模型来自创意工坊,作者为 toribako145. 确保其被激活.分辨率选项视情况而定. 将画面充满屏幕. 用上下箭头调整前后位置.确保其出于可视状态. OUTPUT工具-&gt;虚拟摄像头. 选择目标摄像头(默认即可),水平翻转及保持长宽比例视情况使用. 缓冲帧视性能调整. 启动即可. IN CLASS选择刚才设置的目标摄像头即可. OTHERS 低配置设备可在设置-&gt;视频中调整分辨率来缓解卡顿. 不使用物理摄像头时将其遮住是个好习惯. 使用Facerig时请留意各方面的版权限制. 摸鱼有风险,使用需谨慎. 请各位”务必”以学业为重!","categories":[{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/categories/Trick/"}],"tags":[{"name":"OBS","slug":"OBS","permalink":"https://brynhild.online/tags/OBS/"}]},{"title":"网易云VIP歌曲NCM格式解密","slug":"ncm_unlock","date":"2020-01-11T08:08:00.000Z","updated":"2020-09-02T14:53:23.758Z","comments":true,"path":"ncm_unlock/","link":"","permalink":"https://brynhild.online/ncm_unlock/","excerpt":"Windows Android ncmdump 网易云","text":"Windows Android ncmdump 网易云 INTRODUCTION当发现从网易云音乐下载的 VIP 音乐成了这副样子 不禁要吐槽: 这真是太( ),太( )了. (中文填空,每空2字) 本文将提供几种 NCM 格式的解密方案. WebDev Tools在官网播放页”偷”缓存,发现了看起来对劲的东西,果断下载+转码,用 mp3tag 加入封面及歌曲信息,大功告成. 音乐解锁 - By IXareaunlock-music on GitHub 音乐解锁用于移除已购音乐的加密保护.目前支持网易云音乐(ncm) QQ音乐(qmc,mflac,mgg,tkm)以及其他格式,并使用 MIT 许可协议开放源代码.其使用浏览器对本地文件进行操作,不需要将文件上传. Windows使用 ncmdump 或 ncmdump-gui.链接指向对应的GitHub仓库. 考虑到 GitHub 要”夜缒而出”,给出一定版本的下载地址: Release.zip, ncmdump-gui@25Jan2019 大小: 219129 字节 MD5: D90B1FDFCEC35DD3E5BDE912AB35C436 SHA1: B57308A46244823EC44996E62AD45FE5DD32BF26 CRC32: 36B0CD33 ncmdump-gui-lastest.tar.gz, ncmdump-gui@25Jan2019 大小: 72943 字节 MD5: D21AC64AFD09270C0ABFFADD62D50ECF SHA1: 87186625F385E70102DE58E5B8414F99EF1653F6 CRC32: 7A91F3AE ncmdump-windows-amd64.zip, ncmdump@v0.3.0 大小: 3318258 字节 MD5: 9720D5EE3523D377E7F0F7D499665043 SHA1: 9E4F216562B7CED2533A098255FC16794AAC05CE CRC32: 17FC5336 ncmdump-darwin-amd64.zip, ncmdump@v0.3.0 大小: 3461822 字节 MD5: 0CD5CB0A46DE5532CCCD62CD22261E3F SHA1: A8DDFDA576D703E90F7491BCF6D2A907934534A2 CRC32: A2F413A9 ncmdump-0.3.0.tar.gz, ncmdump@v0.3.0 大小: 104499 字节 MD5: 23896D0FEDE39F976003661ACFEF810D SHA1: 85EE97C5CD995FA88616A8523E6862A1836D9D08 CRC32: B142A5B6 AndroidDroidNCM安卓版的 ncmdump.GitHub 页面: https://github.com/bunnyblueair/DroidNCM 下载地址: ncm-release.apk, DroidNCM@v2.1.1 大小: 3054417 字节 MD5: 4F42A5244E817B485C1DE1CA0FE4E8F6 SHA1: B70F7A1401A9DBC858C1E1CF87AF49E9442977D0 CRC32: B3D2E106 DroidNCM-2.1.1.tar.gz, DroidNCM@v2.1.1 大小: 9360077 字节 MD5: 073D92EA36E3EE388E95C0651D3886DA SHA1: F8C50937C661C00D225C00E954F1DA96065A6D38 CRC32: F99D094B 据说这个软件兼容性不是很好,建议下载源码自行编译. 铃声(操作繁琐,不推荐)在客户端中将歌曲设置为铃声 每次截取60s,直到全部截取 在如图所示的目录中会生成解密后的文件 加.mp3后缀,使用格式工厂拼接即可.","categories":[{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/categories/Trick/"}],"tags":[{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/tags/Trick/"}]},{"title":"buzzer scale define","slug":"buzzer-define","date":"2019-07-07T02:29:42.000Z","updated":"2020-09-02T14:55:21.306Z","comments":true,"path":"buzzer-define/","link":"","permalink":"https://brynhild.online/buzzer-define/","excerpt":"buzzer scale define","text":"buzzer scale define 123456789101112131415161718192021222324252627282930313233343536#define ddo 262#define dre 294#define dmi 330#define dfa 349#define dso 392#define dla 440#define dsi 494#define do 523#define re 578#define mi 659#define fa 698#define so 784#define la 880#define si 988#define udo 1046#define ure 1175#define umi 1318#define ufa 1480#define uso 1568#define ula 1760#define usi 1976#define sddo 277#define sdre 311#define sdfa 370#define sdso 415#define sdla 466#define sdo 554#define sre 622#define sfa 740#define sso 831#define sla 932#define sudo 1046#define sure 1245#define sufa 1480#define suso 1661#define sula 1865","categories":[{"name":"buzzer","slug":"buzzer","permalink":"https://brynhild.online/categories/buzzer/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"buzzer","slug":"buzzer","permalink":"https://brynhild.online/tags/buzzer/"}]},{"title":"ELLIAS的OI之路","slug":"oi_history","date":"2019-02-02T05:57:07.000Z","updated":"2020-09-07T07:55:19.401Z","comments":true,"path":"oi_history/","link":"","permalink":"https://brynhild.online/oi_history/","excerpt":"从高中录取到退役ELLIAS的OI之路","text":"从高中录取到退役ELLIAS的OI之路 2017.7.24 YM录取 2017.12.29 YM1.12新年联欢会OIer合影 2018.1.19 先修调人 YM1.12教室 2018.4.7 窗外风景 非正式参加LN胜选 2018.7.16 YMOI校内集训 2018.7.25 24中集训 2019 NOIp2018省一退役 次の旅を楽しみにしています!2020.8.28圣地巡礼goto: https://brynhild.online/recall-oi-20200828","categories":[{"name":"memory","slug":"memory","permalink":"https://brynhild.online/categories/memory/"}],"tags":[]},{"title":"倍增 洛谷P1967 货车运输","slug":"luogu-P1967-noip2018-day-1","date":"2018-11-09T13:20:49.000Z","updated":"2020-09-02T14:56:15.431Z","comments":true,"path":"luogu-P1967-noip2018-day-1/","link":"","permalink":"https://brynhild.online/luogu-P1967-noip2018-day-1/","excerpt":"NOIp2018 day-1RP倍增祈愿luogu P1967","text":"NOIp2018 day-1RP倍增祈愿luogu P1967 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201// luogu-judger-enable-o2#pragma GCC optimize (&quot;inline&quot;)#pragma GCC optimize (&quot;-fgcse&quot;)#pragma GCC optimize (&quot;-fgcse-lm&quot;)#pragma GCC optimize (&quot;-fipa-sra&quot;)#pragma GCC optimize (&quot;-ftree-pre&quot;)#pragma GCC optimize (&quot;-ftree-vrp&quot;)#pragma GCC optimize (&quot;-fpeephole2&quot;)#pragma GCC optimize (&quot;-ffast-math&quot;)#pragma GCC optimize (&quot;-fsched-spec&quot;)#pragma GCC optimize (&quot;unroll-loops&quot;)#pragma GCC optimize (&quot;-falign-jumps&quot;)#pragma GCC optimize (&quot;-falign-loops&quot;)#pragma GCC optimize (&quot;-falign-labels&quot;)#pragma GCC optimize (&quot;-fdevirtualize&quot;)#pragma GCC optimize (&quot;-fcaller-saves&quot;)#pragma GCC optimize (&quot;-fcrossjumping&quot;)#pragma GCC optimize (&quot;-fthread-jumps&quot;)#pragma GCC optimize (&quot;-funroll-loops&quot;)#pragma GCC optimize (&quot;-freorder-blocks&quot;)#pragma GCC optimize (&quot;-fschedule-insns&quot;)#pragma GCC optimize (&quot;inline-functions&quot;)#pragma GCC optimize (&quot;-ftree-tail-merge&quot;)#pragma GCC optimize (&quot;-fschedule-insns2&quot;)#pragma GCC optimize (&quot;-fstrict-aliasing&quot;)#pragma GCC optimize (&quot;-falign-functions&quot;)#pragma GCC optimize (&quot;-fcse-follow-jumps&quot;)#pragma GCC optimize (&quot;-fsched-interblock&quot;)#pragma GCC optimize (&quot;-fpartial-inlining&quot;)#pragma GCC optimize (&quot;no-stack-protector&quot;)#pragma GCC optimize (&quot;-freorder-functions&quot;)#pragma GCC optimize (&quot;-findirect-inlining&quot;)#pragma GCC optimize (&quot;-fhoist-adjacent-loads&quot;)#pragma GCC optimize (&quot;-frerun-cse-after-loop&quot;)#pragma GCC optimize (&quot;inline-small-functions&quot;)#pragma GCC optimize (&quot;-finline-small-functions&quot;)#pragma GCC optimize (&quot;-ftree-switch-conversion&quot;)#pragma GCC optimize (&quot;-foptimize-sibling-calls&quot;)#pragma GCC optimize (&quot;-fexpensive-optimizations&quot;)#pragma GCC optimize (&quot;inline-functions-called-once&quot;)#pragma GCC optimize (&quot;-fdelete-null-pointer-checks&quot;)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::sort;#define Re register#define maxn 100001#define maxe 50001#define swap(x,y) ((x)^=(y)^=(x)^=(y))const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = 0; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (int x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (int x) &#123;if(x&lt;0)x=-x,putchar(&#x27;-&#x27;); write (x); putchar (&#x27;\\n&#x27;);&#125;inline const int&amp; min (const int&amp; a, const int&amp; b) &#123;return a&lt;b? a:b;&#125;struct node &#123; int fr, to, va;&#125; edge[maxe];inline bool cmp (node a, node b)&#123; return a.va &gt; b.va;&#125;int head[maxn], nxt[maxn], too[maxn], wei[maxn], ecnt;inline void addedge_d (Re int fr, Re int to, Re int va)&#123; nxt[++ ecnt]=head[fr], head[fr]=ecnt, too[ecnt]=to, wei[ecnt]=va; nxt[++ ecnt]=head[to], head[to]=ecnt, too[ecnt]=fr, wei[ecnt]=va;&#125;int fa[maxn];inline int find (register int x)&#123; while (x ^ fa[x]) x = fa[x] = fa[fa[x]]; return x;&#125;inline void Kruskal (Re int n, Re int m)&#123; register int i, j, fr, to, va, ffr, fto; for (i=1; i&lt;=m; ++i) &#123; fr=edge[i].fr, to=edge[i].to, ffr=find(fr), fto=find(to); if (ffr ^ fto) addedge_d (fr, to, edge[i].va), fa[ffr]=fto; &#125;&#125;int fl[maxn];int ex[maxn][18], ew[maxn][18];static void build_tree (Re int x, Re int dep)&#123; register int i, j, to, va; if (!fl[x]) &#123; fl[x] = dep; for (i=head[x]; i; i=nxt[i]) &#123; to=too[i], va=wei[i]; if (!fl[to]) &#123; ex[to][0] = x, ew[to][0] = va; build_tree (to, dep + 1); &#125; &#125; &#125;&#125;inline void build_forest (Re int n)&#123; register int i, j, fr, to, va; for (i=1; i&lt;=n; ++i) if (!fl[i]) &#123; ew[i][0] = 0x3f3f3f3f, ex[i][0] = i; build_tree (i, 1); &#125;&#125;inline void lca_init (Re int n)&#123; register int i, j; for (i=1; i&lt;=17; ++i) &#123; for (j=1; j&lt;=n; ++j) &#123; ex[j][i] = ex[ex[j][i-1]][i-1]; ew[j][i] = min (ew[ex[j][i-1]][i-1], ew[j][i-1]); &#125; &#125;&#125;inline int get_lca (Re int fr, Re int to)&#123; if (find(fr) ^ find(to)) return -1; register int ret=0x3f3f3f3f, i, j; if (fl[fr] &gt; fl[to]) swap (fr, to); for (i=17; i&gt;=0; --i) if (fl[ex[to][i]] &gt;= fl[fr]) ret=min (ret, ew[to][i]), to=ex[to][i]; if (fr == to) return ret; for (i=17; i&gt;=0; --i) &#123; if (ex[fr][i] ^ ex[to][i]) &#123; ret = min (ret, min (ew[to][i], ew[fr][i])); to=ex[to][i], fr=ex[fr][i]; &#125; &#125; ret=min(ret,min(ew[fr][0], ew[to][0])); return ret;&#125;signed main ()&#123; register int i, j, fr, to, va; register int n=read(), m=read(); for (i=1; i&lt;=n; ++i) fa[i] = i; for (i=1; i&lt;=m; ++i) &#123; fr=read(), to=read(), va=read(); edge[i] = &#123;fr, to, va&#125;; &#125; sort (edge+1, edge+m+1, cmp); Kruskal (n, m); build_forest (n); lca_init (n); register int _ = read (); while (_ --) writelen (get_lca(read(), read())); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"倍增","slug":"倍增","permalink":"https://brynhild.online/tags/%E5%80%8D%E5%A2%9E/"},{"name":"生成树","slug":"生成树","permalink":"https://brynhild.online/tags/%E7%94%9F%E6%88%90%E6%A0%91/"},{"name":"并查集","slug":"并查集","permalink":"https://brynhild.online/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"GSS1 - Can you answer these queries I","slug":"GSS1","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:50:00.446Z","comments":true,"path":"GSS1/","link":"","permalink":"https://brynhild.online/GSS1/","excerpt":"线段树GSS1 - Can you answer these queries I","text":"线段树GSS1 - Can you answer these queries I Luogu SP1043Vjudge 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#pragma GCC optimize (&quot;-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2&quot;, 3)#pragma G++ optimize (&quot;Ofast&quot;, 3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;#define lson rt&lt;&lt;1,l,mid#define rson rt&lt;&lt;1|1,mid+1,r#define rint register intint n, m, x, y, in;struct node &#123; int sum, lmax, rmax, dat;&#125; tr[200001];namespace FastIO &#123; const int str=1&lt;&lt;20; const char* endl=&quot;\\n&quot;; struct Reader &#123; char buf[str],*s,*t; bool EOF_FLG; Reader():s(buf),t(buf),EOF_FLG(false) &#123;&#125;; inline char gt() &#123; return s==t&amp;&amp;((t=(s=buf)+fread(buf,1,str,stdin))==s)?EOF:(*s++); &#125; template&lt;typename T&gt;Reader&amp;operator&gt;&gt;(T&amp;x) &#123; if(EOF_FLG)return *this; register char c=0,d; while(c!=EOF&amp;&amp;(c&lt;&#x27;0&#x27;||c&gt;&#x27;9&#x27;))d=c,c=gt(); if(c==EOF) &#123; EOF_FLG=true; return *this; &#125; else x=0; while(c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;)x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-&#x27;0&#x27;,c=gt(); if(d==&#x27;-&#x27;)x=-x; return *this; &#125; &#125; cin; struct Writer &#123; char buf[str],*s,*t; Writer():s(buf),t(buf+str) &#123;&#125; ~Writer() &#123; fwrite(buf,1,s-buf,stdout); &#125; inline void pt(char c) &#123; (s==t)?(fwrite(s=buf,1,str,stdout),*s++=c):(*s++=c); &#125; template&lt;typename T&gt;Writer&amp;operator&lt;&lt;(T x) &#123; if(!x)return pt(&#x27;0&#x27;),*this; if(x&lt;0)pt(&#x27;-&#x27;),x=-x; register char a[30],t=0; while(x)a[t++]=x%10,x/=10; while(t--)pt(a[t]+&#x27;0&#x27;); return *this; &#125; Writer&amp;operator&lt;&lt;(const char*s) &#123; while(*s)pt(*s++); return *this; &#125; &#125; cout;&#125;inline const int&amp; max(const int&amp; x,const int&amp; y) &#123; return x&gt;y?x:y;&#125;inline void update (int rt) &#123; tr[rt].sum =tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].sum; tr[rt].lmax= max (tr[rt&lt;&lt;1].lmax, tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].lmax); tr[rt].rmax= max (tr[rt&lt;&lt;1|1].rmax, tr[rt&lt;&lt;1|1].sum + tr[rt&lt;&lt;1].rmax); tr[rt].dat = max (max(tr[rt&lt;&lt;1].dat, tr[rt&lt;&lt;1|1].dat), tr[rt&lt;&lt;1].rmax + tr[rt&lt;&lt;1|1].lmax);&#125;inline void build (int rt,int l,int r) &#123; if(l==r) &#123; FastIO::cin&gt;&gt;in; tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = in; return; &#125; int mid = (l+r)&gt;&gt;1; build (lson); build (rson); update (rt);&#125;inline node query (int rt, int l, int r, int ql, int qr) &#123; if (ql &lt;= l &amp;&amp; qr &gt;= r) return tr[rt]; int mid = (l+r)&gt;&gt;1; if (ql &gt; mid) return query (rson, ql, qr); if (qr &lt;= mid) return query (lson, ql, qr); else &#123; node ans,a,b; a = query (lson,ql,qr); b = query (rson,ql,qr); ans.sum = a.sum + b.sum; ans.dat = max (a.dat, a.rmax + b.lmax), ans.dat = max (ans.dat, b.dat); ans.lmax= max (a.lmax, a.sum + b.lmax); ans.rmax= max (b.rmax, b.sum + a.rmax); return ans; &#125;&#125;using namespace FastIO;int main() &#123; //freopen (&quot;nico.in&quot;,&quot;r&quot;,stdin); FastIO::cin&gt;&gt;n; build (1, 1, n); FastIO::cin&gt;&gt;m; while (m --) &#123; FastIO::cin&gt;&gt;x&gt;&gt;y; FastIO::cout&lt;&lt;query(1, 1, n, x, y).dat&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"}]},{"title":"SP1716 GSS3 - Can you answer these queries III","slug":"GSS3","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:50:13.076Z","comments":true,"path":"GSS3/","link":"","permalink":"https://brynhild.online/GSS3/","excerpt":"线段树GSS3 - Can you answer these queries III","text":"线段树GSS3 - Can you answer these queries III LuoguVjudge 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#pragma GCC optimize (&quot;-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2&quot;, 3)#pragma G++ optimize (&quot;Ofast&quot;, 3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;#define lson rt&lt;&lt;1,l,mid#define rson rt&lt;&lt;1|1,mid+1,r#define rint register intint n, m, x, y, in, opt;struct node &#123; int sum, lmax, rmax, dat, l, r;&#125; tr[200001];namespace FastIO &#123; const int str=1&lt;&lt;20; const char* endl=&quot;\\n&quot;; struct Reader &#123; char buf[str],*s,*t; bool EOF_FLG; Reader():s(buf),t(buf),EOF_FLG(false) &#123;&#125;; inline char gt() &#123; return s==t&amp;&amp;((t=(s=buf)+fread(buf,1,str,stdin))==s)?EOF:(*s++); &#125; template&lt;typename T&gt;Reader&amp;operator&gt;&gt;(T&amp;x) &#123; if(EOF_FLG)return *this; register char c=0,d; while(c!=EOF&amp;&amp;(c&lt;&#x27;0&#x27;||c&gt;&#x27;9&#x27;))d=c,c=gt(); if(c==EOF) &#123; EOF_FLG=true; return *this; &#125; else x=0; while(c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;)x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-&#x27;0&#x27;,c=gt(); if(d==&#x27;-&#x27;)x=-x; return *this; &#125; &#125; cin; struct Writer &#123; char buf[str],*s,*t; Writer():s(buf),t(buf+str) &#123;&#125; ~Writer() &#123; fwrite(buf,1,s-buf,stdout); &#125; inline void pt(char c) &#123; (s==t)?(fwrite(s=buf,1,str,stdout),*s++=c):(*s++=c); &#125; template&lt;typename T&gt;Writer&amp;operator&lt;&lt;(T x) &#123; if(!x)return pt(&#x27;0&#x27;),*this; if(x&lt;0)pt(&#x27;-&#x27;),x=-x; register char a[30],t=0; while(x)a[t++]=x%10,x/=10; while(t--)pt(a[t]+&#x27;0&#x27;); return *this; &#125; Writer&amp;operator&lt;&lt;(const char*s) &#123; while(*s)pt(*s++); return *this; &#125; &#125; cout;&#125;inline const int&amp; max(const int&amp; x,const int&amp; y) &#123; return x&gt;y?x:y;&#125;inline void update (int rt) &#123; tr[rt].sum =tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].sum; tr[rt].lmax= max (tr[rt&lt;&lt;1].lmax, tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].lmax); tr[rt].rmax= max (tr[rt&lt;&lt;1|1].rmax, tr[rt&lt;&lt;1|1].sum + tr[rt&lt;&lt;1].rmax); tr[rt].dat = max (max(tr[rt&lt;&lt;1].dat, tr[rt&lt;&lt;1|1].dat), tr[rt&lt;&lt;1].rmax + tr[rt&lt;&lt;1|1].lmax);&#125;inline void build (int rt,int l,int r) &#123; tr[rt].l = l, tr[rt].r = r; if(l==r) &#123; FastIO::cin&gt;&gt;in; tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = in; return; &#125; int mid = (l+r)&gt;&gt;1; build (lson); build (rson); update (rt);&#125;inline node query (int rt, int l, int r, int ql, int qr) &#123; if (ql &lt;= l &amp;&amp; qr &gt;= r) return tr[rt]; int mid = (l+r)&gt;&gt;1; if (ql &gt; mid) return query (rson, ql, qr); if (qr &lt;= mid) return query (lson, ql, qr); else &#123; node ans,a,b; a = query (lson,ql,qr); b = query (rson,ql,qr); ans.sum = a.sum + b.sum; ans.dat = max (a.dat, a.rmax + b.lmax), ans.dat = max (ans.dat, b.dat); ans.lmax= max (a.lmax, a.sum + b.lmax); ans.rmax= max (b.rmax, b.sum + a.rmax); return ans; &#125;&#125;inline void work (int rt, int to, int val)&#123; if (tr[rt].l == tr[rt].r) &#123; tr[rt].sum = tr[rt].lmax = tr[rt].rmax = tr[rt].dat = val; return; &#125; register int mid = (tr[rt].l + tr[rt].r) &gt;&gt; 1; if (to &lt;= mid) work (rt&lt;&lt;1, to, val); else work (rt&lt;&lt;1|1, to, val); update(rt);&#125;using namespace FastIO;int main ()&#123; //freopen (&quot;nico.in&quot;,&quot;r&quot;,stdin); cin &gt;&gt; n; build (1, 1, n); cin &gt;&gt; m; while (m --) &#123; cin &gt;&gt; opt &gt;&gt; x &gt;&gt; y; if (opt) cout &lt;&lt; query (1, 1, n, x, y).dat &lt;&lt; endl; else work (1,x,y); &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"}]},{"title":"SP2713 GSS4 - Can you answer these queries IV","slug":"GSS4","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:57:53.169Z","comments":true,"path":"GSS4/","link":"","permalink":"https://brynhild.online/GSS4/","excerpt":"GSS4 - Can you answer these queries IVLuoguVjudge","text":"GSS4 - Can you answer these queries IVLuoguVjudge 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#pragma G++ optimize (&quot;Ofast&quot;, 3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;#include &lt;math.h&gt;#define root 1,1,n#define lson rt&lt;&lt;1,l,mid#define rson rt&lt;&lt;1|1,mid+1,r#define swap(x,y) y^=x^=y^=x#define maxn 100001 #define dmax 400001#define rint register int#define ll long longnamespace fastIO &#123; const int str=1&lt;&lt;20; const char* endll=&quot;\\n&quot;; struct Reader &#123; char buf[str],*s,*t; bool EOF_FLG; Reader():s(buf),t(buf),EOF_FLG(false) &#123;&#125;; inline char gt() &#123; return s==t&amp;&amp;((t=(s=buf)+fread(buf,1,str,stdin))==s)?EOF:(*s++); &#125; #define gt() getchar() template&lt;typename T&gt;Reader&amp;operator&gt;&gt;(T&amp;x) &#123; if(EOF_FLG)return *this; register char c=0,d; while(c!=EOF&amp;&amp;!isdigit(c))d=c,c=gt(); if(c==EOF) &#123; EOF_FLG=true; return *this; &#125; else x=0; while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-&#x27;0&#x27;,c=gt(); if(d==&#x27;-&#x27;)x=-x; return *this; &#125; &#125; cin; struct Writer &#123; char buf[str],*s,*t; Writer():s(buf),t(buf+str) &#123;&#125; ~Writer() &#123; fwrite(buf,1,s-buf,stdout); &#125; inline void pt(char c) &#123; (s==t)?(fwrite(s=buf,1,str,stdout),*s++=c):(*s++=c); &#125; #define pt(c) putchar(c) template&lt;typename T&gt;Writer&amp;operator&lt;&lt;(T x) &#123; if(!x)return pt(&#x27;0&#x27;),*this; if(x&lt;0)pt(&#x27;-&#x27;),x=-x; register char a[30],t=0; while(x)a[t++]=x%10,x/=10; while(t--)pt(a[t]+&#x27;0&#x27;); return *this; &#125; Writer&amp;operator&lt;&lt;(const char*s) &#123; while(*s)pt(*s++); return *this; &#125; &#125; cout;&#125;using namespace fastIO;struct TreeNode &#123; int l, r; long long sum, mxx;&#125; dat[dmax];long long in;inline const long long&amp; max (const long long&amp; x,const long long&amp; y) &#123;return x&gt;y? x:y;&#125;inline void update (int rt)&#123; dat[rt].sum = dat[rt&lt;&lt;1].sum + dat[rt&lt;&lt;1|1].sum; dat[rt].mxx = max (dat[rt&lt;&lt;1].mxx, dat[rt&lt;&lt;1|1].mxx);&#125;inline void build (int rt, int l, int r)&#123; dat[rt].l = l, dat[rt].r = r; if (l == r) &#123; fastIO::cin &gt;&gt; in; dat[rt].sum = dat[rt].mxx = in; return; &#125; register int mid = (l + r) &gt;&gt; 1; build (lson); build (rson); update (rt);&#125;inline long long query (int rt, int l, int r)&#123; register int L = dat[rt].l, R = dat[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) return dat[rt].sum; register int mid = (L + R) &gt;&gt; 1; register long long ret = 0ll; if (l &lt;=mid) ret = query (rt&lt;&lt;1, l, r); if (mid &lt; r) ret += query (rt&lt;&lt;1|1,l,r); return ret;&#125;inline void change (int rt, int l, int r)&#123; register int L = dat[rt].l, R = dat[rt].r; if (L == R) &#123; //cout&lt;&lt;dat[rt].sum&lt;&lt;&quot; -&gt; &quot;; dat[rt].sum = sqrt (dat[rt].sum), dat[rt].mxx = sqrt (dat[rt].mxx); //cout&lt;&lt;dat[rt].sum&lt;&lt;endll; return; &#125; register int mid = (L + R) &gt;&gt; 1; if (l&lt;=mid &amp;&amp; dat[rt&lt;&lt;1].mxx &gt;1) change (rt&lt;&lt;1, l, r); if (mid&lt; r &amp;&amp; dat[rt&lt;&lt;1|1].mxx&gt;1) change (rt&lt;&lt;1|1,l,r); update (rt);&#125;//using namespace fastIO;inline void Write (const int&amp; x, const int&amp; y) &#123;cout &lt;&lt; query(1, x, y) &lt;&lt; endll;&#125;inline void Change (const int&amp; x, const int&amp; y) &#123;change (1, x, y);&#125;int main ()&#123; register int _ = 0, n; while (scanf (&quot;%d&quot;, &amp;n) != EOF) &#123; fastIO::cout &lt;&lt; &quot;Case #&quot; &lt;&lt; ++ _ &lt;&lt; &quot;:&quot; &lt;&lt; endll; build (root); register int m, x, y, ret; register bool opt; fastIO::cin &gt;&gt; m; while (m --) &#123; fastIO::cin &gt;&gt; opt &gt;&gt; x &gt;&gt; y; if (x &gt; y) swap (x, y); opt? Write(x, y):Change (x, y); &#125; putchar (&#x27;\\n&#x27;); &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"}]},{"title":"SP2916 GSS5 - Can you answer these queries V","slug":"GSS5","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:57:27.757Z","comments":true,"path":"GSS5/","link":"","permalink":"https://brynhild.online/GSS5/","excerpt":"GSS4 - Can you answer these queries VLuoguVjudge","text":"GSS4 - Can you answer these queries VLuoguVjudge 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;cstdio&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS], *p1 = buf, *p2 = buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline long long read ()&#123; register long long x = 0; register char c = gc(); register bool m = 0; while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &#123;if (c == &#x27;-&#x27;) m = true; c = gc();&#125; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (long long x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (long long x)&#123; if (x &lt; 0ll) putchar(&#x27;-&#x27;), x = -x; write (x), putchar (&#x27;\\n&#x27;);&#125;#define Re register#define maxn 10001#define dmax 40001#define swap(x,y) ((y)^=(x)^=(y)^=(x)) struct node &#123; int l, r; long long sum, lmax, rmax, dat;&#125; tr[dmax], null;inline const long long&amp; max (const long long&amp; x,const long long&amp; y) &#123;return x&gt;y? x:y;&#125;inline void update (int rt)&#123; register int lson = rt&lt;&lt;1, rson = rt&lt;&lt;1|1; tr[rt].sum = tr[lson].sum + tr[rson].sum; tr[rt].lmax= max (tr[lson].lmax, tr[lson].sum + tr[rson].lmax); tr[rt].rmax= max (tr[rson].rmax, tr[rson].sum + tr[lson].rmax); tr[rt].dat = max (max(tr[lson].dat, tr[rson].dat), tr[lson].rmax + tr[rson].lmax);&#125;static void build (int rt, int l, int r) &#123; tr[rt].l = l, tr[rt].r = r; if (l == r) &#123;tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = read (); return;&#125; register int mid = (l + r) &gt;&gt; 1; build (rt&lt;&lt;1, l, mid), build (rt&lt;&lt;1|1, mid + 1, r); update (rt);&#125;static node query (int rt, int ql, int qr) &#123; register int l = tr[rt].l, r = tr[rt].r; if (ql &gt; qr) return null; if (ql &lt;= l &amp;&amp; qr &gt;= r) return tr[rt]; register int mid = (l + r) &gt;&gt; 1; if (ql &gt; mid) return query (rt&lt;&lt;1|1,ql,qr); if (qr &lt;= mid) return query (rt&lt;&lt;1, ql, qr); else &#123; register node ret, a, b; a = query (rt&lt;&lt;1, ql, qr), b = query (rt&lt;&lt;1|1, ql, qr); ret.sum = a.sum + b.sum; ret.dat = max (a.dat, a.rmax + b.lmax), ret.dat = max (ret.dat, b.dat); ret.lmax= max (a.lmax, a.sum + b.lmax), ret.rmax= max (b.rmax, b.sum + a.rmax); return ret; &#125;&#125;static void modify (int rt, int to, long long val)&#123; if (tr[rt].l == tr[rt].r) &#123;tr[rt].sum = tr[rt].lmax = tr[rt].rmax = tr[rt].dat = val; return;&#125; register int mid = (tr[rt].l + tr[rt].r) &gt;&gt; 1; if (to &lt;= mid) modify (rt&lt;&lt;1, to, val); else modify (rt&lt;&lt;1|1, to, val); update(rt);&#125;int main() &#123; register int _ = read (); register int x1, y1, x2, y2; register int n, m; register node a, b, c; register long long tmp; register char opt; while (_ --) &#123; n = read ();//, m = read (); build (1, 1, n); m = read (); while (m --) &#123; //opt = &#x27;z&#x27;; //while ((opt ^ &#x27;C&#x27;) &amp;&amp; (opt ^ &#x27;Q&#x27;)) opt = gc(); //if (opt ^ &#x27;C&#x27;) &#123; x1 = read (), y1 = read (), x2 = read (), y2 = read (); if (y1&lt;x1) swap(x1,y1); if (y2&lt;x2) swap(x2,y2); if (x1&gt;y2) swap(x1,x2), swap(y1,y2); if (y1 &lt; x2) &#123; writelen (max(query(1,x1,y1-1).rmax, 0) + query(1,y1,x2).sum + max(query(1,x2+1,y2).lmax, 0)); &#125; else &#123; a = query (1, x2, y1), b = query(1,x1,x2-1), c = query(1,y1+1,y2); tmp = a.dat; tmp = max (tmp, a.lmax + b.rmax); tmp = max (tmp, c.lmax + a.rmax); tmp = max (tmp, a.sum + max(0, b.rmax) + max(0, c.lmax)); writelen (tmp); &#125; &#125; //else &#123;x1 = read (), tmp = read (); modify (1, x1, tmp);&#125; &#125; &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"}]},{"title":"Nescafé17 守卫者的挑战","slug":"Nescafe17-Defenders'-Challenge","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:53:15.348Z","comments":true,"path":"Nescafe17-Defenders'-Challenge/","link":"","permalink":"https://brynhild.online/Nescafe17-Defenders'-Challenge/","excerpt":"Nescafé17 守卫者的挑战","text":"Nescafé17 守卫者的挑战 守卫者的挑战[Description]打开了黑魔法师Vani的大门,队员们在迷宫般的路上漫无目的地搜寻着关押applepi的监狱的所在地.突然,眼前一道亮光闪过.“我,Nizem,是黑魔法圣殿的守卫者.如果你能通过我的挑战,那么你可以带走黑魔法圣殿的地图……”瞬间,队员们被传送到了一个擂台上,最初身边有一个容量为K的包包. 擂台赛一共有项挑战,各项挑战依次进行.第项挑战有一个属性ai,如果ai≥0,表示这次挑战成功后可以再获得一个容量为ai的包包；如果ai = -1,则表示这次挑战成功后可以得到一个大小为 1 的地图残片.地图残片必须装在包包里才能带出擂台,包包没有必要全部装满,但是队员们必须把获得的所有的地图残片都带走（没有得到的不用考虑,只需要完成所有N项挑战后背包容量足够容纳地图残片即可）,才能拼出完整的地图.并且他们至少要挑战成功L次才能离开擂台. 队员们一筹莫展之时,善良的守卫者Nizem帮忙预估出了每项挑战成功的概率,其中第i项挑战成功的概率为pi%.现在，请你帮忙预测一下，队员们能够带上他们获得的地图残片离开擂台的概率. [Data Size]对于 100% 的数据,保证 $ 0≤K≤2000$ , $ 0≤N≤200$ , $-1≤ai≤1000$ , $0≤L≤N$ , $0≤pi≤100$ . [Solution]刚看到此题时,我被那个概率吓得半死.但看了数据范围,此题就是一道很简单的水题了. 对于可以赢l把以上并且背包不会溢出的概率 $P_0$ ,通过枚举结束时的背包容量和赢的次数快速求出: $$ P_0=\\sum_{i=l}^{n}\\sum_{j=0}^{K}P_{i, j} $$ 而 $P_{i, j}$ 可以通过刷表法 $O(n^2K)≈8*10^7$ 地求出: 定义状态 $dp[i][j][k]$ 代表达到第$i$场胜$j$场背包容量为$k$时的概率,转移方程很显然为本次成功的概率和本次失败的概率之和: 123dp[i][j][k] += dp[i-1][j][k] * (1 - dat[i].dat);if ((tmp = min (K + dat[i].opt, n)) &lt; 0) continue;dp[i][j+1][tmp] += dp[i-1][j][k] * dat[i].dat; 这个时间复杂度看起来很悬,未免会有稍作优化的想法.本题K的范围2000,但是真的需要2000吗?共有N项挑战,对于每一项挑战最多可以获得一块地图残片,所以背包实际的最大容量就是N次挑战中所有类型-1的数量,极限情况下是n,这样复杂度就会降到 $O(n^3)$, 较为稳妥. [Code]考场代码,写得略丑,请谅解. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#pragma G++ optimize (3)#include &lt;cstdio&gt;#include &lt;algorithm&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;inline double getdou ()&#123; register double x=0; register char c = gc (); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x * 10 + (c^&#x27;0&#x27;), c = gc(); if (c == &#x27;.&#x27;) &#123; register double s = 0.1, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x + (c-&#x27;0&#x27;)*s, s/=10, c = gc (); &#125; return x;&#125;inline const int&amp; min (const int&amp; a, const int&amp; b)&#123;return a&lt;b? a:b;&#125;#define Re registerstruct node &#123; int opt; double dat;&#125; dat[201];inline bool cmp (node a, node b) &#123;return a.opt &gt; b.opt;&#125;double dp[201][201][201];signed main ()&#123; freopen (&quot;guard.in&quot;, &quot;r&quot;, stdin); freopen (&quot;guard.out&quot;,&quot;w&quot;,stdout); register int n = read (), l = read (), k = read (), tmp; for (Re int i = 1; i &lt;= n; ++ i) dat[i].dat = getdou()/100; for (Re int i = 1; i &lt;= n; ++ i) dat[i].opt = read (); std::sort (dat + 1, dat + n + 1, cmp); dp[0][0][min(n, k)] = 1.0; for (Re int i = 1; i &lt;= n; ++ i) &#123; for (Re int j = 0; j &lt;= i; ++ j) &#123; for (Re int K = 0; K &lt;= n; ++ K) &#123; dp[i][j][K] += dp[i-1][j][K] * (1 - dat[i].dat); if ((tmp = min (K + dat[i].opt, n)) &lt; 0) continue; dp[i][j+1][tmp] += dp[i-1][j][K] * dat[i].dat; &#125; &#125; &#125; register double ans = 0.0; for (Re int i = l; i &lt;= n; ++ i) for (Re int j = 0; j &lt;= n; ++ j) ans += dp[n][i][j]; printf (&quot;%.6lf&quot;, ans); fclose (stdin), fclose (stdout); return 0;&#125; Cena评测$0.03s$,效率还是可以的.","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"contest","slug":"contest","permalink":"https://brynhild.online/tags/contest/"},{"name":"DP","slug":"DP","permalink":"https://brynhild.online/tags/DP/"}]},{"title":"STL 洛谷P3369 普通平衡树","slug":"lg-P3369-STL","date":"2018-10-30T08:31:14.000Z","updated":"2020-09-02T14:56:52.068Z","comments":true,"path":"lg-P3369-STL/","link":"","permalink":"https://brynhild.online/lg-P3369-STL/","excerpt":"luogu P3369 普通平衡树STL 实现","text":"luogu P3369 普通平衡树STL 实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445// luogu-judger-enable-o2#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; c ^ &#x27;-&#x27;) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (int x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (int x) &#123;if(x&lt;0) x=-x, putchar(&#x27;-&#x27;);write (x);putchar (&#x27;\\n&#x27;);&#125;vector &lt;int&gt; eli;signed main ()&#123; register int n = read (), x, opt; while (n --) &#123; opt = read (), x = read (); if (opt == 1) eli.insert(upper_bound(eli.begin(), eli.end(), x), x); else if (opt == 2) eli.erase(lower_bound(eli.begin(), eli.end(), x)); else if (opt == 3) writelen(lower_bound(eli.begin(), eli.end(), x)-eli.begin()+1); else if (opt == 4) writelen(eli[x - 1]); else if (opt == 5) writelen(*--lower_bound(eli.begin(), eli.end(), x)); else if (opt == 6) writelen(*upper_bound(eli.begin(), eli.end(), x)); &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"STL","slug":"STL","permalink":"https://brynhild.online/tags/STL/"}]},{"title":"SP2885 WORDRING - Word Rings","slug":"SP2885-WORDRING-World-Rings","date":"2018-10-19T05:57:54.000Z","updated":"2020-09-02T14:51:23.524Z","comments":true,"path":"SP2885-WORDRING-World-Rings/","link":"","permalink":"https://brynhild.online/SP2885-WORDRING-World-Rings/","excerpt":"SP2885 WORDRING - Word Rings","text":"SP2885 WORDRING - Word Rings 本题求平均环长,可以将每个字符串的前后两个字符看做点,这两个点存在于一个字符串的关系视为一条边,接着二分枚举答案(单调性是很显然的),用队列优化BellmanFord判断即可. 关键代码: 12345678910111213141516static bool __fastcall spfa_dfs (Re int fr, Re double mid)&#123; vis[fr] = true; register int to; for (Re int i = head[fr]; i; i = nxt[i]) &#123; to = too[i]; if (dis[fr] + wei[i] - mid &gt; dis[to]) &#123; dis[to] = dis[fr] + wei[i] - mid; if (vis[to] || spfa_dfs(to, mid)) &#123;vis[fr] = false; return true;&#125; &#125; &#125; vis[fr] = false; return false;&#125; 1234567inline bool judge (register double mid)&#123; memset (dis, 0, sizeof dis); for (Re int i = 1; i &lt;= hhsh; ++ i) if (spfa_dfs (i, mid)) return true; return false;&#125; 1234567891011121314151617181920212223242526while (true) &#123; n = read (); if (!n) return 0; memset (head, 0, sizeof head); memset (hash, 0, sizeof hash); ecnt = hhsh = 0; while (n --) &#123; c = gc(), len = 0; while (c == &#x27;\\n&#x27; || c == &#x27;\\r&#x27;) c = gc (); while ((c != &#x27;\\n&#x27;) &amp;&amp; (c != &#x27;\\r&#x27;)) s[++ len] = c, c = gc(); fr = calc(s[1], s[2]), to = calc(s[len-1], s[len]); if (!hash[fr]) hash[fr] = ++ hhsh; if (!hash[to]) hash[to] = ++ hhsh; addedge (hash[fr], hash[to], len); &#125; l = 0.0, r = 1000.0; while (r - l &gt;= eps) &#123; mid = (l + r) / 2; if (judge(mid)) l = mid; else r = mid; &#125; if (l == 0) puts (&quot;No solution.&quot;); else printf (&quot;%.2lf\\n&quot;, l); &#125; 祝大家 RP++ !","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"CF372B Counting Rectangles is Fun","slug":"CF372B-Counting-Rectangles-is-Fun","date":"2018-09-27T11:21:43.000Z","updated":"2020-09-02T14:55:12.878Z","comments":true,"path":"CF372B-Counting-Rectangles-is-Fun/","link":"","permalink":"https://brynhild.online/CF372B-Counting-Rectangles-is-Fun/","excerpt":"CF372B Counting Rectangles is Fun","text":"CF372B Counting Rectangles is Fun NULL Problem :题目描述给定一个${n* m}$的01矩阵, q次询问, 每次询问指定一个子矩形, 求该子矩形种有多少个只包含0的子矩阵.矩阵从上到下编号1n, 从左到右编号1m. 输入格式第一行三个整数n,m,q. 接下来n行, 每行m个整数描述该矩阵. 接下来q行, 每行四个整数a,b,c,d表示询问的子矩阵左上角为(a,b), 右下角为(c,d). 输出格式对于每个询问, 输出一个整数表示答案. EINS Solution看到本题很小的数据范围 ${1&lt;=n,m&lt;=40}$ , 内心或许会萌发一些类似于把整张图状压的想法. 但看到时限是 ${4s}$ , 当然会想到本题可以使用暴力求解. 本题要求两个点之间共有多少个全部为0的子矩阵,q的范围高达${3* 10^5}$, 不难想到, 可以通过暴力的dp打出表然后${O(1)}$查询. 令${dp[x1][y1][x2][y2]}$表示从(x1, y1)到(x2, y2)的答案, 不难得到状态转移方程: 约定${x1&lt;=x2, y1&lt;=y2}$ ${dp[x1][y1][x2][y2]=dp[x1][y1][x2-1][y2]+dp[x1][y1][x2][y2-1]-dp[x1][y1][x2-1][y2-1]}$ ${dp[x1][y1][x2][y2] +=}$ 该区域内能获得的矩形数量 ZWEI Code代码就比较好写: 1234567891011121314151617181920212223242526272829303132register int n = read (), m = read (), _ = read (), nico; for (Re int i = 1; i &lt;= n; ++ i) &#123; for (Re int j = 1; j &lt;= m; ++ j) &#123; scanf (&quot;%1d&quot;, &amp;nico); if (nico) lin[i][j] = 0; else lin[i][j] = lin[i-1][j] + 1; &#125; &#125; for (Re int frx = 1; frx &lt;= n; ++ frx) &#123; for (Re int fry = 1; fry &lt;= m; ++ fry) &#123; for (Re int tox = frx; tox &lt;= n; ++ tox) &#123; for (Re int toy = fry; toy &lt;= m; ++ toy) &#123; ans[frx][fry][tox][toy] = ans[frx][fry][tox-1][toy] + ans[frx][fry][tox][toy-1] - ans[frx][fry][tox-1][toy-1]; nico = tox - frx + 1; for (Re int k = toy; k &gt;= fry; -- k) &#123; nico = min (nico, lin[tox][k]); ans[frx][fry][tox][toy] += nico; &#125; &#125; &#125; &#125; &#125; while (_ --) writelen (ans[read()][read()][read()][read()]);","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"UVA1714 Keyboarding","slug":"UVA1714-Keyboarding","date":"2018-08-31T14:41:16.000Z","updated":"2020-09-02T14:51:08.089Z","comments":true,"path":"UVA1714-Keyboarding/","link":"","permalink":"https://brynhild.online/UVA1714-Keyboarding/","excerpt":"ACM-ICPC World Final: UVA1714 Keyboarding","text":"ACM-ICPC World Final: UVA1714 Keyboarding NULL这道题居然是ACM-ICPC World Final的题目 Description给定一个r行c列的在屏幕上的“虚拟键盘”，我们需要通过“上，下，左，右，选择”5个控制键来移动屏幕上的光标来打印文本。一开始，光标在键盘的左上 角，每次按方向键，光标总是跳到下一个在该方向上与当前位置不同的字符，若不存在则不移动。每次按选择键，则将光标所在位置的字符打印出来。现在求打印给定文本（要在结尾打印换行符）的最少按键次数。 Input第一行输入${r,c(1≤r,c≤50)}$ 接下来给出一个 ${r* c}$ 的键盘，包括大写字母，数字，横线以及星号（星号代表${Enter}$换行） 最后一行是要打印的文本串s，s的长度不超过10000. Output输出打印文本（包括结尾换行符）的最少按键次数。保证一定有解。 Sample Input 2 19 ABCDEFGHIJKLMNOPQZY X*****Y AZAZ Sample Output 19 注: 部分内容被省略 数据可能有多组 EINS用nxt[][]维护向四个方向能到的第一个非当前点字符的位置 BFS容器维护四个值:nowx 当前x坐标 nowy 当前y坐标 ste 当前有效字符长度 sum 总步数 先查看当前扩展的字符是否有效,有效则直接入队,判断是否结束,无效则考虑向周围移动. ZWEI直接上代码 next 处理部分 1234567891011121314151617181920212223for (rint i = 1; i &lt;= n; i ++) &#123; for (rint j = 1; j &lt;= m; j ++) &#123; ch = dat[i][j]; if (dat[i-1][j] != ch) nxt[i][j][0] = make_pair (i-1, j); else nxt[i][j][0] = nxt[i-1][j][0]; for (rint k = i + 1; k &lt;= n; k ++) &#123; if (dat[k][j] != ch) &#123;nxt[i][j][1] = make_pair (k, j); break;&#125; &#125; if (dat[i][j-1] != ch) nxt[i][j][2] = make_pair (i, j-1); else nxt[i][j][2] = nxt[i][j-1][2]; for (rint k = j + 1; k &lt;= m; k ++) &#123; if (dat[i][k] != ch) &#123;nxt[i][j][3] = make_pair (i, k); break;&#125; &#125; &#125; &#125; 左和上直接继承,右侧暴力枚举,顺便更新路过的点也可以,但是我太菜了没写 比较基本的BFS 12345678910111213141516171819while (!que.empty())&#123; fr = que.front(), que.pop (); nowx = fr.x, nowy = fr.y, nste = fr.ste, nsum = fr.sum; if (dat[nowx][nowy] == s[nste + 1]) &#123; que.push ((node) &#123;nowx, nowy, nste + 1, nsum + 1&#125;); if (nste + 1 == lens) &#123;printf (&quot;%d\\n&quot;, nsum + 1); break;&#125; &#125; else &#123; for (rint i = 0; i &lt;= 3; i ++) &#123; gox = nxt[nowx][nowy][i].first, goy = nxt[nowx][nowy][i].second; if(!gox || !goy) continue; if (vis[gox][goy] &lt; nste) &#123; vis[gox][goy] = nste; que.push ((node)&#123;gox, goy, nste, nsum + 1&#125;);&#125; &#125; &#125;&#125; DREI注意事项 可能有多组数据 最后不要忘记打空格 小心字符串的输入和各种换行符 留心初始化 VIER最后,祝大家 RP ++","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"Luogu P4289 [HAOI2008]移动玩具","slug":"Luogu-P4289","date":"2018-08-31T13:17:29.000Z","updated":"2020-09-02T14:53:55.588Z","comments":true,"path":"Luogu-P4289/","link":"","permalink":"https://brynhild.online/Luogu-P4289/","excerpt":"Luogu P4289 [HAOI2008]移动玩具","text":"Luogu P4289 [HAOI2008]移动玩具 NULL在一个4*4的方框内摆放了若干个相同的玩具，某人想将这些玩具重新摆放成为他心中理想的状态，规定移动时只能将玩具向上下左右四个方向移动，并且移动的位置不能有玩具，请你用最少的移动次数将初始的玩具状态移动到某人心中的目标状态。 EINS很显然地发现,这道题搜索树的深度几乎是无穷的,易于想到用BFS求解. ${4 * 4}$的方阵,总共状态的个数不过 ${65535}$ 种,这告诉我们很普通的BFS就能AC本题.看到题目中每个节点的状态只有 ${0, 1}$ 两种,不难想到使用二位(二进制)哈希判重.队列手写,减小一些常数. ZWEI每个状态的容器 1234567891011struct StandNode&#123; bool a[16]; inline int get_hash () &#123; register int ret &#x3D; a[0]; for (rint i &#x3D; 1; i &lt;&#x3D; 15; i ++) ret &#x3D; (ret&lt;&lt;1) + a[i]; return ret; &#125;&#125; nico_STA, nico_FIN; get_hash() 用来求解每个状态的哈希值, nico_STA 和 nico_nico_FIN 存储初始状态和结束状态. 队列元素 12345struct QueueNode&#123; StandNode a; int ste;&#125; que[65537]; 存储当前状态和步数 主程序 123456789101112131415161718192021int main ()&#123; input (); int FIN = nico_FIN.get_hash(); register int head = 0, tail = 1, diff, xpos, kiana; que[tail].a = nico_STA; sjb[nico_STA.get_hash()] = true; while (head &lt; tail) &#123; head ++; if (que[head].a.get_hash() == FIN) &#123; printf (&quot;%d&quot;, que[head].ste); return 0; &#125; for (rint i = 0; i &lt;= 15; i ++) nico_bfswork (i, i % 4, head, tail); &#125; puts (&quot;No Solution&quot;); return 0;&#125; BFS操作函数 12345678910111213141516171819202122232425262728inline void nico_bfswork (register int diff, register int xpos, register int head, register int &amp;tail)&#123; register StandNode ellias; register int kiana; if (xpos &amp;&amp; !que[head].a.a[diff - 1]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff - 1]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (xpos &lt;= 2 &amp;&amp; !que[head].a.a[diff + 1]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff + 1]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (diff &gt;= 4 &amp;&amp; !que[head].a.a[diff - 4]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff - 4]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (diff &lt;= 11 &amp;&amp; !que[head].a.a[diff + 4]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff + 4]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125;&#125; 枚举四种方向, 判断是否可行, 加入队列. 特别提醒: tail 一定要取地址 DREI代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma G++ optimize (&quot;Ofast&quot;, 3)#include &lt;cstdio&gt;#include &lt;map&gt;using namespace std;#define rint register int#define swap(x,y) ((y)^=(x)^=(y)^=(x))#define gc() getchar()struct StandNode&#123; bool a[16]; inline int get_hash () &#123; register int ret = a[0]; for (rint i = 1; i &lt;= 15; i ++) ret = (ret&lt;&lt;1) + a[i]; return ret; &#125;&#125; nico_STA, nico_FIN;struct QueueNode&#123; StandNode a; int ste;&#125; que[65537];inline void input ()&#123; register char c[5]; register int pos = 0; for (rint t = 1; t &lt;= 4; t ++) &#123; scanf (&quot;%s&quot;, c); for (rint i = 0; i &lt;= 3; i ++) nico_STA.a[pos ++] = c[i] - &#x27;0&#x27;; &#125; pos = 0; for (rint t = 1; t &lt;= 4; t ++) &#123; scanf (&quot;%s&quot;, c); for (rint i = 0; i &lt;= 3; i ++) nico_FIN.a[pos ++] = c[i] - &#x27;0&#x27;; &#125;&#125;map &lt;int, bool&gt; sjb;inline void nico_bfswork (register int diff, register int xpos, register int head, register int &amp;tail)&#123; register StandNode ellias; register int kiana; if (xpos &amp;&amp; !que[head].a.a[diff - 1]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff - 1]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (xpos &lt;= 2 &amp;&amp; !que[head].a.a[diff + 1]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff + 1]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (diff &gt;= 4 &amp;&amp; !que[head].a.a[diff - 4]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff - 4]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (diff &lt;= 11 &amp;&amp; !que[head].a.a[diff + 4]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff + 4]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125;&#125;signed main ()&#123; input (); int FIN = nico_FIN.get_hash(); register int head = 0, tail = 1, diff, xpos, kiana; que[tail].a = nico_STA; sjb[nico_STA.get_hash()] = true; while (head &lt; tail) &#123; head ++; if (que[head].a.get_hash() == FIN) &#123; printf (&quot;%d&quot;, que[head].ste); return 0; &#125; for (rint i = 0; i &lt;= 15; i ++) nico_bfswork (i, i % 4, head, tail); &#125; puts (&quot;No Solution&quot;); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"CF749E Inversions After Shuffle","slug":"CF749E-Inversions-After-Shuffle","date":"2018-08-14T05:24:30.000Z","updated":"2020-09-02T14:54:46.098Z","comments":true,"path":"CF749E-Inversions-After-Shuffle/","link":"","permalink":"https://brynhild.online/CF749E-Inversions-After-Shuffle/","excerpt":"CF749E Inversions After Shuffle给出一个1~n的排列,从中等概率抽取一个连续的片段,并对其进行等概率全排列,求排列后整个序列的逆序对的期望个数.","text":"CF749E Inversions After Shuffle给出一个1~n的排列,从中等概率抽取一个连续的片段,并对其进行等概率全排列,求排列后整个序列的逆序对的期望个数. problem给出一个1~n的排列,从中等概率抽取一个连续的片段,并对其进行等概率全排列,求排列后整个序列的逆序对的期望个数. solution设所选的区间长度为l,考虑一个有序数对 ${a_i,a_j (i&lt;j)}$ 并计算其贡献.这样一来,就有两种情况: ${a_i,a_j}$在所选的连续段中 ${a_i,a_j}$在所选的连续段之外 对于情况2,当${a_i&lt;a_j}$时,很显然他们不会对答案有贡献.对于${a_i&gt;a_j}$,对于区间 ${[1,j-1],[i+1,n]}$ 才会有贡献.但很显然地看到,区间 ${[i+1,j-1]}$ 被重复计算,要在计算概率时将其剪掉.如果使用 ${O(n^2)}$暴力显然会超时,可以将其用树状数组维护. 对于情况1就很简单,满足全排列概率为${\\frac{1}{2}}$,满足连续段包含关系的概率为 ${2\\frac{i(n-j+1)}{n*(n+1)}}$,概率相乘结果 $${P_{i,j}=\\frac{i*(n-j+1)}{n*(n+1)}}$$ 那么总期望为 $${P=\\sum_{i=1}^n\\sum_{j=i+1}^n \\frac{i*(n-j+1)}{n*(n+1)}}$$ $${P=\\frac{1}{2}\\sum_{i=1}^n \\frac{i*(n-i)(n-i+1)}{n(n+1)}}$$ code加入操作 1234inline void add (int x, int w, ll *c)&#123; while (x) &#123; c[x] += w, x &amp;= x-1;&#125;&#125; 询问操作 12345678inline ll query (int x, ll *c)&#123; long long ret = 0; while (x&lt;=n) &#123; ret += c[x], x += lowbit(x); &#125; return ret;&#125; 主程序 1234567891011121314static int main ()&#123; n = read(); for (register int i = 1; i &lt;= n; ++ i) &#123; a = read(); tmp += query (a+1, c1); ans -= (double)query(a+1, c2)*(n-i+1); ans += (double)(n-i+1)*i*(i-1)/4.0; add (a, 1, c1); add (a, i, c2); &#125; printf (&quot;%.20lf&quot;, (double)(tmp+ans/((double)n*(n+1)/2.0))); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"洛谷 P1654 OSU!","slug":"Luogu-P1654-OSU","date":"2018-07-27T11:18:52.000Z","updated":"2020-09-02T14:56:30.509Z","comments":true,"path":"Luogu-P1654-OSU/","link":"","permalink":"https://brynhild.online/Luogu-P1654-OSU/","excerpt":"洛谷 P1654 OSU! 滚动数组","text":"洛谷 P1654 OSU! 滚动数组 本题可以使用滚动数组进一步优化空间. 空间多精贵. 订正一下本题题干:小H和小Z正在玩一个取石子游戏。 取石子游戏的规则是这样的，每个人每次可以从一堆石子中取出若干个石子，每次取石子的个数有限制，谁不能取石子时就会输掉游戏。 小H先进行操作，他想问你他是否有必胜策略，如果有，第一步如何取石子。 优化分析看到楼下大佬的代码，用庞大的数组会造成大量的内存浪费. 从算法中可以看到，一个状态只从它前一个状态转移而来，就可以使用滚动数组节约空间. 第一次使用数组取 0 位， 每次转移将 pos ^ 1. 代码如下 12345678for (register int i = 1; i &lt;= n; ++ i, pos ^= 1)&#123; exp = !pos, k = getdou (); x[pos] = (x[exp] + 1) * k; y[pos] = (y[exp] + 2*x[exp] + 1) * k; v[pos] = v[exp] + (3*x[exp] + 3*y[exp]+1) * k;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"洛谷 P2899 [USACO08JAN]手机网络Cell Phone Network","slug":"Luogu-P2899-Cell-Phone-Network","date":"2018-06-28T07:31:29.000Z","updated":"2020-09-02T14:55:56.914Z","comments":true,"path":"Luogu-P2899-Cell-Phone-Network/","link":"","permalink":"https://brynhild.online/Luogu-P2899-Cell-Phone-Network/","excerpt":"树状贪心洛谷 P2899 [USACO08JAN]手机网络Cell Phone Network","text":"树状贪心洛谷 P2899 [USACO08JAN]手机网络Cell Phone Network 题目Farmer John has decided to give each of his cows a cell phone in hopes to encourage their social interaction. This, however, requires him to set up cell phone towers on his N (1 ≤ N ≤ 10,000) pastures (conveniently numbered 1..N) so they can all communicate. Exactly N-1 pairs of pastures are adjacent, and for any two pastures A and B (1 ≤ A ≤ N; 1 ≤ B ≤ N; A ≠ B) there is a sequence of adjacent pastures such that A is the first pasture in the sequence and B is the last. Farmer John can only place cell phone towers in the pastures, and each tower has enough range to provide service to the pasture it is on and all pastures adjacent to the pasture with the cell tower. Help him determine the minimum number of towers he must install to provide cell phone service to each pasture. 分析本题要求使用最少的电磁塔, 把所有的节点覆盖掉. 由 N-1 条边我们可以了解到, 这是一棵树. 从树的叶子节点向上看, 显然在儿子节点摆电磁塔是不合算的. 所以很显然地, 从最后一层向上搜索, 每遇到一个儿子节点没有被覆盖, 就在他父亲上摆一个电磁塔. 很显然, 从下向上枚举, 对于本题的数据这种方法是成立的. 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#pragma GCC optimize (&quot;Ofast&quot;)#include &quot;iostream&quot;#include &quot;stdio.h&quot;#include &quot;vector&quot;#define rint register intusing namespace std;inline int read()&#123; int x=0ll,t=1ll; char ch=getchar(); while((ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;)&amp;&amp;ch!=&#x27;-&#x27;)ch=getchar(); if(ch==&#x27;-&#x27;)t=-1,ch=getchar(); while(ch&lt;=&#x27;9&#x27;&amp;&amp;ch&gt;=&#x27;0&#x27;)x=x*10+ch-48,ch=getchar(); return x*t;&#125;bool check[10001];int n, fa[10001], ans, mxdp;vector &lt;int&gt; mp[10001], fl[10001];inline void dfs (int u, int de)&#123; mxdp = max (mxdp, de); fl[de].push_back (u); int v; for (rint i = 0; i &lt; mp[u].size (); ++ i) &#123; v = mp[u][i]; if (!(v ^ fa[u])) continue; fa[v] = u; dfs (v, de + 1); &#125;&#125;inline void work (int u)&#123; check[u] = true; for (rint i = 0; i &lt; mp[u].size (); ++ i) check[mp[u][i]] = true;&#125;signed main ()&#123; n = read (); int u, v; for (rint i = 1; i &lt; n; ++ i) &#123; u = read (), v = read (); mp[u].push_back (v); mp[v].push_back (u); &#125; dfs (1, 0); for (rint i = mxdp; i &gt;= 0; -- i) &#123; for (rint j = 0; j &lt; fl[i].size (); ++ j) &#123; u = fl[i][j], v = fa[u]; if (check[u]) continue; ans ++; work (v); &#125; &#125; printf (&quot;%d&quot;, ans);&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"贪心","slug":"贪心","permalink":"https://brynhild.online/tags/%E8%B4%AA%E5%BF%83/"}]},{"title":"洛谷 线段树模板","slug":"luogu-segment-tree","date":"2018-06-08T11:29:26.000Z","updated":"2020-09-02T14:53:34.404Z","comments":true,"path":"luogu-segment-tree/","link":"","permalink":"https://brynhild.online/luogu-segment-tree/","excerpt":"洛谷 线段树1 线段树2 模板","text":"洛谷 线段树1 线段树2 模板 P3372 [模板] 线段树 1Luogu P3372 线段树加 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#pragma GCC optimize (2)//...略#pragma GCC target (&quot;f16c&quot;)#include &lt;cstdio&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline long long read ()&#123; register long long x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (long long x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (long long x) &#123;if(x&lt;0)x=-x,putchar(&#x27;-&#x27;); write (x); putchar (&#x27;\\n&#x27;);&#125;#define Re register#define maxn 100001#define dmax 400001typedef long long ll;#define swap(x,y) ((x)^=(y)^=(x)^=(y))struct SMT &#123; int l, r; long long sum, tag;&#125; tr[dmax];inline void update (Re int rt) &#123; tr[rt].sum = tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].sum;&#125;static void build (Re int rt, Re int l, Re int r)&#123; tr[rt].l = l, tr[rt].r = r; if (l == r) &#123;tr[rt].sum = read(); return;&#125; register int mid = (l + r) &gt;&gt; 1; build (rt&lt;&lt;1, l, mid), build (rt&lt;&lt;1|1, mid+1, r); update (rt);&#125;inline void pushdown (Re int rt)&#123; if (rt &gt; 200000 || !tr[rt].tag) return; register int ls = rt&lt;&lt;1, rs = rt&lt;&lt;1|1; tr[ls].tag += tr[rt].tag, tr[rs].tag += tr[rt].tag; tr[ls].sum += tr[rt].tag * (tr[ls].r - tr[ls].l + 1), tr[rs].sum += tr[rt].tag * (tr[rs].r - tr[rs].l + 1); tr[rt].tag = 0;&#125;static void modify (Re int rt, Re int l, Re int r, Re ll val)&#123; register int L = tr[rt].l, R = tr[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) &#123; tr[rt].sum += val * (R - L + 1), tr[rt].tag += val; return; &#125; register int mid = (L + R) &gt;&gt; 1; pushdown (rt); if (l &lt;= mid) modify (rt&lt;&lt;1, l, r, val); if (r &gt; mid) modify (rt&lt;&lt;1|1,l,r, val); update (rt);&#125;static long long query (Re int rt, Re int l, Re int r)&#123; register int L = tr[rt].l, R = tr[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) return tr[rt].sum; pushdown (rt); register int mid = (L+R)&gt;&gt;1; register long long ret = 0; if (l &lt;= mid) ret = query (rt&lt;&lt;1, l, r); if (r &gt; mid) ret += query (rt&lt;&lt;1|1,l,r); return ret;&#125;signed main ()&#123; register int n=read(), m=read(); register int opt, x, y; register long long z; build (1, 1, n); while (m --) &#123; opt=read(), x=read(), y=read(); if (x &gt; y) swap (x, y); if (opt == 2) writelen (query (1, x, y)); else z = read (), modify (1, x, y, z); &#125; return 0;&#125; P3373 [模板]线段树 2Luogu P3372 加 乘 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#pragma GCC optimize (2)//..略#pragma GCC target (&quot;f16c&quot;)#include &lt;cstdio&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline long long read ()&#123; register long long x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (long long x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (long long x) &#123;if(x&lt;0)x=-x,putchar(&#x27;-&#x27;); write (x); putchar (&#x27;\\n&#x27;);&#125;inline long long mul_mod (register long long a,register long long b,register long long mo) &#123; register long long ret; __asm__ __volatile__ (&quot;\\tmull %%ebx\\n\\tdivl %%ecx\\n&quot; : &quot;=d&quot;(ret):&quot;a&quot;(a),&quot;b&quot;(b),&quot;c&quot;(mo)); return ret;&#125;#define Re register#define maxn 100001#define dmax 400001typedef long long ll;#define swap(x,y) ((x)^=(y)^=(x)^=(y))#define mod(x) (((x)%modn+modn)%modn)long long modn;struct SMT &#123; int l, r; long long sum, add, mul;&#125; tr[dmax];inline void update (Re int rt) &#123; tr[rt].sum = tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].sum;&#125;static void build (Re int rt, Re int l, Re int r)&#123; tr[rt] = &#123;l, r, 0ll, 0ll, 1ll&#125;; if (l == r) &#123;tr[rt].sum = read()%modn; return;&#125; register int mid = (l + r) &gt;&gt; 1; build (rt&lt;&lt;1, l, mid), build (rt&lt;&lt;1|1, mid+1, r); update (rt);&#125;inline void pushdown (Re int rt)&#123; if (rt &gt; 200000 || (!tr[rt].add &amp;&amp; tr[rt].mul == 1ll)) return; register int ls = rt &lt;&lt; 1, rs = rt &lt;&lt; 1 | 1; tr[ls].mul = mul_mod (tr[ls].mul, tr[rt].mul, modn); tr[rs].mul = mul_mod (tr[rs].mul, tr[rt].mul, modn); tr[ls].add = mod (mul_mod (tr[ls].add , tr[rt].mul, modn) + tr[rt].add); tr[rs].add = mod (mul_mod (tr[rs].add, tr[rt].mul, modn) + tr[rt].add); tr[ls].sum = mod (mul_mod (tr[ls].sum, tr[rt].mul, modn) + mul_mod (tr[rt].add, (tr[ls].r - tr[ls].l + 1), modn)); tr[rs].sum = mod (mul_mod (tr[rs].sum, tr[rt].mul, modn) + mul_mod (tr[rt].add, (tr[rs].r - tr[rs].l + 1), modn)); tr[rt].add = 0ll, tr[rt].mul = 1ll;&#125;// opt==1: mul opt==2: addstatic void modify (Re int rt, Re int l, Re int r, Re ll val, Re int opt)&#123; register int L = tr[rt].l, R = tr[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) &#123; if (opt == 2) &#123; tr[rt].add = mod (tr[rt].add + val),\\ tr[rt].sum = mod (tr[rt].sum + mul_mod (val, (R - L + 1), modn)); return; &#125; else &#123; tr[rt].mul = mul_mod (tr[rt].mul, val, modn),\\ tr[rt].sum = mul_mod (tr[rt].sum, val, modn),\\ tr[rt].add = mul_mod (tr[rt].add, val, modn); return; &#125; &#125; pushdown (rt); register int mid = (L + R) &gt;&gt; 1; if (l &lt;= mid) modify (rt&lt;&lt;1, l, r, val, opt); if (r &gt; mid) modify (rt&lt;&lt;1|1,l,r, val, opt); update (rt);&#125;static long long query (Re int rt, Re int l, Re int r)&#123; register int L = tr[rt].l, R = tr[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) return tr[rt].sum; pushdown (rt); register int mid = (L+R)&gt;&gt;1; register long long ret = 0; if (l &lt;= mid) ret = query (rt&lt;&lt;1, l, r); if (r &gt; mid) ret += query (rt&lt;&lt;1|1,l,r); return ret % modn;&#125;signed main ()&#123; register int n=read(), m=read(); modn=read(); register int opt, x, y; register long long z; build (1, 1, n); while (m --) &#123; opt=read(), x=read(), y=read(); if (x &gt; y) swap (x, y); if (opt == 3) writelen (query (1,x,y)); else z=read()%modn,modify(1,x,y,z,opt); &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"},{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"最短路模板","slug":"shortest-path","date":"2017-12-05T06:47:00.000Z","updated":"2020-09-02T14:51:35.546Z","comments":true,"path":"shortest-path/","link":"","permalink":"https://brynhild.online/shortest-path/","excerpt":"SPFA 堆优化迪杰斯特拉C++模板","text":"SPFA 堆优化迪杰斯特拉C++模板 SPFALuogu P3371 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#pragma G++ optimize (3)#include &lt;cstdio&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline long long read ()&#123; register long long x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; c ^ &#x27;-&#x27;) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (long long x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;inline const int&amp; min (const int&amp; a, const int&amp; b) &#123;return a&lt;b? a:b;&#125;#define Re register#define maxn 10001#define maxm 500001int head[maxn], nxt[maxm], too[maxm], ecnt;long long wei[maxm], dis[maxn];int que[maxm*100 + 100];bool vis[maxn];signed main ()&#123; register int n = read (), m = read (), sta = read (); for (Re int i = 1; i &lt;= n; ++ i) dis[i] = 2147483647; register int fr, to, va; while (m --) &#123; fr = read (), to = read (), va = read (); nxt[++ ecnt] = head[fr], head[fr] = ecnt, too[ecnt] = to, wei[ecnt] = va; &#125; dis[sta] = 0; register int hd = 0, tl = 1; que[tl] = sta; while (hd &lt; tl) &#123; fr = que[++ hd], vis[fr] = false; for (Re int i = head[fr]; i; i = nxt[i]) &#123; to = too[i], va = wei[i]; if (dis[to] &gt; dis[fr] + va) &#123; dis[to] = dis[fr] + va; if (!vis[to]) vis[to] = true, que[++ tl] = to; &#125; &#125; &#125; for (Re int i = 1; i &lt;= n; ++ i) &#123; if (dis[i]&lt;0) dis[i] = -dis[i], putchar (&#x27;-&#x27;); write (dis[i]), putchar (&#x27; &#x27;); &#125; return 0;&#125; 堆优化迪杰斯特拉Luogu P4779 OLD (2017)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;avx&quot;,&quot;sse2&quot;)#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;#include &lt;ext/pb_ds/priority_queue.hpp&gt;using namespace std;using namespace __gnu_pbds;#define maxn 100001#define maxm 200001#define inff 2147483647inline int read () &#123; int x = 0; char c = getchar(); bool m = false; while (!isdigit(c) &amp;&amp; c != &#x27;-&#x27;) c = getchar(); if (c == &#x27;-&#x27;) c = getchar(), m = true; while (isdigit(c)) x = x * 10 + c - 48, c = getchar(); if (m) return -x; else return x;&#125;inline void fastwrite (int x) &#123; if(x &lt; 0) x = -x, putchar(&#x27;-&#x27;); if(x &gt; 9) fastwrite(x / 10); putchar(x%10 + &#x27;0&#x27;);&#125;inline void fastwritespace (int x) &#123; fastwrite(x); putchar(&#x27; &#x27;);&#125;struct node &#123; int val, name;&#125;;struct cmp &#123; inline bool operator() (const node&amp; aa, const node&amp; bb) &#123; return aa.val &gt; bb.val; &#125;&#125;;int n, m, s, fro, to, w;int dis[maxn];bool visit[maxn];vector &lt;pair &lt;int, int&gt; &gt; data[maxn];__gnu_pbds::priority_queue &lt;node, cmp, pairing_heap_tag&gt; nico;int main () &#123; n = read (), m = read (), s = read (); for (int i = 1; i &lt;= m; i ++) &#123; fro = read (), to = read (), w = read (); data[fro].push_back (make_pair (to, w)); &#125; for (int i = 1; i &lt;= n; i ++) dis[i] = inff; dis[s] = 0; nico.push ((node) &#123; 0, s &#125;); while (!nico.empty ()) &#123; fro = nico.top ().name; nico.pop (); if (visit[fro]) continue; visit[fro] = true; for (int i = 0; i &lt; data[fro].size (); i ++) &#123; to = data[fro][i].first; w = data[fro][i].second; if (!visit[to] &amp;&amp; dis[fro] + w &lt; dis[to]) &#123; dis[to] = dis[fro] + w; nico.push ((node) &#123; dis[to], to &#125;); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) fastwritespace (dis[i]); return 0;&#125; NEW(2018/11/5)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#pragma G++ optimize (3)#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;queue&gt;using std::priority_queue;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (int x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void nwrite (int x) &#123;write (x); putchar (&#x27; &#x27;);&#125;#define maxn 100001#define maxm 200001#define Re registerstruct node &#123; int id, val; friend bool operator &lt; (node a, node b) &#123; return a.val &gt; b.val; &#125;&#125;;priority_queue &lt;node&gt; que;int head[maxn], wei[maxm], too[maxm], nxt[maxm], ecnt;bool vis[maxn];int dis[maxn];signed main ()&#123; register int n = read (), m = read (), sta = read (); register int fr, to, va; while (m --) &#123; fr = read (), nxt[++ ecnt] = head[fr],\\ head[fr] = ecnt, too[ecnt] = read (), wei[ecnt] = read (); &#125; memset (dis, 0x3f3f3f3f, sizeof dis); dis[sta] = 0; que.push (&#123;sta, 0&#125;); while (!que.empty ()) &#123; fr = que.top ().id, que.pop (); if (!vis[fr]) &#123; vis[fr] = true; for (Re int i = head[fr]; i; i = nxt[i]) &#123; to = too[i], va = wei[i]; if (dis[fr] + va &lt; dis[to]) &#123; dis[to] = dis[fr] + va; que.push (&#123;to, dis[to]&#125;); &#125; &#125; &#125; &#125; for (Re int i = 1; i &lt;= n; ++ i) nwrite (dis[i]); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"最短路","slug":"最短路","permalink":"https://brynhild.online/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}]},{"title":"HEXO博客的基本搭建","slug":"hexo-buildup","date":"2017-11-13T03:10:00.000Z","updated":"2020-09-02T14:56:59.256Z","comments":true,"path":"hexo-buildup/","link":"","permalink":"https://brynhild.online/hexo-buildup/","excerpt":"HEXO 博客的基本搭建安装 初始化 部署","text":"HEXO 博客的基本搭建安装 初始化 部署 事前准备准备仓库在 GitHub 上注册账号并创建仓库 yourname.github.io 安装必要环境安装 node.js 及 git 完成后在命令窗口分别输入 123node -vnpm -vgit- version 如显示正确版本号即为成功. SSH授权在目录下右键,git bash 1ssh-keygen -t rsa 在C盘用户目录下用记事本打开公钥,复制内容添加到 GitHub. 在 git bash 中输入 1ssh -T git@github.com 测试是否成功. 安装及运行安装和初始化 HEXO1234$ npm install hexo-cli -g$ hexo init$ hexo g$ hexo s HEXO 命令一览12345678910111213141516171819202122Commands: clean Remove generated files and cache. config Get or set configurations. deploy Deploy your website. generate Generate static files. help Get help on a command. init Create a new Hexo folder. list List the information of the site migrate Migrate your site from other system to Hexo. new Create a new post. publish Moves a draft post from _drafts to _posts folder. render Render files with renderer plugins. server Start the server. version Display version information.Global Options: --config Specify config file instead of using _config.yml --cwd Specify the CWD --debug Display all verbose messages in the terminal --draft Display draft posts --safe Disable all plugins and scripts --silent Hide output on console","categories":[{"name":"HEXO","slug":"HEXO","permalink":"https://brynhild.online/categories/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"https://brynhild.online/tags/HEXO/"}]}],"categories":[{"name":"memory","slug":"memory","permalink":"https://brynhild.online/categories/memory/"},{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"},{"name":"VPN","slug":"VPN","permalink":"https://brynhild.online/categories/VPN/"},{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/categories/Trick/"},{"name":"buzzer","slug":"buzzer","permalink":"https://brynhild.online/categories/buzzer/"},{"name":"HEXO","slug":"HEXO","permalink":"https://brynhild.online/categories/HEXO/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"},{"name":"VPN","slug":"VPN","permalink":"https://brynhild.online/tags/VPN/"},{"name":"VPS","slug":"VPS","permalink":"https://brynhild.online/tags/VPS/"},{"name":"OBS","slug":"OBS","permalink":"https://brynhild.online/tags/OBS/"},{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/tags/Trick/"},{"name":"buzzer","slug":"buzzer","permalink":"https://brynhild.online/tags/buzzer/"},{"name":"倍增","slug":"倍增","permalink":"https://brynhild.online/tags/%E5%80%8D%E5%A2%9E/"},{"name":"生成树","slug":"生成树","permalink":"https://brynhild.online/tags/%E7%94%9F%E6%88%90%E6%A0%91/"},{"name":"并查集","slug":"并查集","permalink":"https://brynhild.online/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"},{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"contest","slug":"contest","permalink":"https://brynhild.online/tags/contest/"},{"name":"DP","slug":"DP","permalink":"https://brynhild.online/tags/DP/"},{"name":"STL","slug":"STL","permalink":"https://brynhild.online/tags/STL/"},{"name":"贪心","slug":"贪心","permalink":"https://brynhild.online/tags/%E8%B4%AA%E5%BF%83/"},{"name":"最短路","slug":"最短路","permalink":"https://brynhild.online/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"HEXO","slug":"HEXO","permalink":"https://brynhild.online/tags/HEXO/"}]}